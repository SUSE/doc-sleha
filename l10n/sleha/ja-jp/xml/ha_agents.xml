<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="ha_agents.xml" version="5.0" xml:id="cha-ha-agents">
 <title>リソースエージェントの追加または変更</title>
 <info>
      <abstract>
        <para>
    クラスタによる管理が必要なすべての作業は、リソースとして使用できなければなりません。主要なグループとして、リソースエージェントとSTONITHエージェントの2つがあります。両方のカテゴリで、エージェントの追加や所有が可能で、クラスタ機能を各自のニーズに合わせて拡張することができます。
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:maintainer/>
        <dm:status>editing</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>yes</dm:translation>
        <dm:languages/>
        <dm:release/>
        <dm:repository/>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec-ha-stonithagents">
  <title>STONITHエージェント</title>

  <para>
   クラスタがノードの1つの誤動作を検出し、そのノードの削除が必要となることがあります。これを<emphasis>フェンシング</emphasis>と呼び、一般にSTONITHリソースで実行されます。 
  </para>

  <warning>
   <title>外部SSH/STONITHはサポートされていません</title>
   <para>
    SSHが他のシステムの問題にどのように反応するのかを知る方法はありません。このため、外部SSH/STONITHエージェント(<literal>stonith:external/ssh</literal>など)は、運用環境ではサポートされていません。テスト目的でこのようなエージェントをまだ使用する場合は、<package>libglue-devel</package>パッケージをインストールしてください。
   </para>
  </warning>

  <para>
   現在使用可能なすべてのSTONITHデバイス(ソフトウェア側から)のリストを入手するには、<command>crm ra list stonith</command>コマンドを使用します。お気に入りのエージェントが見つからない場合は、<package>-devel</package>パッケージをインストールしてください。STONITHデバイスおよびリソースエージェントの詳細については、<xref linkend="cha-ha-fencing"/>を参照してください。
  </para>

  <para>
   今のところ、STONITHエージェントの作成に関するマニュアルはありません。新しいSTONITHエージェントを作成する場合は、<package>cluster-glue</package>パッケージのソースに提供されている例を参照してください。
  </para>
 </sect1>
 <sect1 xml:id="sec-ha-writingresourceagents">
  <title>OCFリソースエージェントの作成</title>

  <para>
   <filename>/usr/lib/ocf/resource.d/</filename>で提供されているすべてのOCFリソースエージェントの詳細については、<xref linkend="sec-ha-config-basics-raclasses"/>を参照してください。各リソースエージェントは、それを制御する次の操作をサポートしている必要があります。
  </para>

  <variablelist>
   <varlistentry>
    <term><command>start</command>
    </term>
    <listitem>
     <para>
      リソースを開始または有効化します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>stop</command>
    </term>
    <listitem>
     <para>
      リソースを中止または無効化します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>status</command>
    </term>
    <listitem>
     <para>
      リソースのステータスを返します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>monitor</command>
    </term>
    <listitem>
     <para>
      <command>status</command>と同様ですが、予期しない状態もチェックします。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>validate</command>
    </term>
    <listitem>
     <para>
      リソースの設定を検証します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>meta-data</command>
    </term>
    <listitem>
     <para>
      リソースエージェントの情報をXMLで返します。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   OCF RAの作成方法の一般的な手順は、次のとおりです。
  </para>

  <procedure>
   <step>
    <para>
     テンプレートとして、<filename>/usr/lib/ocf/resource.d/pacemaker/Dummy</filename>ファイルをロードします。
    </para>
   </step>
   <step>
    <para>
     新しいリソースエージェントごとに新しいサブディレクトリを作成して、名前が競合しないようにします。たとえばリソースグループ<systemitem>kitchen</systemitem>にリソース<systemitem>coffee_machine</systemitem>がある場合、このリソースを<filename>/usr/lib/ocf/resource.d/kitchen/</filename>ディレクトリに追加します。このRAにアクセスするには、コマンド<command>crm</command>を実行します。
    </para>
<screen><prompt role="root">root # </prompt><command>crm</command> configure primitive coffee_1 ocf:coffee_machine:kitchen ...</screen>
   </step>
   <step>
    <para>
     異なるシェル関数を実装し、異なる名前でファイルを保存します。
    </para>
   </step>
  </procedure>

  <para>
   OCFリソースエージェントの作成についての詳細は、<link xlink:href="http://www.linux-ha.org/wiki/Resource_Agents"/>を参照してください。コンセプトの特別な情報については、<xref linkend="cha-ha-concepts"/>を参照してください。
  </para>
 </sect1>
 <xi:include href="ha_error_codes.xml"/>
</chapter>
