<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="ha_configuring_resources.xml" xml:id="sec-ha-config-basics-resources" xml:lang="ja" version="5.1">
 <title>クラスタリソースの設定</title>
 <info>
  <abstract>
   <para>
    クラスタの管理者は、クラスタ内のサーバ上の各リソースや、サーバ上で実行する各アプリケーションに対してクラスタリソースを作成する必要があります。クラスタリソースには、Webサイト、メールサーバ、データベース、ファイルシステム、仮想マシン、およびユーザが常時使用できるその他のサーバベースのアプリケーションまたはサービスなどが含まれます。
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

  <sect1 xml:id="sec-ha-config-basics-resources-types">
   <title>リソースのタイプ</title>
   <para>
    次のリソースタイプを作成できます。
   </para>
   <variablelist>
    <varlistentry>
     <term>プリミティブ</term>
     <listitem>
      <para>
       プリミティブリソースは、リソースの中で最も基本的なタイプです。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>グループ</term>
     <listitem>
      <para>
       グループには、一緒の場所で見つけ、連続して開始し、逆の順序で停止する必要のあるリソースセットが含まれます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>クローン</term>
     <listitem>
      <para>
       クローンは、複数のホスト上でアクティブにできるリソースです。対応するリソースエージェントがサポートしていれば、どのようなリソースもクローン化できます。
      </para>
      <para>
       プロモータブルクローン(マルチステートリソースとも呼ばれていました)は、昇格できる特別なタイプのクローンリソースです。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect1>

  <sect1 xml:id="sec-ha-config-basics-raclasses">
   <title>サポートされるリソースエージェントクラス</title>
   <para>
    追加するクラスタリソースごとに、リソースエージェントが準拠する基準を定義する必要があります。リソースエージェントは、提供するサービスを抽象化して正確なステータスをクラスタに渡すので、クラスタは管理するリソースについてコミットする必要がありません。クラスタは、リソースエージェントに依存して、start、stop、またはmonitorのコマンドの発行に適宜対応します。
   </para>
   <para>
    通常、リソースエージェントはシェルスクリプトの形式で配布されます。SUSE Linux Enterprise High Availabilityは次のリソースエージェントクラスをサポートします。
   </para>
   <variablelist>
    <varlistentry xml:id="vle-ha-resources-ocf-ra">
     <term>Open Cluster Framework (OCF)リソースエージェント</term>
     <listitem>
      <para>
       OCF RAエージェントは、High Availabilityでの使用に最適であり、特に、プロモータブルクローンリソースまたは特殊なモニタリング機能を必要とする場合に適しています。それらのエージェントは、通常、<filename>/usr/lib/ocf/resource.d/<replaceable>provider</replaceable>/</filename>にあります。この機能はLSBスクリプトの機能と同様です。ただし、環境設定では、常に、パラメータの受け入れと処理を容易にする環境変数が使用されます。OCF仕様ではアクションによってどの出口コードが返されるか、厳密な定義があります。<xref linkend="sec-ha-errorcodes"/>を参照してください。クラスタは、それらの仕様に正確に準拠します。
      </para>
      <para>
       すべてのOCFリソースエージェントは少なくとも<literal>start</literal>、<literal>stop</literal>、<literal>status</literal>、<literal>monitor</literal>および<literal>meta-data</literal>の各アクションが必要です。<literal>meta-data</literal>アクションは、エージェントの設定方法についての情報を取得します。たとえば、プロバイダ<literal>IPaddr</literal>で<literal>heartbeat</literal>エージェントの詳細を知るには、次のコマンドを使用します。
      </para>
<screen>OCF_ROOT=/usr/lib/ocf /usr/lib/ocf/resource.d/heartbeat/IPaddr meta-data</screen>
      <para>
       出力は、XML形式の情報であり、いくつかのセクションを含みます(一般説明、利用可能なパラメータ、エージェント用の利用可能なアクション)。
      </para>
      <para>
       または、crmshを使用して、OCFリソースエージェントに関する情報を表示します。詳細については、<xref linkend="sec-ha-manual-config-ocf"/>を参照してください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Linux Standards Base (LSB)スクリプト</term>
     <listitem>
      <para>
       LSBリソースエージェントは一般にオペレーティングシステム/配布パッケージによって提供され、<filename>/etc/init.d</filename>にあります。リソースエージェントをクラスタで使用するには、それらのエージェントがLSB iniスクリプトの仕様に準拠している必要があります。たとえば、エージェントには複数のアクションが実装されている必要があります。少なくとも<literal>start</literal>、<literal>stop</literal>、<literal>restart</literal>、<literal>reload</literal>、<literal>force-reload</literal>および<literal>status</literal>が実装されている必要があります。詳細については、<link xlink:href="https://refspecs.linuxbase.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html"/>を参照してください。
      </para>
      <para>
       これらのサービスの構成は標準化されていません。High AvailabilityでLSBスクリプトを使用する場合は、該当のスクリプトの設定方法を理解する必要があります。これに関する情報は、多くの場合、<filename>/usr/share/doc/packages/<replaceable>PACKAGENAME</replaceable></filename>内の該当パッケージのマニュアルに記載されています。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>systemd</term>
     <listitem>
      <para>
       Pacemakerは、systemdサービスが存在する場合は、それを管理できます。initスクリプトの代わりに、systemdはユニットファイルを持ちます。一般的に、サービス(またはユニットファイル)は、オペレーティングシステムによって提供されます。既存のinitスクリプトを変換する場合は、<link xlink:href="https://0pointer.de/blog/projects/systemd-for-admins-3.html"/>で詳細情報を検索してください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>サービス</term>
     <listitem>
      <para>
       現在、並列に存在するタイプのシステムサービスが多数あります: <literal>LSB</literal> (System V initに属する)、<literal>systemd</literal>、および(一部のディストリビューションでは) <literal>upstart</literal>。そのため、Pacemakerは、どれが指定のクラスタノードに適用されるのかを理解する特殊なエイリアスをサポートします。これは、クラスタにsystemd、upstart、およびLSBサービスが混在する場合には特に役立ちます。Pacemakerは、次の順番で指定されたサービスを検索しようとします: LSB (SYS-V) initスクリプト、systemdユニットファイル、またはUpstartジョブ。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Nagios</term>
     <listitem>
      <para>
       モニタリングプラグイン(かつてはNagiosプラグインと呼ばれていた)により、リモートホスト上のサービスを監視できます。Pacemakerは、モニタリングプラグインが存在する場合は、これを使用してリモートモニタリングを実行できます。詳細については、<xref linkend="sec-ha-config-basics-remote-nagios"/>を参照してください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>STONITH(フェンシング)リソースエージェント</term>
     <listitem>
      <para>
       このクラスは、フェンシング関係のリソース専用に使用されます。詳細については、<xref linkend="cha-ha-fencing"/>を参照してください。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    SUSE Linux Enterprise High Availabilityによって提供されるエージェントは、OCFの仕様に基づいて開発されています。
   </para>
  </sect1>

  <sect1 xml:id="sec-ha-config-basics-timeouts">
   <title>タイムアウト値</title>
   <para>
    リソースのタイムアウト値は次の3つのパラメータの影響を受けることがあります。
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <varname>op_defaults</varname> (操作用のグローバルタイムアウト)
     </para>
    </listitem>
    <listitem>
     <para>
      リソーステンプレートに対して定義された特定のタイムアウト値
     </para>
    </listitem>
    <listitem>
     <para>
      リソースに対して定義された特定のタイムアウト値
     </para>
    </listitem>
   </itemizedlist>
   <note>
    <title>値の優先度</title>
    <para>
     リソースに対して「特定の」値が定義される場合、グローバルデフォルトより優先されます。<emphasis></emphasis>また、リソースに対して定義された特定の値は、リソーステンプレートで定義された値より優先されます。
    </para>
   </note>
   <para>
    タイムアウト値を適切に設定することは非常に重要です。これらの値を短くしすぎると、次のような理由で、多数の(不必要な)フェンシング処理が発生します。
   </para>
   <orderedlist spacing="normal">
    <listitem>
     <para>
      リソースでタイムアウトが発生すると、リソースは失敗し、クラスタはリソースを停止しようとします。
     </para>
    </listitem>
    <listitem>
     <para>
      リソースの停止も失敗した場合(たとえば、停止用タイムアウトの設定が低すぎるため)、クラスタはノードをフェンシングします。これが制御不能になるノードを考慮します。
     </para>
    </listitem>
   </orderedlist>
   <para>
    操作に対するグローバルデフォルトを調整し、crmshおよびHawk2の両方で特定のタイムアウト値を設定できます。タイムアウト値の決定および設定のベストプラクティスは次のとおりです。
   </para>
   <procedure>
    <title>タイムアウト値の決定</title>
    <step>
     <para>
      負荷の下でリソースが開始および停止するためにかかる時間を確認します。
     </para>
    </step>
    <step>
     <para>
      必要な場合、パラメータ<varname>op_defaults</varname>を追加し、それに応じて(デフォルトの)タイムアウト値を設定します。
     </para>
     <substeps performance="required">
      <step>
       <para>
        たとえば、<literal>op_defaults</literal>を<literal>60</literal>秒に設定します。
       </para>
 <screen><prompt role="custom">crm(live)configure# </prompt><command>op_defaults timeout=60</command></screen>
      </step>
      <step>
       <para>
        さらに長い時間を必要とするリソースについては、個別の値を定義します。
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      あるリソースに対して操作を設定する場合には、個別の<literal>start</literal>操作および<literal>stop</literal>操作を追加します。Hawk2を使用して設定する場合、これらの操作に適したタイムアウト値候補が表示されます。
     </para>
    </step>
   </procedure>
  </sect1>

  <sect1 xml:id="sec-ha-config-basics-resources-management">
   <title>プリミティブリソースの作成</title>
   <para>
    リソースは、クラスタで使用する前にセットアップする必要があります。たとえば、Apacheサーバをクラスタリソースとして使用するには、まず、Apacheサーバをセットアップし、Apacheの環境設定を完了してから、クラスタで個々のリソースを起動します。
   </para>
   <para>
    リソースに特定の環境要件がある場合は、それらの要件がすべてのクラスタノードに存在し、同一であることを確認してください。SUSE Linux Enterprise High Availabilityはこの種の設定は管理しません。これは、管理者自身が行う必要があります。
   </para>
   <para>
    Hawk2またはcrmshのいずれかを使用してプリミティブリソースを作成できます。
   </para>
   <note>
    <title>クラスタによって管理されるサービスには介入しないでください</title>
    <para>
     SUSE Linux Enterprise High Availabilityでリソースを管理しているときに、同じリソースを他の方法(クラスタ外で、たとえば、手動、ブート、再起動など)で開始したり、停止してはいけません。High Availabilityソフトウェアが、すべてのサービスの開始または停止アクションを実行します。
    </para>
    <para>
     サービスがクラスタ制御下ですでに実行された後にテストまたは保守タスクを実行する必要がある場合は、リソース、ノード、またはクラスタ全体を保守モードに設定してから、これらのいずれかに手動でタッチしてください。詳細については、<xref linkend="sec-ha-maint-overview"/>を参照してください。
    </para>
   </note>
   <important>
    <title>リソースIDとノード名</title>
    <para>クラスタリソースとクラスタノードは異なる名前にする必要があります。同じ名前にするとHawk2で障害が発生します。</para>
   </important>

   <sect2 xml:id="sec-conf-hawk2-rsc-primitive">
    <title>Hawk2を使用したプリミティブリソースの作成</title>
    <para>
     最も基本的なタイプのリソースを作成するには、次の手順に従います。
    </para>
    <procedure xml:id="pro-conf-hawk2-primitive-add">
     <title>Hawk2を使用したプリミティブリソースの追加</title>
     <step>
      <para>
       Hawk2にログインします。
      </para>
  <screen>https://<replaceable>HAWKSERVER</replaceable>:7630/</screen>
     </step>
     <step>
      <para>
       左のナビゲーションバーから、<menuchoice>
       <guimenu>環境設定</guimenu> <guimenu> Add Resource (リソースの追加)</guimenu> <guimenu>プリミティブ</guimenu> </menuchoice>の順に選択します。
      </para>
     </step>
     <step>
      <para>
       固有の<guimenu>リソースID</guimenu>を入力します。
      </para>
     </step>
     <step>
      <para>
       リソース設定の基にするリソーステンプレートが存在する場合は、<guimenu>テンプレート</guimenu>で目的のテンプレートを選択します。
      </para>
     </step>
     <step xml:id="step-ha-config-hawk2-primitive-start">
      <para>
       <guimenu>クラス</guimenu>で、使用するリソースエージェントのクラスを選択します。<literal>lsb</literal>、<literal>ocf</literal>、<literal>service</literal>、<literal>stonith</literal>、または<literal>systemd</literal>から選択できます。詳細については、<xref linkend="sec-ha-config-basics-raclasses"/>を参照してください。
      </para>
     </step>
     <step>
      <para>
       <literal>ocf</literal>をクラスとして選択した場合、OCFリソースエージェントの<guimenu>プロバイダ</guimenu>を指定します。OCFの指定によって、複数のベンダが同じリソースエージェントを提供できるようになります。
      </para>
     </step>
     <step>
      <para>
       <guimenu>タイプ</guimenu>リストから、使用するリソースエージェントを選択します(たとえば<guimenu>IPaddr</guimenu>または<guimenu>Filesystem</guimenu>)。このリソースエージェントの簡単な説明が表示されます。
      </para>
      <note>
       <para>
        <guimenu>タイプ</guimenu>リストに表示される選択肢は、選択した<guimenu>クラス</guimenu>(OCFリソースの場合は、<guimenu>プロバイダ</guimenu>も)によって異なります。
       </para>
      </note>
      <figure>
       <title>Hawk2 - プリミティブリソース</title>
       <mediaobject>
        <imageobject role="fo">
         <imagedata fileref="hawk2-primitive-basic.png" width="100%"/>
        </imageobject>
        <imageobject role="html">
         <imagedata fileref="hawk2-primitive-basic.png" width="100%"/>
        </imageobject>
       </mediaobject>
      </figure>
     </step>
     <step>
      <para>
       リソースの基本を指定すると、Hawk2には次のカテゴリが表示されます。Hawk2の提案に従ってこれらのカテゴリを保持するか、必要に応じて編集します。
      </para>
      <variablelist>
       <varlistentry>
        <term>パラメータ(インスタンス属性)</term>
        <listitem>
         <para>
          リソースが制御するサービスのインスタンスを決定します。リソースを作成する際、Hawk2は必要なパラメータを自動的に表示します。これらを編集して、有効なリソースの設定を取得します。
         </para>
         <para>
          詳細については、<xref linkend="sec-ha-config-basics-inst-attr"/>を参照してください。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>操作</term>
        <listitem>
         <para>
          リソース監視に必要です。リソースを作成する際、Hawk2は、最も重要なリソース操作(<literal>monitor</literal>、<literal>start</literal>および<literal>stop</literal>)を表示します。
         </para>
         <para>
          詳細については、<xref linkend="sec-ha-config-basics-operations"/>を参照してください。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>メタ属性</term>
        <listitem>
         <para>
          特定のリソースの処理方法をCRMに指示します。リソースを作成する際、Hawk2はそのリソースの重要なメタ属性を自動的にリストにします(たとえばリソースの初期状態を定義する<literal>target-role</literal>属性です。デフォルトでは<literal>Stopped</literal>に設定されているため、リソースはすぐには始動しません)。
         </para>
         <para>
          詳細については、<xref linkend="sec-ha-config-basics-meta-attr"/>を参照してください。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>使用率</term>
        <listitem>
         <para>
          特定のリソースがノードから要求する容量をCRMに指示します。
         </para>
         <para>
          詳細については、<xref linkend="sec-config-hawk2-utilization"/>を参照してください。
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </step>
     <step>
      <para>
       <guimenu>作成</guimenu>をクリックして、設定を完了します。画面上部に、アクションが成功したかどうかを示すメッセージが表示されます。
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="sec-ha-manual-config-create">
    <title>crmshを使用したプリミティブリソースの作成</title>
    <procedure xml:id="pro-ha-manual-config-create">
     <title>crmshを使用したプリミティブリソースの追加</title>
     <step>
      <para>
       <systemitem class="username">root</systemitem>としてログインし、<command>crm</command>ツールを開始します。
      </para>
  <screen><prompt role="root"># </prompt><command>crm configure</command></screen>
     </step>
     <step>
      <para>
       プリミティブIPアドレスを設定します。
      </para>
  <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive myIP IPaddr \
      params ip=127.0.0.99 op monitor interval=60s</command></screen>
      <para>
       前のコマンドは<quote>プリミティブ</quote>に名前<literal>myIP</literal>を設定します。クラス(ここでは<literal>ocf</literal>)、プロバイダ(<literal>heartbeat</literal>)、およびタイプ(<literal>IPaddr</literal>)を選択する必要がありますさらに、このプリミティブでは、IPアドレスなどのパラメータが必要です。自分の設定に合わせてアドレスを変更してください。
      </para>
     </step>
     <step>
      <para>
       行った変更を表示して確認します。
      </para>
  <screen><prompt role="custom">crm(live)configure# </prompt><command>show</command></screen>
     </step>
     <step>
      <para>
       変更をコミットして反映させます。
      </para>
  <screen><prompt role="custom">crm(live)configure# </prompt><command>commit</command></screen>
     </step>
    </procedure>
   </sect2>
  </sect1>

  <sect1 xml:id="sec-ha-config-basics-resources-advanced-groups">
   <title>リソースグループの作成</title>
   <para>
    クラスタリソースの中には、他のコンポーネントやリソースに依存しているものもあります。それぞれのコンポーネントやリソースが決められた順序で開始され、依存しているリソースと同じサーバ上で同時に実行していなければならない場合があります。この設定を簡素化するには、クラスタリソースグループを使用できます。
   </para>
   <para>
    Hawk2またはcrmshのいずれかを使用してリソースグループを作成できます。
   </para>
   <example xml:id="ex-ha-config-resource-group">
    <title>Webサーバのリソースグループ</title>
    <para>
     リソースグループの一例として、IPアドレスとファイルシステムを必要とするWebサーバがあります。この場合、各コンポーネントは、個々のリソースであり、それらが組み合わされてクラスタリソースグループを構成します。リソースグループは、1つ以上のサーバで実行されます。ソフトウェアまたはハードウェアが機能しない場合には、個々のクラスタリソースと同様に、グループはクラスタ内の別のサーバにフェールオーバーします。
    </para>
   </example>
   <figure pgwide="0">
    <title>グループリソース</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="webserver_groupresource_a.svg" width="70%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="webserver_groupresource_a.svg" width="63%"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    グループには次のプロパティがあります。
   </para>
   <variablelist>
    <varlistentry>
     <term>開始と停止</term>
     <listitem>
      <para>
       リソースは認識される順序で開始し、逆の順番で停止します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>依存関係</term>
     <listitem>
      <para>
       グループ内のリソースがどこかで開始できない場合は、グループ内のその後の全リソースは実行することができません。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>目次</term>
     <listitem>
      <para>
       グループにはプリミティブクラスタリソースしか含むことができません。グループには1つ以上のリソースを含む必要があります。空の場合は設定は無効になります。グループリソースの子を参照するには、グループのIDではなく子のIDを使用します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>制約</term>
     <listitem>
      <para>
       制約でグループの子を参照することはできますが、通常はグループ名を使用することをお勧めします。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>固着性</term>
     <listitem>
      <para>
       固着性はグループ内で統合可能なプロパティです。グループ内の「アクティブな」各メンバーは、グループの合計値に対して固着性を追加します。<emphasis></emphasis>したがって、デフォルトの<literal>resource-stickiness</literal>が<literal>100</literal>で、グループに7つのメンバーがあり、そのうち5つがアクティブな場合は、グループが全体として、スコア<literal>500</literal>で、現在の場所を優先します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>リソース監視</term>
     <listitem>
      <para>
       グループのリソース監視を有効にするには、グループ内で監視の必要な各リソースに対して監視を設定する必要があります。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <sect2 xml:id="sec-conf-hawk2-rsc-group">
    <title>Hawk2を使用したリソースグループの作成</title>
    <note>
     <title>空のグループ</title>
     <para>
      グループには1つ以上のリソースを含む必要があります。空の場合は設定は無効になります。グループの作成中に、Hawk2ではさらにプリミティブを作成し、それらをグループに追加できます。
     </para>
    </note>
    <procedure xml:id="pro-conf-hawk2-group">
     <title>Hawk2を使用したリソースグループの追加</title>
     <step>
      <para>
       Hawk2にログインします。
      </para>
  <screen>https://<replaceable>HAWKSERVER</replaceable>:7630/</screen>
     </step>
     <step>
      <para>
       左のナビゲーションバーから、<menuchoice>
       <guimenu>環境設定</guimenu> <guimenu> Add Resource (リソースの追加)</guimenu>
       <guimenu>グループ</guimenu> </menuchoice>の順に選択します。
      </para>
     </step>
     <step>
      <para>
       固有の<guimenu>グループID</guimenu>を入力します。
      </para>
     </step>
     <step>
      <para>
       グループメンバーを定義するには、<guimenu>子</guimenu>リストで1つまたは複数のエントリを選択します。グループメンバーを再ソートするには、右側の<quote>ハンドル</quote>アイコンを使用して、メンバーを目的の順序にドラッグアンドドロップします。
      </para>
     </step>
     <step>
      <para>
       必要に応じて、<guimenu>メタ属性</guimenu>を変更または追加します。
      </para>
     </step>
     <step>
      <para>
       <guimenu>作成</guimenu>をクリックして、設定を完了します。画面上部に、アクションが成功したかどうかを示すメッセージが表示されます。
      </para>
     </step>
    </procedure>
    <figure>
     <title>Hawk2 - リソースグループ</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="hawk2-rsc-group.png" width="100%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="hawk2-rsc-group.png" width="100%"/>
      </imageobject>
     </mediaobject>
    </figure>
   </sect2>

   <sect2 xml:id="sec-ha-manual-config-group">
    <title>crmshを使用したリソースグループの作成</title>
    <para>
     次の例では、2つのプリミティブ(IPアドレスと電子メールリソース)を作成します。
    </para>
    <procedure>
     <title>crmshを使用したリソースグループの追加</title>
     <step>
      <para>
       <command>crm</command>コマンドをシステム管理者として実行します。プロンプトが<literal>crm(live)</literal>に変化します。
      </para>
     </step>
     <step>
      <para>
       プリミティブを設定します。
      </para>
<screen><prompt role="custom">crm(live)# </prompt><command>configure</command>
<prompt role="custom">crm(live)configure# </prompt><command>primitive Public-IP ocf:heartbeat:IPaddr2 \
    params ip=1.2.3.4 \
    op monitor interval=10s</command>
<prompt role="custom">crm(live)configure# </prompt><command>primitive Email systemd:postfix \
    op monitor interval=10s</command></screen>
     </step>
     <step>
      <para>
       該当するIDを使用して、正しい順序で、プリミティブをグループ化します。
      </para>
  <screen><prompt role="custom">crm(live)configure# </prompt><command>group g-mailsvc Public-IP Email</command></screen>
     </step>
    </procedure>
   </sect2>
 </sect1>

  <sect1 xml:id="sec-ha-config-basics-resources-advanced-clones">
   <title>クローンリソースの作成</title>
   <para>
    クラスタ内の複数のノードで特定のリソースを同時に実行することができます。このためには、リソースをクローンとして設定する必要があります。クローンとして設定するリソースの一例として、OCFS2などのクラスタファイルシステムが挙げられます。提供されているどのリソースも、クローンとして設定できます。これは、リソースのリソースエージェントによってサポートされます。クローンリソースは、ホスティングされているノードによって異なる設定をすることもできます。
   </para>
   <para>
    リソースクローンには次の3つのタイプがあります。
   </para>
   <variablelist>
    <varlistentry>
     <term>匿名クローン</term>
     <listitem>
      <para>
       最も簡単なクローンタイプです。実行場所にかかわらず、同じ動作をします。このため、マシンごとにアクティブな匿名クローンのインスタンスは1つだけ存在できます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>グローバルに固有なクローン</term>
     <listitem>
      <para>
       このリソースは独自のエントリです。1つのノードで実行しているクローンのインスタンスは、別なノードの別なインスタンスとは異なり、同じノードの2つのインスタンスが同一になることもありません。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>プロモータブルクローン(マルチステートリソース)</term>
     <listitem>
      <para>
       このリソースのアクティブインスタンスは、アクティブとパッシブという2つの状態に分けられます。これらはプライマリとセカンダリと呼ばれる場合もあります。プロモータブルクローンが、匿名またはグローバルに固有の場合もあります。詳細については、<xref linkend="sec-ha-config-basics-resources-promotable-clones"/>を参照してください。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    クローンは、グループまたは通常リソースを1つだけ含む必要があります。
   </para>
   <para>
    リソースのモニタリングまたは制約を設定する場合、クローンには、単純なリソースとは異なる要件があります。詳細については、『<citetitle>Pacemaker Explained</citetitle>』(<link xlink:href="https://www.clusterlabs.org/pacemaker/doc/"/>から入手可)を参照してください。
   </para>
   <para>
    Hawk2またはcrmshのいずれかを使用してクローンリソースを作成できます。
   </para>

   <sect2 xml:id="sec-conf-hawk2-rsc-clone">
    <title>Hawk2を使用したクローンリソースの作成</title>
    <note>
     <title>クローンの子リソース</title>
     <para>
      クローンには、プリミティブまたはグループのいずれかを子リソースとして含めることができます。Hawk2では、クローンの作成中に子リソースを作成したり変更したりすることはできません。クローンを追加する前に、子リソースを作成し、必要に応じて設定しておいてください。
     </para>
    </note>
    <procedure xml:id="pro-conf-hawk2-clone">
     <title>Hawk2を使用したクローンリソースの追加</title>
     <step>
      <para>
       Hawk2にログインします。
      </para>
  <screen>https://<replaceable>HAWKSERVER</replaceable>:7630/</screen>
     </step>
     <step>
      <para>
       左のナビゲーションバーから、<menuchoice> <guimenu>環境設定</guimenu>
      <guimenu> Add Resource (リソースの追加)</guimenu> <guimenu>クローン</guimenu> </menuchoice>の順に選択します。
      </para>
     </step>
     <step>
      <para>
       固有の<guimenu>クローンID</guimenu>を入力します。
      </para>
     </step>
     <step>
      <para>
       <guimenu>子リソース</guimenu>リストから、クローンのサブリソースとして使用するプリミティブまたはグループを選択します。
      </para>
     </step>
     <step>
      <para>
       必要に応じて、<guimenu>メタ属性</guimenu>を変更または追加します。
      </para>
     </step>
     <step>
      <para>
       <guimenu>作成</guimenu>をクリックして、設定を完了します。画面上部に、アクションが成功したかどうかを示すメッセージが表示されます。
      </para>
     </step>
    </procedure>
    <figure>
     <title>Hawk2 - クローンリソース</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="hawk2-clone.png" width="100%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="hawk2-clone.png" width="100%"/>
      </imageobject>
     </mediaobject>
    </figure>
   </sect2>

   <sect2 xml:id="sec-ha-manual-config-clone">
    <title>crmshを使用したクローンリソースの作成</title>
     <para>
      匿名クローンリソースを作成するには、まずプリミティブリソースを作成して、それを<command>clone</command>コマンドで指定します。
     </para>
     <procedure>
      <title>crmshを使用したクローンリソースの追加</title>
      <step>
       <para>
        <systemitem class="username">root</systemitem>としてログインし、<command>crm</command>対話型シェルを開始します。
       </para>
  <screen><prompt role="root"># </prompt><command>crm configure</command></screen>
      </step>
      <step>
       <para>
        次のように、プリミティブを設定します。
       </para>
  <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive Apache apache</command></screen>
      </step>
      <step>
       <para>
        プリミティブをクローンします。
       </para>
  <screen><prompt role="custom">crm(live)configure# </prompt><command>clone cl-apache Apache</command></screen>
      </step>
     </procedure>
    </sect2>
  </sect1>

  <sect1 xml:id="sec-ha-config-basics-resources-promotable-clones">
   <title>プロモータブルクローン(マルチステートリソース)の作成</title>
   <para>
    プロモータブルクローン(以前はマルチステートリソースと呼ばれていました)は、クローンが得意とするところです。これにより、インスタンスを2つの動作モード(プライマリまたはセカンダリ)のいずれかに設定できます。プロモータブルクローンは、グループまたは通常リソースを1つだけ含む必要があります。
   </para>
   <para>
    リソースのモニタリングまたは制約を設定する場合、プロモータブルクローンには、単純なリソースとは異なる要件があります。詳細については、『<citetitle>Pacemaker Explained</citetitle>』(<link xlink:href="https://www.clusterlabs.org/pacemaker/doc/"/>から入手可)を参照してください。
   </para>
   <para>
    Hawk2またはcrmshのいずれかを使用してプロモータブルクローンを作成できます。
   </para>

   <sect2 xml:id="sec-conf-hawk2-rsc-ms">
    <title>Hawk2を使用したプロモータブルクローンの作成</title>

    <note>
     <title>プロモータブルクローンの子リソース</title>
     <para>
      プロモータブルクローンには、プリミティブまたはグループのいずれかを子リソースとして含めることができます。Hawk2では、プロモータブルクローンの作成中に子リソースを作成したり変更したりすることはできません。プロモータブルクローンを追加する前に、子リソースを作成し、必要に応じて設定します。<xref linkend="sec-conf-hawk2-rsc-primitive"/>または<xref linkend="sec-conf-hawk2-rsc-group"/>を参照してください。
     </para>
    </note>
    <procedure xml:id="pro-conf-hawk2-ms">
     <title>Hawk2を使用したプロモータブルクローンの追加</title>
     <step>
      <para>
       Hawk2にログインします。
      </para>
  <screen>https://<replaceable>HAWKSERVER</replaceable>:7630/</screen>
     </step>
     <step>
      <para>
       左のナビゲーションバーから、<menuchoice>
       <guimenu>環境設定</guimenu>  <guimenu> Add Resource (リソースの追加)</guimenu>
       <guimenu>マルチステート</guimenu> </menuchoice>の順に選択します。
      </para>
     </step>
     <step>
      <para>
       <guimenu>マルチステートID</guimenu>に固有のIDを入力します。
      </para>
     </step>
     <step>
      <para>
       <guimenu>子リソース</guimenu>リストから、マルチステートリソースのサブリソースとして使用するプリミティブまたはグループを選択します。
      </para>
     </step>
     <step>
      <para>
       必要に応じて、<guimenu>メタ属性</guimenu>を変更または追加します。
      </para>
     </step>
     <step>
      <para>
       <guimenu>作成</guimenu>をクリックして、設定を完了します。画面上部に、アクションが成功したかどうかを示すメッセージが表示されます。
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="sec-ha-manual-config-clone-stateful">
    <title>crmshを使用したプロモータブルクローンの作成</title>
    <para>
     プロモータブルクローンリソースを作成するには、まずプリミティブリソースを作成してから、プロモータブルクローンリソースを作成します。プロモータブルクローンリソースは少なくとも、昇格および降格操作をサポートしている必要があります。
    </para>
    <procedure>
     <title>crmshを使用したプロモータブルクローンの追加</title>
     <step>
      <para>
       <systemitem class="username">root</systemitem>としてログインし、<command>crm</command>対話型シェルを開始します。
      </para>
 <screen><prompt role="root"># </prompt><command>crm configure</command></screen>
     </step>
     <step>
      <para>
       プリミティブを作成します。必要に応じて間隔を変更します。
      </para>
 <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive my-rsc ocf:myCorp:myAppl \
    op monitor interval=60 \
    op monitor interval=61 role=Promoted</command></screen>
     </step>
     <step>
      <para>
       プロモータブルクローンリソースを作成します。
      </para>
 <screen><prompt role="custom">crm(live)configure# </prompt><command>clone clone-rsc my-rsc meta promotable=true</command></screen>
     </step>
    </procedure>
   </sect2>
  </sect1>

 <sect1 xml:id="sec-ha-config-basics-resources-templates">
   <title>リソーステンプレートの作成</title>
   <para>
    類似した設定のリソースを多く作成する最も簡単な方法は、リソーステンプレートを定義することです。定義されたテンプレートは、プリミティブ内で参照したり、<xref linkend="sec-ha-config-basics-constraints-templates"/>で説明するように、特定のタイプの制約内で参照することができます。
   </para>
   <para>
    プリミティブ内でテンプレートを参照すると、そのテンプレートで定義されている操作、インスタンス属性(パラメータ)、メタ属性、使用属性がすべてプリミティブに継承されます。さらに、プリミティブに対して特定の操作または属性を定義することもできます。これらのいずれかがテンプレートとプリミティブの両方で定義されていた場合、プリミティブで定義した値の方が、テンプレートで定義された値よりも優先されます。
   </para>
   <para>
    Hawk2またはcrmshのいずれかを使用してリソーステンプレートを作成できます。
   </para>

  <sect2 xml:id="sec-conf-hawk2-rsc-template">
   <title>Hawk2を使用したリソーステンプレートの作成</title>
    <para>
     リソーステンプレートは、プリミティブリソースと同様の方法で設定します。
    </para>
   <procedure xml:id="pro-conf-hawk2-template-add">
    <title>リソーステンプレートの追加</title>
    <step>
     <para>
      Hawk2にログインします。
     </para>
 <screen>https://<replaceable>HAWKSERVER</replaceable>:7630/</screen>
    </step>
    <step>
     <para>
      左のナビゲーションバーから、<menuchoice> <guimenu>環境設定</guimenu>
      <guimenu> Add Resource (リソースの追加)</guimenu> <guimenu>テンプレート</guimenu> </menuchoice>の順に選択します。
     </para>
    </step>
    <step>
     <para>
      固有の<guimenu>リソースID</guimenu>を入力します。
     </para>
    </step>
    <step>
     <para>
      <xref linkend="pro-conf-hawk2-primitive-add"/>の<xref linkend="step-ha-config-hawk2-primitive-start" xrefstyle="select:label"/>以降の手順に従います。
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-rsc-template">
   <title>crmshを使用したリソーステンプレートの作成</title>
   <para>
    次の構文を知るには、<command>rsc_template</command>コマンドを使用してください。
   </para>
 <screen><prompt role="root"># </prompt><command>crm configure rsc_template</command>
 usage: rsc_template &lt;name&gt; [&lt;class&gt;:[&lt;provider&gt;:]]&lt;type&gt;
        [params &lt;param&gt;=&lt;value&gt; [&lt;param&gt;=&lt;value&gt;...]]
        [meta &lt;attribute&gt;=&lt;value&gt; [&lt;attribute&gt;=&lt;value&gt;...]]
        [utilization &lt;attribute&gt;=&lt;value&gt; [&lt;attribute&gt;=&lt;value&gt;...]]
        [operations id_spec
            [op op_type [&lt;attribute&gt;=&lt;value&gt;...] ...]]</screen>
   <para>
    たとえば、次のコマンドは、<literal>ocf:heartbeat:Xen</literal>リソースと、デフォルト値および操作に由来する<literal>BigVM</literal>の名前を持つ新しいリソーステンプレートを作成します。
   </para>
 <screen><prompt role="custom">crm(live)configure# </prompt><command>rsc_template BigVM ocf:heartbeat:Xen \
   params allow_mem_management="true" \
   op monitor timeout=60s interval=15s \
   op stop timeout=10m \
   op start timeout=10m</command></screen>
   <para>
    新しいリソーステンプレートを定義したら、それをプリミティブとして使用すること、または順序、コロケーション、またはrsc_ticketの制約で参照することができます。リソーステンプレートを参照するには、<literal>@</literal>記号を使用します。
   </para>
 <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive MyVM1 @BigVM \
   params xmfile="/etc/xen/shared-vm/MyVM1" name="MyVM1"</command></screen>
   <para>
    新しいプリミティブMy-VM1は、BigVMリソーステンプレートからすべてを継承します。たとえば、上の2つに等しいものは次のようになります。
   </para>
 <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive MyVM1 Xen \
   params xmfile="/etc/xen/shared-vm/MyVM1" name="MyVM1" \
   params allow_mem_management="true" \
   op monitor timeout=60s interval=15s \
   op stop timeout=10m \
   op start timeout=10m</command></screen>
   <para>
    オプションや操作を上書きしたい場合は、自分の(プリミティブの)定義を追加します。たとえば、次の新しいプリミティブMyVM2は監視操作のタイムアウトを2倍にしますが、その他はそのままに残します。
   </para>
 <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive MyVM2 @BigVM \
   params xmfile="/etc/xen/shared-vm/MyVM2" name="MyVM2" \
   op monitor timeout=120s interval=30s</command></screen>
   <para>
    リソーステンプレートは、そのテンプレートから派生するすべてのプリミティブを表すものとして、制約で参照することができます。これにより、クラスタ設定をいっそう簡潔かつクリアに行うことができます。リソーステンプレートは、場所の制約を除くすべての制約から参照することができます。コロケーション制約には、複数のテンプレート参照を含めることはできません。
   </para>
  </sect2>
 </sect1>

<sect1 xml:id="sec-ha-conf-stonith-rsc">
 <title>STONITHリソースの作成</title>
    <important>
      <title>STONITHがない場合はサポートなし</title>
      <itemizedlist>
       <listitem>
        <para>クラスタにはノードフェンシングメカニズムが必要です。</para>
       </listitem>
       <listitem>
        <para>グローバルクラスタオプション<systemitem>stonith-enabled</systemitem>および<systemitem>startup-fencing</systemitem>は<literal>true</literal>に設定する必要があります。これらを変更するとサポートされなくなります。</para>
       </listitem>
      </itemizedlist>
      </important>
  <para>
   デフォルトでは、グローバルクラスタオプションの<literal>stonith-enabled</literal>は<literal>true</literal>に設定されています。STONITHリソースが定義されていない場合、クラスタはどのリソースも開始することを拒否します。STONITHリソースが定義されていない場合、クラスタはどのリソースを開始することも拒否します。1つ以上のSTONITHリソースを設定して、STONITHのセットアップを完了します。STONITHリソースは他のリソースと同様に設定しますが、その動作はいくつかの点で異なっています。詳細については、<xref linkend="sec-ha-fencing-config"/>を参照してください。
  </para>
  <para>
   Hawk2またはcrmshのいずれかを使用してSTONITHリソースを作成できます。
  </para>
 <sect2 xml:id="sec-conf-hawk2-rsc-stonith">
  <title>Hawk2を使用したSTONITHリソースの作成</title>
  <para>
   SBD、libvirt (KVM/Xen)、またはvCenter/ESX ServerのSTONITHリソースを追加する場合、Hawk2ウィザードを使用するのが最も簡単な方法です。
  </para>
  <procedure xml:id="pro-conf-hawk2-stonith">
   <title>Hawk2を使用したSTONITHリソースの追加</title>
   <step>
    <para>
     Hawk2にログインします。
    </para>
<screen>https://<replaceable>HAWKSERVER</replaceable>:7630/</screen>
   </step>
   <step>
    <para>
     左のナビゲーションバーから、<menuchoice>
     <guimenu>環境設定</guimenu> <guimenu> Add Resource (リソースの追加)</guimenu> <guimenu>プリミティブ</guimenu> </menuchoice>の順に選択します。
    </para>
   </step>
   <step>
    <para>
     固有の<guimenu>リソースID</guimenu>を入力します。
    </para>
   </step>
   <step>
    <para>
     <guimenu>クラス</guimenu>リストで、リソースエージェントクラスとして<guimenu>stonith</guimenu>を選択します。
    </para>
   </step>
   <step>
    <para>
     <guimenu>タイプ</guimenu>リストから、使用しているSTONITHデバイスを制御するためのSTONITHプラグインを選択します。このプラグインの簡単な説明が下に表示されます。
    </para>
   </step>
   <step>
    <para>
     Hawk2は、自動的にそのリソースに必要な<guimenu>パラメータ</guimenu>を表示します。それぞれのパラメータの値を入力します。
    </para>
   </step>
   <step>
    <para>
     Hawk2は、重要なリソース<guimenu>操作</guimenu>を表示し、デフォルト値を提案します。設定を変更しない場合、確定するとすぐに、Hawk2は提案した操作およびデフォルト値を追加します。
    </para>
   </step>
   <step>
    <para>
     変更理由がない場合は、デフォルトの<guimenu>メタ属性</guimenu>設定を保持します。
    </para>
    <figure>
     <title>Hawk2 - STONITHリソース</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="hawk2-primitive-stonith.png" width="100%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="hawk2-primitive-stonith.png" width="100%"/>
      </imageobject>
     </mediaobject>
    </figure>
   </step>
   <step>
    <para>
     変更を確認して、STONITHリソースを作成します。
    </para>
    <para>
     画面上部に、アクションが成功したかどうかを示すメッセージが表示されます。
    </para>
   </step>
  </procedure>
  <para>
   フェンシングを設定するには、制約を追加します。詳細については、<xref linkend="cha-ha-fencing"/>を参照してください。
  </para>
 </sect2>

 <sect2 xml:id="sec-ha-manual-create-stonith">
  <title>crmshを使用したSTONITHリソースの作成</title>
  <procedure>
   <title>crmshを使用したSTONITHリソースの追加</title>
   <step>
    <para>
     <systemitem class="username">root</systemitem>としてログインし、<command>crm</command>対話型シェルを開始します。
    </para>
<screen><prompt role="root"># </prompt><command>crm</command></screen>
   </step>
   <step>
    <para>
     次のコマンドで、すべてのSTONITHタイプのリストを取得します。
    </para>
<screen><prompt role="custom">crm(live)# </prompt><command>ra list stonith</command>
apcmaster                  apcmastersnmp              apcsmart
baytech                    bladehpi                   cyclades
drac3                      external/drac5             external/dracmc-telnet
external/hetzner           external/hmchttp           external/ibmrsa
external/ibmrsa-telnet     external/ipmi              external/ippower9258
external/kdumpcheck        external/libvirt           external/nut
external/rackpdu           external/riloe             external/sbd
external/vcenter           external/vmware            external/xen0
external/xen0-ha           fence_legacy               ibmhmc
ipmilan                    meatware                   nw_rpc100s
rcd_serial                 rps10                      suicide
wti_mpc                    wti_nps</screen>
   </step>
   <step xml:id="st-ha-manual-create-stonith-type">
    <para>
     上記のリストからSTONITHタイプを選択し、利用できるオプションのリストを表示します。次のコマンドを実行します。
    </para>
<screen><prompt role="custom">crm(live)# </prompt><command>ra info stonith:external/ipmi</command>
IPMI STONITH external device (stonith:external/ipmi)

ipmitool based power management. Apparently, the power off
method of ipmitool is intercepted by ACPI which then makes
a regular shutdown. In case of a split brain on a two-node,
it may happen that no node survives. For two-node clusters,
use only the reset method.

Parameters (* denotes required, [] the default):

hostname (string): Hostname
   The name of the host to be managed by this STONITH device.
...</screen>
   </step>
   <step>
    <para>
     <literal>stonith</literal>クラス、<xref linkend="st-ha-manual-create-stonith-type" xrefstyle="select:label nopage"/>で選択したタイプ、および必要に応じて該当するパラメータを使用して、STONITHリソースを作成します。たとえば、次のようにします。
    </para>
<screen><prompt role="custom">crm(live)# </prompt><command>configure</command>
<prompt role="custom">crm(live)configure# </prompt><command>primitive my-stonith stonith:external/ipmi \
   params hostname="alice" \
   ipaddr="192.168.1.221" \
   userid="admin" passwd="secret" \
   op monitor interval=60m timeout=120s</command></screen>
   </step>
  </procedure>
 </sect2>
</sect1>

 <sect1 xml:id="sec-ha-config-basics-monitoring">
  <title>リソース監視の設定</title>
  <para>
   リソースが実行中であるかどうか確認するには、そのリソースにリソースの監視を設定しておく必要があります。Hawk2またはcrmshのいずれかを使用してリソース監視を設定できます。
  </para>
  <para>
   リソースモニタが障害を検出すると、次の処理が行われます。
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <filename>/etc/corosync/corosync.conf</filename>の<literal>logging</literal>セクションで指定された設定に従って、ログファイルメッセージが生成されます。
    </para>
   </listitem>
   <listitem>
    <para>
     障害がクラスタ管理ツール(Hawk2、<command>crm status</command>)と、CIBステータスセクションに反映されます。
    </para>
   </listitem>
   <listitem>
    <para>
     クラスタが明瞭な復旧アクションを開始します。これらのアクションには、リソースを停止して障害状態を修復する、ローカルまたは別のノードでリソースを再起動するなどが含まれる場合があります。設定やクラスタの状態によっては、リソースが再起動されないこともあります。
    </para>
   </listitem>
  </itemizedlist>
  <para>
   リソースの監視を設定しなかった場合、開始成功後のリソース障害は通知されず、クラスタは常にリソース状態を良好として表示してしまいます。
  </para>
   <para>
    通常、リソースは動作中にのみ、クラスタによって監視されます。しかし、同時実行違反を検出するために、停止されるリソースの監視も設定する必要があります。リソースを監視するには、タイムアウト、開始遅延のいずれか、または両方と、間隔を指定します。間隔の指定によって、CRMにリソースステータスの確認頻度を指示します。<literal>timeout</literal>または<literal>start</literal>操作に対する<literal>stop</literal>など、特定のパラメータも設定できます。
   </para>
   <para>
    監視操作パラメータの詳細については、<xref linkend="sec-ha-config-basics-operations"/>を参照してください。
   </para>

  <sect2 xml:id="sec-conf-hawk2-rsc-monitor">
   <title>Hawk2を使用したリソース監視の設定</title>
   <procedure xml:id="pro-hawk2-operations">
    <title>操作の追加または変更</title>
    <step>
     <para>
      Hawk2にログインします。
     </para>
 <screen>https://<replaceable>HAWKSERVER</replaceable>:7630/</screen>
    </step>
    <step>
     <para>
      <xref linkend="pro-conf-hawk2-primitive-add"/>の説明に従ってリソースを追加するか、既存のプリミティブを選択して編集します。
     </para>
     <para>
      Hawk2は、最も重要な<guimenu>操作</guimenu>(<literal>start</literal>、<literal>stop</literal>、<literal>monitor</literal>)を自動的に表示し、デフォルト値を提案します。
     </para>
     <para>
      提案された各値に属する属性を参照するには、マウスポインタをそれぞれの値に合わせます。
     </para>
     <figure>
      <title>操作値</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="hawk2-monitor-op.png" width="70%"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="hawk2-monitor-op.png" width="60%"/>
       </imageobject>
       <textobject role="description">
         <phrase><literal>Operations</literal>リストの<literal>monitor</literal>操作の横で、マウスポインタを数値<literal>20</literal>に合わせると、これが<literal>timeout</literal>属性の値であることが示されます。</phrase>
       </textobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para>
      <literal>timeout</literal>または<literal>start</literal>操作に対して提案された<literal>stop</literal>の値を変更するには、次の手順に従います。
     </para>
     <substeps>
      <step>
       <para>
        操作の隣のペンアイコンをクリックします。
       </para>
      </step>
      <step>
       <para>
        表示されるダイアログで、<literal>timeout</literal>パラメータに別の値(例: <literal>10</literal>)を入力し、変更内容を確認します。
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      <guimenu>操作に対して提案された</guimenu>interval<literal>monitor</literal>の値を変更するには、次の手順に従います。
     </para>
     <substeps>
      <step>
       <para>
        操作の隣のペンアイコンをクリックします。
       </para>
      </step>
      <step>
       <para>
        表示されるダイアログで、<literal>interval</literal>に対して監視間隔の別の値を入力します。
       </para>
      </step>
      <step>
       <para>
        リソースが停止されている場合にリソース監視を設定するには、次の手順に従います。
       </para>
       <substeps>
        <step>
         <para>
          下にある空のドロップダウンボックスから<literal>role</literal>エントリを選択します。
         </para>
        </step>
        <step>
         <para>
          <literal>role</literal>ドロップダウンボックスから、<literal>Stopped</literal>を選択します。
         </para>
        </step>
        <step>
         <para>
          <guimenu>適用</guimenu>をクリックし、変更内容を確認して操作のダイアログを閉じます。
         </para>
        </step>
       </substeps>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      リソース設定画面で変更内容を確認します。画面上部に、アクションが成功したかどうかを示すメッセージが表示されます。
     </para>
    </step>
   </procedure>
   <para>
    リソースの障害を表示するには、Hawk2で<guimenu>状態</guimenu>画面に切り替えて、関係するリソースを選択します。<guimenu>操作</guimenu>列で、下矢印アイコンをクリックして<guimenu>最近のイベント</guimenu>を選択します。表示されるダイアログに、リソースに対して実行された最近のアクションが一覧表示されます。障害は赤で表示されます。リソースの詳細を表示するには、<guimenu>操作</guimenu>列で虫眼鏡アイコンをクリックします。
   </para>
   <figure>
    <title>Hawk2 - リソース詳細</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="hawk2-rsc-details.png" width="70%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="hawk2-rsc-details.png" width="60%"/>
     </imageobject>
    </mediaobject>
   </figure>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-monitor">
   <title>crmshを使用したリソース監視の設定</title>
   <para>
    リソースを監視するには、2つの方法(<command>op</command>キーワードで監視処理を定義するか、<command>monitor</command>コマンドを使用するか)があります。次の例では、Apacheリソースを設定し、<literal>op</literal>キーワードを使用して60秒ごとに監視します。
   </para>
 <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive apache apache \
  params ... \
  <emphasis>op monitor interval=60s timeout=30s</emphasis></command></screen>
   <para>
    次のコマンドを使用して同じ操作を実行できます。
   </para>
 <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive apache apache \
   params ...</command>
 <prompt role="custom">crm(live)configure# </prompt><command>monitor apache 60s:30s</command></screen>
   <variablelist>
    <varlistentry>
     <term>停止されたリソースの監視</term>
     <listitem>
      <para>
       通常、リソースは動作中にのみ、クラスタによって監視されます。しかし、同時実行違反を検出するために、停止されるリソースの監視も設定する必要があります。例:
      </para>
 <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive dummy1 Dummy \
     op monitor interval="300s" role="Stopped" timeout="10s" \
     op monitor interval="30s" timeout="10s"</command></screen>
      <para>
       この設定は、<literal>300</literal>秒ごとに、リソース<literal>dummy1</literal>に対する監視操作をトリガします。これは、リソースが<literal>role="Stopped"</literal>に入ると有効になります。実行中には、リソースは<literal>30</literal>秒ごとに監視されます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>プローブ</term>
     <listitem>
      <para>
       CRMはすべてのノードの各リソースに対して、<literal>probe</literal>と呼ばれる初期監視を実行します。probeはリソースのクリーンアップ後にも実行されます。1つのリソースに対して複数の監視操作が定義されている場合、CRMは最も時間間隔の短い監視操作を1つ選択し、そのタイムアウト値をプローブのデフォルトタイムアウトとして使用します。監視操作が何も設定されていない場合は、クラスタ規模のデフォルトが適用されます。デフォルトは、<literal>20</literal>秒です(別途<varname>op_defaults</varname>パラメータを設定して指定されていない場合)。自動計算や<systemitem>op_defaults</systemitem>の値に依存したくない場合は、このリソースの<emphasis></emphasis>「プローブ」に対して特定の監視操作を定義します。<literal>interval</literal>を<literal>0</literal>に設定した監視操作を追加することで、この操作を行います。たとえば次のようになります。
      </para>
 <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive rsc1 ocf:pacemaker:Dummy \
     op monitor interval="0" timeout="60"</command></screen>
      <para>
       <systemitem>rsc1</systemitem>のプローブは<literal>60s</literal>でタイムアウトになります。この値は、<varname>op_defaults</varname>で定義されているグローバルなタイムアウト値や、その他の操作で設定されたタイムアウト値とは無関係です。それぞれのリソースのプローブを指定するために<literal>interval="0"</literal>を設定していない場合、CRMは、そのリソースに定義されている監視操作が他にないかどうかを自動的に確認し、上で説明されているようにプローブのタイムアウト値を計算します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>

 <sect1 xml:id="sec-ha-manual-config-load">
  <title>ファイルからのリソースのロード</title>
  <para>
   設定の一部またはすべてをローカルファイルまたはネットワークURLからロードできます。次の3つの異なる方法を定義できます。
  </para>
  <variablelist>
   <varlistentry>
    <term><option>replace</option></term>
    <listitem>
     <para>
      このオプションは、現在の設定を新たなソース設定に置き換えます。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>update</option></term>
    <listitem>
     <para>
      このオプションは、ソース設定のインポートを試みます。現在の設定に新たな項目を追加したり、既存の項目を更新したりします。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>push</option></term>
    <listitem>
     <para>
      このオプションは、ソースからのコンテンツを現在の設定にインポートします(<option>update</option>と同じ)。ただし、新しい設定で使用できないオブジェクトを削除します。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   ファイル<filename>mycluster-config.txt</filename>から新しい設定をロードするには、次の構文を使用します。
  </para>
  <screen><prompt role="root"># </prompt><command>crm configure load push mycluster-config.txt</command></screen>
 </sect1>

 <sect1 xml:id="sec-ha-config-basics-meta-attr">
  <title>リソースオプション(メタ属性)</title>
  <para>
   追加した各リソースについて、オプションを定義できます。クラスタはオプションを使用して、リソースの動作方法を決定します。CRMに特定のリソースの処理方法を通知します。リソースオプションは、<command>crm_resource --meta</command>コマンドまたはHawk2を使用して設定できます。
  </para>
  <para>
   以下のリストは、一般的なオプションを示しています。
  </para>
  <variablelist>
   <varlistentry>
    <term><literal>priority</literal></term>
    <listitem>
     <para>
      すべてのリソースをアクティブにできるわけではない場合、クラスタは優先度の低いリソースを停止して、優先度の高いリソースをアクティブに保ちます。
     </para>
     <para>
      デフォルトの設定は<literal>0</literal>です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>target-role</literal></term>
    <listitem>
     <para>
      クラスタが維持しようとするこのリソースの状態。使用できる値: <literal>Stopped</literal>, <literal>Started</literal>, <literal>Unpromoted</literal>, <literal>Promoted</literal>.
     </para>
     <para>
      デフォルトの設定は<literal>Started</literal>です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>is-managed</literal></term>
    <listitem>
     <para>
      クラスタがリソースを開始して停止できるかどうか。使用できる値: <literal>true</literal>, <literal>false</literal>.値が<literal>false</literal>に設定されていても、リソースの状態は引き続き監視され、障害が発生した場合は報告されます。これは、リソースを<literal>maintenance="true"</literal>&quot;に設定するのとは異なります。
     </para>
     <para>
      デフォルトの設定は<literal>true</literal>です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>maintenance</literal></term>
    <listitem>
     <para>
      リソースは手動でタッチできるかどうか。使用できる値: <literal>true</literal>, <literal>false</literal>.<literal>true</literal>に設定されている場合、すべてのリソースは非管理になります。つまり、クラスタはリソースの監視を停止し、その状態を認識しなくなります。クラスタによってクラスタリソースの再起動が試行される代わりに、ユーザがクラスタリソースを停止または再起動できます。
     </para>
     <para>
      デフォルトの設定は<literal>false</literal>です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>resource-stickiness</literal></term>
    <listitem>
     <para>
      リソースが現在の状態をどの程度維持したいか。
     </para>
     <para>
      デフォルト値は、個別のクローンインスタンスに対しては<literal>1</literal>、その他すべてのリソースに対しては<literal>0</literal>です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>migration-threshold</literal></term>
    <listitem>
     <para>
      ノードがこのリソースをホストできなくなるまで、このリソースについてノード上で発生する失敗の回数。
     </para>
     <para>
      デフォルトの設定は<literal>INFINITY</literal>です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>multiple-active</literal></term>
    <listitem>
     <para>
      複数のノードでアクティブなリソースを検出した場合のクラスタの動作。使用できる値: <literal>block</literal> (リソースを管理されていないとマークする)、<literal>stop_only</literal>、<literal>stop_start</literal>。
     </para>
     <para>
      デフォルトの設定は<literal>stop_start</literal>です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>failure-timeout</literal></term>
    <listitem>
     <para>
      失敗が発生していないかように動作する(場合によっては、リソースを失敗したノードに戻す)前に、待機する秒数。
     </para>
     <para>
      デフォルト値は<literal>0</literal> (無効)です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>allow-migrate</literal></term>
    <listitem>
     <para>
      <literal>migrate_to</literal>アクションおよび<literal>migrate_from</literal>アクションをサポートするリソースのライブマイグレーションを許可するかどうか。値が<literal>true</literal>に設定されている場合、リソースは状態を失うことなく移行できます。値が<literal>false</literal>に設定されている場合、リソースは最初のノードでシャットダウンされ、2つ目のノードで再起動されます。
     </para>
     <para>
      デフォルト値は、<literal>ocf:pacemaker:remote</literal>リソースに対しては<literal>true</literal>、その他すべてのリソースに対しては<literal>false</literal>です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
     <term><literal>allow-unhealthy-nodes</literal></term>
     <listitem>
       <para>
        通常であればノードのヘルススコアが低くリソースを実行できない場合でも、この設定によりリソースがノード上で実行されることを許可します。
       </para>
       <para>
         デフォルトの設定は<literal>false</literal>です。
       </para>
     </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>remote-node</literal></term>
    <listitem>
     <para>
      このリソースが定義するリモートノードの名前。これにより、リモートノードのリソースが有効化されるだけでなく、リモートノードの識別に使用される固有の名前が定義されます。また、他のパラメータが設定されていない場合、この値は<varname>remote-port</varname>ポートで接続するホスト名と想定されます。
     </para>
     <para>
      デフォルトでは、このオプションは無効になっています。
     </para>
     <warning>
      <title>固有のIDの使用</title>
      <para>
       この値は、既存のリソースやノードIDとは重複させないでください。
      </para>
     </warning>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>remote-port</literal></term>
    <listitem>
     <para>
      pacemaker_remoteへのゲスト接続用のカスタムポート。
     </para>
     <para>
      デフォルトの設定は<literal>3121</literal>です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>remote-addr</literal></term>
    <listitem>
     <para>
      リモートノードの名前がゲストのホスト名ではない場合に接続するIPアドレスまたはホスト名。
     </para>
     <para>
      デフォルト値は<literal>remote-node</literal>によって設定された値です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>remote-connect-timeout</literal></term>
    <listitem>
     <para>
      中断したゲスト接続がタイムアウトするまでの時間。
     </para>
     <para>
      デフォルトの設定は<literal>60s</literal>です。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="sec-ha-config-basics-inst-attr">
  <title>インスタンス属性(パラメータ)</title>

  <para>
   すべてのリソースクラスのスクリプトでは、動作方法および管理するサービスのインスタンスを指定するパラメータを指定できます。リソースエージェントがパラメータをサポートする場合、それらのパラメータを<command>crm_resource</command>コマンドまたはHawk2を使用して追加できます。インスタンス属性は、<command>crm</command>コマンドラインユーティリティでは<literal>params</literal>、Hawk2では<literal>Parameter</literal>と呼ばれます。OCFスクリプトでサポートされているインスタンス属性のリストは、次のコマンドを<systemitem class="username">root</systemitem>として実行すると参照できます。
  </para>
<screen><prompt role="root"># </prompt><command>crm ra info <replaceable>[class:[provider:]]resource_agent</replaceable></command></screen>
  <para>
   または(オプション部分なし):
  </para>
<screen><prompt role="root"># </prompt><command>crm ra info <replaceable>resource_agent</replaceable></command></screen>
  <para>
   出力には、サポートされているすべての属性、それらの目的、およびデフォルト値が一覧されます。
  </para>
  <note>
   <title>グループ、クローン、またはプロモータブルクローンのインスタンス属性</title>
   <para>
    グループ、クローン、およびプロモータブルクローンリソースには、インスタンス属性がないので注意してください。ただし、インスタンス属性のセットは、グループ、クローン、またはプロモータブルクローンの子によって継承されます。
   </para>
  </note>
 </sect1>

 <sect1 xml:id="sec-ha-config-basics-operations">
  <title>リソース操作</title>
  <para>
   デフォルトで、クラスタはリソースが良好な状態であることを保証しません。クラスタにこれを行わせるには、リソースの定義に監視操作を追加する必要があります。監視操作は、すべてのクラスまたはリソースエージェントに追加できます。
  </para>
  <para>
   監視操作には、次のプロパティがあります。
  </para>
  <variablelist>
   <varlistentry>
    <term><literal>id</literal></term>
    <listitem>
     <para>
      アクションに指定する名前。一意にする必要があります。(IDは表示されません)
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>name</literal></term>
    <listitem>
     <para>
      実行するアクション。一般的な値: <literal>monitor</literal>、<literal>start</literal>、<literal>stop</literal>。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>interval</literal></term>
    <listitem>
     <para>
      操作を実行する頻度(秒単位)。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>timeout</literal></term>
    <listitem>
     <para>
      アクションが失敗したと宣言する前に待機する長さ。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>requires</literal></term>
    <listitem>
     <para>
      このアクションが発生する前に満たす必要のある条件。使用できる値: <literal>nothing</literal>, <literal>quorum</literal>, <literal>fencing</literal>.デフォルトは、フェンシングが有効でリソースのクラスが<literal>stonith</literal>かどうかによります。STONITHリソースの場合、デフォルトは<literal>nothing</literal>です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>on-fail</literal></term>
    <listitem>
     <para>
      このアクションが失敗した場合に実行するアクション。使用できる値:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <literal>ignore</literal>: リソースが失敗しなかったのように動作します。
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>block</literal>: リソースにこれ以上の操作を実行しません。
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>stop</literal>: リソースを停止して、他の場所でも開始しません。
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>restart</literal>: リソースを停止して再起動します(別のノード上の場合あり)。
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>fence</literal>: リソースが失敗したノードを停止します(STONITH)。
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>standby</literal>: リソースが失敗したノードから<emphasis>すべて</emphasis>のリソースを移動させます。
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>enabled</literal></term>
    <listitem>
     <para>
      <literal>false</literal>の場合、操作は存在していない場合と同様に処理されます。使用できる値: <literal>true</literal>, <literal>false</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>role</literal></term>
    <listitem>
     <para>
      リソースにこの役割がある場合のみ操作を実行します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>record-pending</literal></term>
    <listitem>
     <para>
      グローバルに設定したり、個々のリソースに対して設定できます。リソース上の<quote>in-flight</quote>操作の状態をCIBに反映させます。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>description</literal></term>
    <listitem>
     <para>
      操作について説明します。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

</chapter>
