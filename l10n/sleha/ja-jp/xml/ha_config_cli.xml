<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="ha_config_cli.xml" xml:id="cha-ha-manual-config" version="5.0">
 <title>crmshの概要</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:maintainer/>
        <dm:status>editing</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>yes</dm:translation>
        <dm:languages/>
        <dm:release/>
        <dm:repository/>
      </dm:docmanager>
    </info>

   <para>
    クラスタリソースを設定および管理するには、コマンドラインユーティリティであるcrmシェル(crmsh)またはWebベースのユーザインタフェースであるHawk2のいずれかを使用します。
   </para>
        <para>
    このセクションでは、コマンドラインツール<command>crm</command>を紹介します。<command>crm</command>コマンドには、リソース、CIB、ノード、リソースエージェントなどを管理するサブコマンドがあります。このコマンドには、例を組み込んだ詳細なヘルプシステムが用意されています。すべての例は、<xref linkend="app-naming" xrefstyle="select:label"/>で説明される命名規則に従います。
   </para>
     <para>
   イベントは<filename>/var/log/crmsh/crmsh.log</filename>にログを記録します。
  </para>
    <note>
  <title>ユーザの権限</title>
  <para>
   クラスタを管理するには十分な権限が必要です。<command>crm</command>コマンドおよびそのサブコマンドは、<systemitem class="username">root</systemitem>ユーザとして、またはCRM所有者ユーザとして実行される必要があります(通常は<systemitem class="username">hacluster</systemitem>ユーザ)。
  </para>
  <para>
   ただし、<option>user</option>オプションを使用することで、<command>crm</command>とそのサブコマンドを一般(権限のない)ユーザとして実行し、必要な場合はいつでも<command>sudo</command>を使用してIDを変更できます。たとえば、次の<command>crm</command>コマンドは、権限のあるユーザIDとして<systemitem class="username">hacluster</systemitem>を使用します。
  </para>
<screen><prompt role="root"># </prompt><command>crm options user hacluster</command></screen>
  <para>
   <command>sudo</command>がパスワードを要求しないように<filename>/etc/sudoers</filename>を設定する必要があります。
  </para>
 </note>




  <tip>
   <title>対話型crmプロンプト</title>
   <para>crmを引数なしで(または1つのサブレベルのみを引数として)使用することにより、crmシェルは対話モードになります。このモードは、次のプロンプトで示されます。
   </para>
   <screen><prompt>crm(live/HOSTNAME)</prompt></screen>
   <para>
    読みやすくするために、このマニュアルでは対話型crmのプロンプトでホスト名を省略します。次の例のように、aliceなどの特定のノードで対話型シェルを実行する必要がある場合にのみホスト名を含めます。
   </para>
   <screen><prompt>crm(live/alice)</prompt></screen>
  </tip>

  <sect2 xml:id="sec-ha-manual-config-crm-help">
   <title>ヘルプの表示</title>
   <para>
    ヘルプには複数の方法でアクセスできます。
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <command>crm</command>とそのコマンドラインオプションの使用方法を出力するには:
     </para>
<screen><prompt role="root"># </prompt><command>crm --help</command></screen>
    </listitem>
    <listitem>
     <para>
      使用可能なすべてのコマンドの一覧を表示するには:
     </para>
<screen><prompt role="root"># </prompt><command>crm help</command></screen>
    </listitem>
    <listitem>
     <para>
      コマンドの参照情報だけでなく、他のヘルプセクションにアクセスするには:
     </para>
<screen><prompt role="root"># </prompt><command>crm help topics</command></screen>
    </listitem>
    <listitem>
     <para>
      <command>configure</command>サブコマンドの詳細なヘルプテキストを表示するには:
     </para>
<screen><prompt role="root"># </prompt><command>crm configure help</command></screen>
    </listitem>
    <listitem>
     <para>
      <command>group</command>の<command>configure</command>サブコマンドの構文、使用方法、例を印刷するには:
     </para>
<screen><prompt role="root"># </prompt><command>crm configure help group</command></screen>
     <para>
      これも同様です:
     </para>
<screen><prompt role="root"># </prompt><command>crm help configure group</command></screen>
    </listitem>
   </itemizedlist>
   <para>
    <command>help</command>サブコマンド(<option>--help</option>オプションと混同しないこと)のほとんどすべての出力によって、テキストビューアが開きます。このテキストビューアは上下にスクロール可能で、ヘルプテキストが読みやすくなっています。テキストビューアを閉じるには、<keycap>Q</keycap>キーを押します。
   </para>
   <tip xml:id="tip-crm-tabcompletion">
    <title>バッシュおよび対話型シェルでタブ補完機能を使用</title>
    <para>
     crmshは、対話型シェルに対してだけではなく、バッシュでの直接的で完全なタブ補完機能をサポートしています。たとえば、<literal>crm help
     config</literal><keycap function="tab"/>を入力すると、対話型シェルのように単語が補完されます。
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-crm-run">
   <title>crmshのサブコマンドの実行</title>
   <para>
    <command>crm</command>コマンドそのものは、次のように使用できます。
   </para>
   <itemizedlist>
    <listitem>
     <formalpara>
      <title>直接:</title>
      <para>
       すべてのサブコマンドを<command>crm</command>に続け、<keycap function="enter"/>を押すと、ただちにその出力が表示されます。たとえば、<command>crm help ra</command>を入力すると、<command>ra</command>サブコマンド(リソースエージェント)に関する情報を取得できます。
      </para>
     </formalpara>
      <para>サブコマンドは、その短縮形が固有である限り短縮できます。たとえば、crmshが意味を認識しているため、<command>status</command>を<command>st</command>と短縮することができます。
      </para>
      <para>パラメータを短縮する機能もあります。通常、パラメータは<command>params</command>キーワードを使用して追加します。<literal>params</literal>セクションが最初のセクションでほかにセクションがない場合、このセクションを省略できます。たとえば、次のような行があるとします。
      </para>
      <screen><prompt role="root"># </prompt><command>crm primitive ipaddr IPaddr2 params ip=192.168.0.55</command></screen>
      <para>これは次の行と同等です。</para>
      <screen><prompt role="root"># </prompt><command>crm primitive ipaddr IPaddr2 ip=192.168.0.55</command></screen>
    </listitem>
    <listitem>
     <formalpara>
      <title>crmシェルスクリプトとして使用:</title>
      <para>
       シェルスクリプトには<command>crm</command>crmのサブコマンドが含まれます。詳細については、<xref linkend="sec-ha-manual-config-crmshellscripts"/>を参照してください。
      </para>
     </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>crmshクラスタスクリプトとして使用:</title>
        <para>これらは、メタデータ、RPMパッケージへの参照、設定ファイル、およびcrmshサブコマンドを1つのわかりやすい名前でバンドルしてまとめたものです。<command>crm script</command>コマンドを使用して管理します。
        </para>
      </formalpara>
      <para>これらをcrmshシェルスクリプトと混同しないでください。両方に共通する目的はいくつかありますが、crmシェルスクリプトにはサブコマンドのみが含まれるのに対し、クラスタスクリプトにはコマンドの単純なエミュレーション以上の処理が組み込まれています。詳細については、<xref linkend="sec-ha-manual-config-clusterscripts"/>を参照してください。
      </para>
    </listitem>
    <listitem>
     <formalpara>
      <title>内部シェルとして対話式に使用:</title>
      <para>
       「<command>crm</command>」とタイプして、内部シェルに入ります。プロンプトが<literal>crm(live)</literal>)に変化します。<command>help</command>を使用すると、利用可能なサブコマンドの概要を取得できます。内部シェルにはさまざまなサブコマンドレベルがあり、1つのサブコマンドをタイプして<keycap function="enter"/>を押すことで、そのサブコマンドのレベルに<quote>入る</quote>ことができます。
      </para>
     </formalpara>
     <para>
      たとえば、「<command>resource</command>」とタイプすると、リソース管理レベルに入ります。プロンプトは<literal>crm(live)resource#</literal>#に変わります。内部シェルを終了するには、コマンド<command>quit</command>を使用します。1レベル戻る場合は、<command>back</command>、<command>up</command>、<command>end</command>、または<command>cd</command>を使用します。
     </para>
     <para>
      <command>crm</command>、そしてオプションを付けずに各サブコマンドを入力して<keycap function="enter"/>を押すと、そのレベルに直接入ることができます。
     </para>
     <para>
      内部シェルは、サブコマンドとリソースのタブによる完了もサポートします。コマンドの冒頭をタイプして<keycap function="tab"/>を押すと、<command>crm</command>がそのオブジェクトを完了します。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    crmshは、同期のコマンドの実行もサポートしています。これを有効にするには、<option>-w</option>オプションを使用します。<command>crm</command>を<option>-w</option>なしで起動した場合でも、後ほどユーザ初期設定の<command>wait</command>を<literal>yes</literal> (<command>options
    wait yes</command>)に設定すれば、有効にすることができます。このオプションが有効化される場合、<command>crm</command>は遷移が終了するまで待機します。処理が開始すると毎回、進行状況を示すための点が印刷されます。同期コマンドの実行は<command>resource
    start</command>などのコマンドにのみ適用できます。
   </para>
   <note>
    <title>管理サブコマンドと設定サブコマンド間の相違</title>
    <para>
     <command>crm</command>ツールには管理機能(サブコマンド<command>resource</command>および<command>node</command>)があり、設定に使用できます(<command>configure</command>、<command>cib</command>)。
    </para>
   </note>
   <para>
    以降のサブセクションでは、<command>crm</command>ツールの重要な側面について、その概要を示します。
   </para>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-ocf">
   <title>OCFリソースエージェントに関する情報の表示</title>
   <para>
    リソースエージェントはクラスタ設定で常に操作する必要があるため、<command>crm</command>ツールには、<command>ra</command>コマンドが含まれています。このコマンドを使用して、リソースエージェントの情報を表示し、リソースエージェントを管理します(詳細は<xref linkend="sec-ha-config-basics-raclasses"/>も参照)。
   </para>
<screen><prompt role="root"># </prompt><command>crm ra</command>
<prompt role="custom">crm(live)ra# </prompt></screen>
   <para>
    コマンド<command>classes</command>は、すべてのクラスとプロバイダを一覧表示します。
   </para>
<screen><prompt role="custom">crm(live)ra# </prompt><command>classes</command>
 lsb
 ocf / heartbeat linbit lvm2 ocfs2 pacemaker
 service
 stonith
 systemd</screen>
   <para>
    クラス(およびプロバイダ)に使用できるすべてのリソースエージェントの概要を取得するには、<command>list</command>コマンドを使用します。
   </para>
<screen><prompt role="custom">crm(live)ra# </prompt><command>list ocf</command>
AoEtarget           AudibleAlarm        CTDB                ClusterMon
Delay               Dummy               EvmsSCC             Evmsd
Filesystem          HealthCPU           HealthSMART         ICP
IPaddr              IPaddr2             IPsrcaddr           IPv6addr
LVM                 LinuxSCSI           MailTo              ManageRAID
ManageVE            Pure-FTPd           Raid1               Route
SAPDatabase         SAPInstance         SendArp             ServeRAID
...</screen>
   <para>
    リソースエージェントの概要は、<command>info</command>で表示できます。
   </para>
<screen><prompt role="custom">crm(live)ra# </prompt><command>info ocf:linbit:drbd</command>
This resource agent manages a DRBD* resource
as a master/slave resource. DRBD is a shared-nothing replicated storage
device. (ocf:linbit:drbd)

Master/Slave OCF Resource Agent for DRBD

Parameters (* denotes required, [] the default):

drbd_resource* (string): drbd resource name
    The name of the drbd resource from the drbd.conf file.

drbdconf (string, [/etc/drbd.conf]): Path to drbd.conf
    Full path to the drbd.conf file.

Operations' defaults (advisory minimum):

    start         timeout=240
    promote       timeout=90
    demote        timeout=90
    notify        timeout=90
    stop          timeout=100
    monitor_Slave_0 interval=20 timeout=20 start-delay=1m
    monitor_Master_0 interval=10 timeout=20 start-delay=1m</screen>
   <para>
    ビューアは、「<keycap>Q</keycap>」を押すと終了できます。
   </para>
   <tip>
    <title><command>crm</command>を直接使用する</title>
    <para>
     前の例では、<command>crm</command>コマンドの内部シェルを使用しました。ただし、必ずしも、それを使用する必要はありません。該当するサブコマンドを<command>crm</command>に追加すれば、同じ結果が得られます。たとえば、すべてのOCFリソースエージェントを一覧するには、シェルに「<command>crm ra list ocf</command> 」」を入力すれば済みます。
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-crmshellscripts">
   <title>crmshのシェルスクリプトの使用</title>
   <para>
    crmshシェルスクリプトは、crmshサブコマンドをファイル内に列挙する便利な方法を提供します。これにより、特定の行をコメントしたり、これらのコメントを後で再生したりするのが簡単になります。crmshシェルスクリプトには「crmshサブコマンドのみ」を含めることができることに注意してください。<emphasis></emphasis>他のコマンドは許可されていません。
   </para>
   <para>
    crmshシェルスクリプトを使用するには、その前に特定のコマンドを使用してファイルを作成してください。たとえば、次のファイルにはクラスタのステータスが出力され、すべてのノードのリストが提供されます。
   </para>
   <example xml:id="ex-ha-manual-config-crmshellscripts">
    <title>単純なcrmshシェルスクリプト</title>
    <screen># A small example file with some crm subcommands
<command>status</command>
<command>node list</command></screen>
   </example>
   <para>
    ハッシュ記号(<literal>#</literal>)で始まる行はコメントなので、無視されます。行が長すぎる場合は、行末にバックスラッシュ(<literal>\</literal>)を挿入して、次の行に続けます。読みやすさを向上させるために、特定のサブコマンドに属する行をインデントすることをお勧めします。
   </para>

   <para>このスクリプトを使用するには、次の方法のいずれかを使用します。</para>
   <screen><prompt role="root"># </prompt><command>crm -f example.cli</command>
<prompt role="root"># </prompt><command>crm &lt; example.cli</command></screen>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-clusterscripts">
    <title>crmshのクラスタスクリプトの使用</title>
    <para>すべてのクラスタノードから情報を収集して変更をすべて展開することは、鍵となるクラスタ管理タスクです。複数のノードで同じ手順を手動で実行するのはミスを起こしがちであるため、代わりにcrmshクラスタスクリプトを使用できます。
   </para>
   <para>
    これらを<emphasis></emphasis>「crmshシェルスクリプト」と混同しないでください(<xref linkend="sec-ha-manual-config-crmshellscripts"/>で説明)。
    </para>

   <para>crmshシェルスクリプトとは対照的に、クラスタスクリプトでは次のような追加のタスクを実行します。</para>
    <itemizedlist>
      <listitem>
        <para>特定のタスクに必要なソフトウェアをインストールする。</para>
      </listitem>
      <listitem>
        <para>設定ファイルを作成または変更する。</para>
      </listitem>
      <listitem>
        <para>情報を収集し、クラスタの潜在的な問題をレポートする。</para>
      </listitem>
      <listitem>
        <para>変更をすべてのノードに展開する。</para>
      </listitem>
    </itemizedlist>

    <para>crmshクラスタスクリプトは、他のクラスタ管理ツールを置き換えるものではなく、クラスタ全体に対して統合化された方法でこれらのタスクを実行できるようにします。詳細については、<link xlink:href="http://crmsh.github.io/scripts/" xlink:show="new"/>を参照してください。
    </para>

    <sect3 xml:id="sec-ha-manual-config-clusterscripts-usage">
      <title>使用方法</title>
      <para>利用可能なすべてのクラスタのリストを取得するには、次のコマンドを実行します。</para>
      <screen><prompt role="root"># </prompt><command>crm script list</command></screen>

      <para>スクリプトのコンポーネントを表示するには、<command>show</command>コマンドと、クラスタスクリプトの名前を使用します。次に例を示します。</para>
      <screen><prompt role="root"># </prompt><command>crm script show mailto</command>
mailto (Basic)
MailTo

 This is a resource agent for MailTo. It sends email to a sysadmin
whenever  a takeover occurs.

1. Notifies recipients by email in the event of resource takeover

  id (required)  (unique)
      Identifier for the cluster resource
  email (required)
      Email address
  subject
      Subject</screen>

      <para><command>show</command>の出力には、タイトル、短い説明、および手順が含まれます。各手順は一連のステップに分かれており、これらのステップを指定された順序で実行します。 </para>
      <para>各ステップには、必須パラメータとオプションパラメータのリスト、および短い説明とそのデフォルト値が含まれます。</para>

      <para>各クラスタスクリプトは、一連の共通パラメータを認識します。これらのパラメータは任意のスクリプトに渡すことができます。</para>

      <table>
        <title>共通パラメータ</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>パラメータ</entry>
              <entry>引数</entry>
              <entry>説明</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><parameter>action</parameter></entry>
              <entry><replaceable>INDEX</replaceable></entry>
              <entry>設定した場合、1つのアクションのみを実行します(verifyによって返されたインデックス)。</entry>
            </row>
            <row>
              <entry><parameter>dry_run</parameter></entry>
              <entry><replaceable>BOOL</replaceable></entry>
              <entry>設定した場合、実行のシミュレートのみを行います(デフォルト: no)。 </entry>
            </row>
            <row>
              <entry><parameter>nodes</parameter></entry>
              <entry><replaceable>LIST</replaceable></entry>
              <entry>スクリプト実行対象のノードのリスト。</entry>
            </row>
            <row>
              <entry><parameter>port</parameter></entry>
              <entry><replaceable>NUMBER</replaceable></entry>
              <entry>接続先のポート。</entry>
            </row>
            <row>
              <entry><parameter>statefile</parameter></entry>
              <entry><replaceable>FILE</replaceable></entry>
              <entry>シングルステップ実行の場合に、指定したファイルに状態を保存します。 </entry>
            </row>
            <row>
              <entry><parameter>sudo</parameter></entry>
              <entry><replaceable>BOOL</replaceable></entry>
              <entry>設定した場合、sudoパスワードを入力するようcrmによってプロンプトが表示され、必要に応じてsudoが使用されます(デフォルト: no)。 </entry>
            </row>
            <row>
              <entry><parameter>timeout</parameter></entry>
              <entry><replaceable>NUMBER</replaceable></entry>
              <entry>秒単位での実行タイムアウト(デフォルト: 600)。 </entry>
            </row>
            <row>
              <entry><parameter>user</parameter></entry>
              <entry><replaceable>USER</replaceable></entry>
              <entry>指定したユーザとしてスクリプトを実行します。 </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect3>

    <sect3 xml:id="sec-ha-manual-config-clusterscripts-verify-run">
      <title>クラスタスクリプトの検証と実行</title>
      <para>問題を避けるため、クラスタスクリプトを実行する前に、実行するアクションを確認してパラメータを検証します。クラスタスクリプトは一連のアクションを実行でき、さまざまな理由で失敗する可能性があります。そのため、実行前にパラメータを検証すると、問題の回避に役立ちます。</para>
      <para>たとえば、<systemitem>mailto</systemitem>リソースエージェントでは、固有の識別子と電子メールアドレスが必要です。これらのパラメータを検証するには、以下を実行します。</para>
      <screen><prompt role="root"># </prompt><command>crm script verify mailto id=sysadmin email=tux@example.org</command>
1. Ensure mail package is installed

        mailx

2. Configure cluster resources

        primitive sysadmin MailTo
                email="tux@example.org"
                op start timeout="10"
                op stop timeout="10"
                op monitor interval="10" timeout="10"

        clone c-sysadmin sysadmin</screen>
      <para><command>verify</command>コマンドは各ステップを出力し、指定したパラメータでプレースホルダを置き換えます。<command>verify</command>で問題が見つかった場合は報告します。問題がなければ、<command>verify</command>コマンドを<command>run</command>に置き換えます。</para>
      <screen><prompt role="root"># </prompt><command>crm script run mailto id=sysadmin email=tux@example.org</command>
INFO: MailTo
INFO: Nodes: alice, bob
OK: Ensure mail package is installed
OK: Configure cluster resources</screen>
      <para><command>crm status</command>を使用して、リソースがクラスタに統合されているかどうかを確認します。</para>
      <screen><prompt role="root"># </prompt><command>crm status</command>
[...]
 Clone Set: c-sysadmin [sysadmin]
     Started: [ alice bob ]</screen>
    </sect3>

  </sect2>

  <sect2 xml:id="sec-ha-manual-config-template">
   <title>設定テンプレートの使用</title>
    <note>
      <title>非推奨に関する注意</title>
      <para>設定テンプレートの使用は非推奨で、今後削除される予定です。設定テンプレートはクラスタスクリプトに置き換えられます。<xref linkend="sec-ha-manual-config-clusterscripts"/>を参照してください。
      </para>
    </note>
   <para>
    設定テンプレートは、crmsh用の既成のクラスタ設定です。<emphasis>リソーステンプレート</emphasis>(<xref linkend="sec-ha-manual-config-rsc-template"/>の説明を参照)と混同しないでください。これらは<emphasis>クラスタ</emphasis>用のテンプレートで、crmシェル用ではありません。
   </para>
   <para>
    設定テンプレートは、最小限の操作で、特定ユーザのニーズに合わせて調整できます。テンプレートで設定を作成する際には、警告メッセージでヒントが与えられます。これは、後から編集することができ、さらにカスタマイズできます。
   </para>
   <para>
    次の手順は、簡単ですが機能的なApache設定を作成する方法を示しています。
   </para>
   <procedure xml:id="pro-ha-manual-config-template">
    <step>
     <para>
      <systemitem class="username">root</systemitem>としてログインし、<command>crm</command>対話型シェルを開始します。
     </para>
<screen><prompt role="root"># </prompt><command>crm configure</command></screen>
    </step>
    <step>
     <para>
      設定テンプレートから新しい設定を作成します。
     </para>
     <substeps performance="required">
      <step>
       <para>
        <command>template</command>サブコマンドに切り替えます。
       </para>
<screen><prompt role="custom">crm(live)configure# </prompt><command>template</command></screen>
      </step>
      <step>
       <para>
        使用可能な設定テンプレートを一覧します。
       </para>
<screen><prompt role="custom">crm(live)configure template# </prompt><command>list templates</command>
gfs2-base   filesystem  virtual-ip  apache   clvm     ocfs2    gfs2</screen>
      </step>
      <step>
       <para>
        必要な設定テンプレートを決めます。設定が必要なので、<literal>apache</literal>apacheテンプレートを選択し、<literal>g-intranet</literal>と名付けます。
       </para>
<screen><prompt role="custom">crm(live)configure template# </prompt><command>new g-intranet apache</command>
INFO: pulling in template apache
INFO: pulling in template virtual-ip</screen>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      パラメータを定義します。
     </para>
     <substeps performance="required">
      <step>
       <para>
        作成した設定を一覧表示します。
       </para>
<screen><prompt role="custom">crm(live)configure template# </prompt><command>list</command>
g-intranet</screen>
      </step>
      <step xml:id="st-config-cli-show">
       <para>
        入力を必要とする最小限の変更項目を表示します。
       </para>
<screen><prompt role="custom">crm(live)configure template# </prompt><command>show</command>
ERROR: 23: required parameter ip not set
ERROR: 61: required parameter id not set
ERROR: 65: required parameter configfile not set</screen>
      </step>
      <step xml:id="st-config-cli-edit">
       <para>
        好みのテキストエディタを起動し、<xref linkend="st-config-cli-show"/>でエラーとして表示されたすべての行に入力します。
       </para>
<screen><prompt role="custom">crm(live)configure template# </prompt><command>edit</command></screen>
      </step>

     </substeps>
    </step>
    <step>
     <para>
      設定を表示し、設定が有効かどうか確認します(太字のテキストは、<xref linkend="st-config-cli-edit" xrefstyle="select:label"/>で入力した設定によって異なります)。
     </para>
<screen><prompt role="custom">crm(live)configure template# </prompt><command>show</command>
primitive virtual-ip ocf:heartbeat:IPaddr \
    params ip=<emphasis role="strong">"192.168.1.101"</emphasis>
primitive apache apache \
    params configfile=<emphasis role="strong">"/etc/apache2/httpd.conf"</emphasis>
    monitor apache 120s:60s
group <emphasis role="strong">g-intranet</emphasis> \
    apache virtual-ip</screen>
    </step>
    <step>
     <para>
      設定を適用します。
     </para>
<screen><prompt role="custom">crm(live)configure template# </prompt><command>apply</command>
<prompt role="custom">crm(live)configure# </prompt><command>cd ..</command>
<prompt role="custom">crm(live)configure# </prompt><command>show</command></screen>
    </step>
    <step>
     <para>
      変更内容をCIBに送信します。
     </para>
<screen><prompt role="custom">crm(live)configure# </prompt><command>commit</command></screen>
    </step>
   </procedure>
   <para>
    詳細がわかっていれば、コマンドをさらに簡素化できます。次のコマンドをシェルで使用して、上記の手順を要約できます。
   </para>
<screen><prompt role="root"># </prompt><command>crm configure template \
   new g-intranet apache params \
   configfile="/etc/apache2/httpd.conf" ip="192.168.1.101"</command></screen>
   <para>
    内部<command>crm</command>シェルに入っている場合は、次のコマンドを使用します。
   </para>
<screen><prompt role="custom">crm(live)configure template# </prompt><command>new intranet apache params \
   configfile="/etc/apache2/httpd.conf" ip="192.168.1.101"</command></screen>
   <para>
    ただし、このコマンドは、設定テンプレートから設定を作成するだけです。設定をCIBに適用したり、コミットすることはありません。
   </para>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-shadowconfig">
   <title>シャドーイング設定のテスト</title>
   <para>
    シャドー構成は、異なる構成シナリオのテストに使用されます。複数のシャドウ設定を作成した場合は、1つ1つテストして変更を加えた影響を確認できます。
   </para>
   <para>
    通常の処理は次のようになります。
   </para>
   <procedure>
    <step>
     <para>
      <systemitem class="username">root</systemitem>としてログインし、<command>crm</command>対話型シェルを開始します。
     </para>
<screen><prompt role="root"># </prompt><command>crm configure</command></screen>
    </step>
    <step>
     <para>
      新しいシャドウ設定を作成します。
     </para>
<screen><prompt role="custom">crm(live)configure# </prompt><command>cib new myNewConfig</command>
INFO: myNewConfig shadow CIB created</screen>
     <para>
      シャドウCIBの名前を省略する場合は、一時名の<literal>@tmp@</literal>が作成されます。
     </para>
    </step>
    <step>
     <para>
      現在のライブ設定をシャドウ設定にコピーするには、次のコマンドを使用します。コピーしない場合は、このステップをスキップします。
     </para>
<screen>crm(myNewConfig)# <command>cib reset myNewConfig</command></screen>
     <para>
      このコマンドを使用すると、既存のリソースを後から編集する場合に、簡単に編集できます。
     </para>
    </step>
    <step>
     <para>
      通常どおり変更を行います。シャドウ設定の作成後は、すべての変更がシャドウ設定に適用されます。すべての変更を保存するには、次のコマンドを使用します。
     </para>
<screen>crm(myNewConfig)# <command>commit</command></screen>
    </step>
    <step>
     <para>
      ライブクラスタ設定が再び必要な場合は、次のコマンドでライブ設定に戻ります。
     </para>
<screen>crm(myNewConfig)configure# <command>cib use live</command>
<prompt role="custom">crm(live)# </prompt></screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-debugging">
   <title>設定の変更のデバッグ</title>
   <para>
    設定の変更をクラスタにロードする前に、変更内容を<command>ptest</command>でレビューすることを推奨します。<command>ptest</command>コマンドを指定すると、変更のコミットによって生じるアクションのダイアグラムを表示できます。ダイアグラムを表示するには、<package>graphviz</package>パッケージが必要です。次の例は監視操作を追加するスクリプトです。
   </para>
<screen><prompt role="root"># </prompt><command>crm configure</command>
<prompt role="custom">crm(live)configure# </prompt><command>show fence-bob</command>
primitive fence-bob stonith:apcsmart \
        params hostlist="bob"
<prompt role="custom">crm(live)configure# </prompt><command>monitor fence-bob 120m:60s</command>
<prompt role="custom">crm(live)configure# </prompt><command>show changed</command>
primitive fence-bob stonith:apcsmart \
        params hostlist="bob" \
        op monitor interval="120m" timeout="60s"
<prompt role="custom">crm(live)configure# </prompt><command>ptest</command>
<prompt role="custom">crm(live)configure# </prompt><command>commit</command></screen>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-diagram">
   <title>クラスタダイアグラム</title>
   <para>
    クラスタダイアグラムを出力するには、コマンド<command>crm configure graph</command>を使用します。これにより現在の設定が現在のウィンドウに表示されるので、X11が必要になります。
   </para>
   <para>
    SVG (Scalable Vector Graphics)を使用する場合は、次のコマンドを使用します。
   </para>
<screen><prompt role="root"># </prompt><command>crm configure graph dot config.svg svg</command></screen>
  </sect2>

 <sect2 xml:id="sec-ha-manual-config-crm-corosync">
  <title>Corosync設定の管理</title>

  <para>
   Corosyncは、ほとんどのHAクラスタの下層にあるメッセージング層です。<command>corosync</command>サブコマンドは、Corosync設定を編集および管理するためのコマンドを提供します。
  </para>

  <para>
   たとえば、クラスタのステータスを一覧表示するには、<command>status</command>を使用します。
  </para>

<screen><prompt role="root"># </prompt><command>crm corosync status</command>
Printing ring status.
Local node ID 175704363
RING ID 0
        id      = 10.121.9.43
        status  = ring 0 active with no faults
Quorum information
------------------
Date:             Thu May  8 16:41:56 2014
Quorum provider:  corosync_votequorum
Nodes:            2
Node ID:          175704363
Ring ID:          4032
Quorate:          Yes

Votequorum information
----------------------
Expected votes:   2
Highest expected: 2
Total votes:      2
Quorum:           2
Flags:            Quorate

Membership information
----------------------
    Nodeid      Votes Name
 175704363          1 alice.example.com (local)
 175704619          1 bob.example.com</screen>

  <para>
   <command>diff</command>コマンドは、すべてのノード上のCorosync設定を比較し(別途記載のない場合)、それらの差異を出力します。
  </para>

<screen><prompt role="root"># </prompt><command>crm corosync diff</command>
--- bob
+++ alice
@@ -46,2 +46,2 @@
-       expected_votes: 2
-       two_node: 1
+       expected_votes: 1
+       two_node: 0</screen>

  <para>
   詳細については、<link xlink:href="http://crmsh.nongnu.org/crm.8.html#cmdhelp_corosync"/>を参照してください。
  </para>
 </sect2>

 <sect2 xml:id="sec-ha-config-crm-setpwd">
  <title><filename>cib.xml</filename>から独立したパスワードの設定</title>

  <para>
   クラスタ設定にパスワードなどの機密の情報が含まれている場合、それらをローカルファイルに保存する必要があります。こうしておけば、これらのパラメータがログに記録されたり、サポートレポートに漏洩することはありません。
  </para>

  <para>
   <command>secret</command>を使用する前に、すべてのリソースの概要を確認するため、<command>show</command>コマンドを実行します。
  </para>

<screen><prompt role="root"># </prompt><command>crm configure show</command>
primitive mydb mysql \
   params replication_user=admin ...</screen>

  <para>
   上記の<literal>mydb</literal>リソースに対してパスワードを設定するには、次のコマンドを使用します。
  </para>

<screen><prompt role="root"># </prompt><command>crm resource secret mydb set passwd linux</command>
INFO: syncing /var/lib/heartbeat/lrm/secrets/mydb/passwd to [your node list]</screen>

  <para>
   次のように、保存されたパスワードが返されます。
  </para>

<screen><prompt role="root"># </prompt><command>crm resource secret mydb show passwd</command>
linux</screen>

  <para>
   パラメータはノード間で同期する必要があります。<command>crm resource secret</command>コマンドがそれを処理します。秘密のパラメータを管理する場合には、このコマンドのみを使用することを強く推奨します。
  </para>
 </sect2>
</sect1>
