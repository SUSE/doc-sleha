<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<!--see:  http://www.linux-ha.org/wiki/CTDB_%28resource_agent%29
 
 toms 2013-03-22:
 * https://www.suse.com/support/kb/doc.php?id=7006496
   (FATE#312706)
 
 http://wiki.samba.org/index.php/CTDB_Setup
 http://ctdb.samba.org/
 http://samba.org/~tridge/sambaxp-07/ctdb.pdf
 http://wiki.samba.org/index.php/CTDB_Setup
 http://wiki.samba.org/index.php/Samba_%26_Clustering
 + innerweb link by tserong
 
 CTDB = Cluster Trivial Database
-->
<!--taroth 2010-07-26: FIXME - today's mail by tserong on devel-ha:
 I've just checked in a change to the CTDB RA:
  https://bugzilla.novell.com/show_bug.cgi?id=623788
  This makes the smb_private_dir parameter optional.  [...]
 
 For reference, the wording I've used in the RA metadata is as follows:
 
 smb_private_dir (string): Samba private dir (deprecated)
 The directory for smbd to use for storing such files as
 smbpasswd and secrets.tdb.  Old versions of CTBD (prior to 1.0.50)
 required this to be on shared storage.  This parameter should not
 be set for current versions of CTDB, and only remains in the RA
 for backwards compatibility.-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-ha-samba">
 <title>Samba clustering</title>
 <info>
      <abstract>
        <para>
    A clustered Samba server provides a &ha; solution in your
    heterogeneous networks. This chapter explains some background
    information and how to set up a clustered Samba server.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:maintainer/>
        <dm:status>editing</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>yes</dm:translation>
        <dm:languages/>
        <dm:release/>
        <dm:repository/>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec-ha-samba-overview">
  <title>Conceptual overview</title>

  <para>
   Trivial Database (TDB) has been used by Samba for many years. It allows
   multiple applications to write simultaneously. To make sure all write
   operations are successfully performed and do not collide with each other,
   TDB uses an internal locking mechanism.
  </para>

  <para>
   Cluster Trivial Database (CTDB) is a small extension of the existing TDB.
   CTDB is described by the project as a <quote>cluster implementation of
   the TDB database used by Samba and other projects to store temporary
   data</quote>.
  </para>

  <para>
   Each cluster node runs a local CTDB daemon. Samba communicates with its
   local CTDB daemon instead of writing directly to its TDB. The daemons
   exchange metadata over the network, but actual write and read operations
   are done on a local copy with fast storage. The concept of CTDB is
   displayed in <xref linkend="fig-ha-samba-overview"/>.
  </para>

  <note>
   <title>CTDB for Samba only</title>
   <para>
    The current implementation of the CTDB Resource Agent configures CTDB to
    only manage Samba. Everything else, including IP failover, should be
    configured with Pacemaker.
   </para>
   <para>
    CTDB is only supported for completely homogeneous clusters. For example,
    all nodes in the cluster need to have the same architecture. You cannot
    mix x86 with &amd64;.
   </para>
  </note>

  <figure xml:id="fig-ha-samba-overview">
   <title>Structure of a CTDB cluster</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ha_samba.svg" width="80%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ha_samba.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   A clustered Samba server must share certain data:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Mapping table that associates Unix user and group IDs to Windows users
     and groups.
    </para>
   </listitem>
   <listitem>
    <para>
     The user database must be synchronized between all nodes.
    </para>
   </listitem>
   <listitem>
    <para>
     Join information for a member server in a Windows domain must be
     available on all nodes.
    </para>
   </listitem>
   <listitem>
    <para>
     Metadata needs to be available on all nodes, like active SMB sessions,
     share connections, and various locks.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The goal is that a clustered Samba server with N+1 nodes is faster than
   with only N nodes. One node is not slower than an unclustered Samba
   server.
  </para>
 </sect1>
 <sect1 xml:id="sec-ha-samba-basicconf">
  <title>Basic configuration</title>

  <remark>toms 2014-02-28: From "Tim": "I want to see if we can change this 
    to match what's described in fate#316336 (i.e. separate samba and winbind resources).  
    This is largely a testing/validation effort."</remark>

  <note>
   <title>Changed configuration files</title>
   <para>
    The CTDB Resource Agent automatically changes
    <filename>/etc/sysconfig/ctdb</filename>. Use <command>crm
    ra</command>&nbsp;<option>info CTDB</option> to list all parameters
    that can be specified for the CTDB resource.
   </para>
  </note>

  <para>
   To set up a clustered Samba server, proceed as follows:
  </para>

  <procedure xml:id="pro-ha-samba-basicconf">
   <title>Setting up a basic clustered Samba server</title>
   <step>
    <para>
     Prepare your cluster:
    </para>
    <substeps performance="required">
     <step>
      <para>
       Make sure the following packages are installed before you proceed:
       <package>ctdb</package>,
       <package>tdb-tools</package>, and
       <package>samba</package> (needed for
       <literal>smb</literal> and <literal>nmb</literal> resources).
      </para>
     </step>
     <step>
      <para>
       Configure your cluster (Pacemaker, OCFS2) as described in this guide
       in <xref linkend="part-config"/>.
      </para>
     </step>
     <step>
      <para>
       Configure a shared file system, like OCFS2, and mount it, for
       example, on <filename>/srv/clusterfs</filename>.
        See <xref linkend="cha-ha-ocfs2"/> for more information.
      </para>
     </step>
     <step>
      <para>
       If you want to turn on POSIX ACLs, enable it:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         For a new OCFS2 file system use:
        </para>
<screen>&prompt.root;<command>mkfs.ocfs2</command> --fs-features=xattr ...</screen>
       </listitem>
       <listitem>
        <para>
         For an existing OCFS2 file system use:
        </para>
<screen>&prompt.root;<command>tunefs.ocfs2</command> --fs-feature=xattr<!-- 
      -->&nbsp;<replaceable>DEVICE</replaceable></screen>
        <para>
         Make sure the <option>acl</option> option is specified in the file
         system resource. Use the <command>crm</command> shell as follows:
        </para>
<screen>&prompt.crm.conf;<command>primitive</command> ocfs2-3<!--
      --> ocf:heartbeat:Filesystem<!--
       --> params options="acl" ...</screen>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       Make sure the services <systemitem class="service">ctdb</systemitem>,
       <systemitem class="service">smb</systemitem>, and
       <systemitem class="service">nmb</systemitem> are disabled:
      </para>
<screen>&prompt.root;<command>systemctl</command> disable ctdb
&prompt.root;<command>systemctl</command> disable smb
&prompt.root;<command>systemctl</command> disable nmb</screen>
     </step>
     <step>
      <para>
       Open port <literal>4379</literal> of your firewall on all nodes. This
       is needed for CTDB to communicate with other cluster nodes.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Create a directory for the CTDB lock on the shared file system:
    </para>
<screen>&prompt.root;<command>mkdir</command> -p /srv/clusterfs/samba/</screen>
   </step>
   <step>
    <para>
     In <filename>/etc/ctdb/nodes</filename> insert all nodes which contain
     all private IP addresses of each node in the cluster:
    </para>
<screen>&subnetI;.10
&subnetI;.11</screen>
   </step>
   <step>
    <para>
     Configure Samba. Add the following lines in the
     <literal>[global]</literal> section of
     <filename>/etc/samba/smb.conf</filename>. Use the host name of your
     choice in place of "CTDB-SERVER" (all nodes in the cluster will appear
     as one big node with this name, effectively):
    </para>
<screen>[global]
    # ...
    # settings applicable for all CTDB deployments
    netbios name = CTDB-SERVER
    clustering = yes
    idmap config * : backend = tdb2
    passdb backend = tdbsam
    ctdbd socket = /var/lib/ctdb/ctdb.socket
    # settings necessary for CTDB on OCFS2
    fileid:algorithm = fsid
    vfs objects = fileid
    # ...</screen>
   </step>
   <step>
    <para>
     Copy the configuration file to all of your nodes by using
     <command>csync2</command>:
    </para>
<screen>&prompt.root;<command>csync2</command> <option>-xv</option></screen>
    <para>
     For more information, see
     <xref linkend="pro-ha-installation-setup-csync2-start"/>.
    </para>
   </step>
   <step>
    <para>
     Add a CTDB resource to the cluster:
    </para>
<!--taroth 2012-02-07: fixed bnc#745334, default timeout for start/stop-->
<screen>&prompt.root;<command>crm</command> configure
&prompt.crm.conf;<command>primitive</command> ctdb CTDB params \
    ctdb_manages_winbind="false" \ 
    ctdb_manages_samba="false" \
    ctdb_recovery_lock="/srv/clusterfs/samba/ctdb.lock" \
    ctdb_socket="/var/lib/ctdb/ctdb.socket" \ 
      op monitor interval="10" timeout="20" \
      op start interval="0" timeout="90" \
      op stop interval="0" timeout="100"
&prompt.crm.conf;<command>primitive</command> nmb systemd:nmb \
    op start timeout="60" interval="0" \
    op stop timeout="60" interval="0" \
    op monitor interval="60" timeout="60"
&prompt.crm.conf;<command>primitive</command> smb systemd:smb \
    op start timeout="60" interval="0" \
    op stop timeout="60" interval="0" \
    op monitor interval="60" timeout="60"
&prompt.crm.conf;<command>group</command> g-ctdb ctdb nmb smb
&prompt.crm.conf;<command>clone</command> cl-ctdb g-ctdb meta interleave="true"
&prompt.crm.conf;<command>colocation</command> col-ctdb-with-clusterfs inf: cl-ctdb cl-clusterfs
&prompt.crm.conf;<command>order</command> o-clusterfs-then-ctdb Mandatory: cl-clusterfs cl-ctdb
&prompt.crm.conf;<command>commit</command></screen>
   </step>
   <step>
    <para>
     Add a clustered IP address:
    </para>
<screen>&prompt.crm.conf;<command>primitive</command> ip IPaddr2<!-- 
    --> params ip=&subnetII;.222 \
    unique_clone_address="true" \
    op monitor interval="60" \
    meta resource-stickiness="0"
&prompt.crm.conf;<command>clone</command> cl-ip ip \
    meta interleave="true" clone-node-max="2" globally-unique="true"
&prompt.crm.conf;<command>colocation</command> col-ip-with-ctdb 0: cl-ip cl-ctdb
&prompt.crm.conf;<command>order</command> o-ip-then-ctdb 0: cl-ip cl-ctdb
&prompt.crm.conf;<command>commit</command></screen>
    <para>
     If <literal>unique_clone_address</literal> is set to
     <literal>true</literal>, the IPaddr2 resource agent adds a clone ID to
     the specified address, leading to three different IP addresses. These
     are usually not needed, but help with load balancing. For further
     information about this topic, see <xref linkend="sec-ha-lb-lvs"/>.
    </para>
   </step>
   <step>
    <para>
     Commit your change:
    </para>
<screen>&prompt.crm.conf;<command>commit</command></screen>
   </step>
   <step>
    <para>
     Check the result:
    </para>
<screen>&prompt.root;<command>crm</command> status
Clone Set: cl-storage [dlm]
     Started: [ factory-1 ]
     Stopped: [ factory-0 ]
Clone Set: cl-clusterfs [clusterfs]
     Started: [ factory-1 ]
     Stopped: [ factory-0 ]
 Clone Set: cl-ctdb [g-ctdb]
     Started: [ factory-1 ]
     Started: [ factory-0 ]
 Clone Set: cl-ip [ip] (unique)
     ip:0       (ocf:heartbeat:IPaddr2):       Started factory-0
     ip:1       (ocf:heartbeat:IPaddr2):       Started factory-1</screen>
   </step>
   <step>
    <para>
     Test from a client machine. On a Linux client, run the following
     command to see if you can copy files from and to the system:
    </para>
<screen>&prompt.root;<command>smbclient</command> <option>//&subnetII;.222/myshare</option></screen>
   </step>
<!-- 
    From Tim:
    Add the IP address to the DNS at your site, so that you can access
    the share via \\hostname\sharename on Windows clients.
    => 
   -->
  </procedure>
 </sect1>
 <sect1 xml:id="sec-ha-samba-ad">
  <title>Joining an Active Directory domain</title>

  <remark>toms 2013-04-02: Needs changes</remark>

  <para>
   Active Directory (AD) is a directory service for Windows server systems.
  </para>

  <para>
   The following instructions outline how to join a CTDB cluster to an
   Active Directory domain:
  </para>

  <procedure xml:id="pro-ha-samba-ad-join">
   <step>
    <para>
     Create a CTDB resource as described in
     <xref linkend="pro-ha-samba-basicconf"/>.
    </para>
   </step>
   <step>
    <para>
     Install the <package>samba-winbind</package>
     package.
    </para>
   </step>
   <step>
    <para>
     Disable the <systemitem class="service">winbind</systemitem> service:
    </para>
<screen>&prompt.root;<command>systemctl</command> disable winbind</screen>
   </step>
   <step>
    <para>
     Define a winbind cluster resource:
    </para>
<!--toms 2014-08-18: Fixed bnc#891798 -->
<screen>&prompt.root;<command>crm</command> configure
&prompt.crm.conf;<command>primitive</command> winbind systemd:winbind \
    op start timeout="60" interval="0" \
    op stop timeout="60" interval="0" \
    op monitor interval="60" timeout="60"
&prompt.crm.conf;<command>commit</command></screen>
   </step>
   <step>
    <para>
     Edit the <literal>g-ctdb</literal> group and insert
     <literal>winbind</literal> between the <literal>nmb</literal> and
     <literal>smb</literal> resources:
    </para>
<screen>&prompt.crm.conf;<command>edit</command> g-ctdb</screen>
    <para>
     Save and close the editor with <keycombo> <keycap>:</keycap>
     <keycap>w</keycap> </keycombo> (<command>vim</command>).
    </para>
   </step>
   <step>
    <para>
     Consult your Windows Server documentation for instructions on how to
     set up an Active Directory domain. In this example, we use the
     following parameters:
    </para>
    <informaltable>
     <tgroup cols="2">
      <tbody>
       <row>
        <entry>
         <para>
          AD and DNS server
         </para>
        </entry>
        <entry>
<screen>win2k3.2k3test.&exampledomain;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          AD domain
         </para>
        </entry>
        <entry>
<screen>2k3test.&exampledomain;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          Cluster AD member NetBIOS name
         </para>
        </entry>
        <entry>
<screen>CTDB-SERVER</screen>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
<!--<screen>AD and DNS server = "win2k3.2k3test.&exampledomain;"
AD domain = "2k3test.&exampledomain;"
Cluster AD member NETBIOS name = "CTDB-SERVER"</screen>-->
   </step>
   <step>
    <para>
     <xref linkend="pro-ha-samba-config-join-ad"/>
    </para>
   </step>
  </procedure>

  <para>
   Finally, join your cluster to the Active Directory server:
  </para>

  <procedure xml:id="pro-ha-samba-config-join-ad">
   <title>Joining Active Directory</title>
   <step>
    <para>
     Make sure the following files are included in &csync;'s
     configuration to become installed on all cluster hosts:
    </para>
<screen>/etc/samba/smb.conf
/etc/security/pam_winbind.conf
/etc/krb5.conf
/etc/nsswitch.conf
/etc/security/pam_mount.conf.xml
/etc/pam.d/common-session</screen>
    <para>
     You can also use &yast;'s <guimenu>Configure &csync;</guimenu>
     module for this task, see
     <xref linkend="sec-ha-installation-setup-csync2"/>.
    </para>
   </step>
   <step>
    <para>
     Run &yast; and open the <guimenu>Windows Domain Membership</guimenu>
     module from the <guimenu>Network Services</guimenu> entry.
    </para>
   </step>
   <step>
    <para>
     Enter your domain or workgroup settings and finish with
     <guimenu>Ok</guimenu>.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec-ha-samba-testing">
  <title>Debugging and testing clustered Samba</title>

  <para>
   To debug your clustered Samba server, the following tools which operate
   on different levels are available:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>ctdb_diagnostics</command>
    </term>
    <listitem>
     <para>
      Run this tool to diagnose your clustered Samba server. Detailed debug
      messages should help you track down any problems you might have.
     </para>
     <para>
      The <command>ctdb_diagnostics</command> command searches for the
      following files which must be available on all nodes:
     </para>
<screen>/etc/krb5.conf
/etc/hosts
/etc/ctdb/nodes
/etc/sysconfig/ctdb
/etc/resolv.conf
/etc/nsswitch.conf
/etc/sysctl.conf
/etc/samba/smb.conf
/etc/fstab
/etc/multipath.conf
/etc/pam.d/system-auth
/etc/sysconfig/nfs
/etc/exports
/etc/vsftpd/vsftpd.conf</screen>
     <para>
      If the files <filename>/etc/ctdb/public_addresses</filename> and
      <filename>/etc/ctdb/static-routes</filename> exist, they will be
      checked as well.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ping_pong</command>
    </term>
    <listitem>
     <para>
      Check whether your file system is suitable for CTDB with
      <command>ping_pong</command>. It performs certain tests of your
      cluster file system like coherence and performance (see
      <link xlink:href="http://wiki.samba.org/index.php/Ping_pong"/>) and
      gives some indication how your cluster may behave under high load.
     </para>
    </listitem>
   </varlistentry>
<!--taroth http://doccomments.provo.novell.com/admin/viewcomment/16631#:-->
   <varlistentry>
    <term><command>send_arp</command> tool and <systemitem class="resource">SendArp</systemitem> resource agent</term>
    <listitem>
     <para>
      The <systemitem class="resource">SendArp</systemitem> resource agent
      is located in <filename>/usr/lib/heartbeat/send_arp</filename> (or
      <filename>/usr/lib64/heartbeat/send_arp</filename>). The
      <command>send_arp</command> tool sends out a gratuitous ARP (Address
      Resolution Protocol) packet and can be used for updating other
      machines' ARP tables. It can help to identify communication problems
      after a failover process. If you cannot connect to a node or ping it
      although it shows the clustered IP address for Samba, use the
      <command>send_arp</command> command to test if the nodes only need an
      ARP table update.
     </para>
     <para>
      For more information, refer to
      <link xlink:href="https://gitlab.com/wireshark/wireshark/-/wikis/home"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   To test certain aspects of your cluster file system proceed as follows:
  </para>

  <procedure>
   <title>Test coherence and performance of your cluster file system</title>
   <step>
    <para>
     Start the command <command>ping_pong</command> on one node and replace
     the placeholder <replaceable>N</replaceable> with the amount of nodes
     plus one. The file
     <filename><replaceable>ABSPATH</replaceable>/data.txt</filename> is
     available in your shared storage and is therefore accessible on all
     nodes (<replaceable>ABSPATH </replaceable> indicates an absolute path):
    </para>
<screen><command>ping_pong</command> <replaceable>ABSPATH</replaceable>/data.txt <replaceable>N</replaceable></screen>
    <para>
     Expect a very high locking rate as you are running only one node. If
     the program does not print a locking rate, replace your cluster file
     system.
    </para>
   </step>
   <step>
    <para>
     Start a second copy of <command>ping_pong</command> on another node
     with the same parameters.
    </para>
    <para>
     Expect to see a dramatic drop in the locking rate. If any of the
     following applies to your cluster file system, replace it:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <command>ping_pong</command> does not print a locking rate per
       second,
      </para>
     </listitem>
     <listitem>
      <para>
       the locking rates in the two instances are not almost equal,
      </para>
     </listitem>
     <listitem>
      <para>
       the locking rate did not drop after you started the second instance.
      </para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>
     Start a third copy of <command>ping_pong</command>. Add another node
     and note how the locking rates change.
    </para>
   </step>
   <step>
    <para>
     Kill the <command>ping_pong</command> commands one after the other. You
     should observe an increase of the locking rate until you get back to
     the single node case. If you did not get the expected behavior, find
     more information in <xref linkend="cha-ha-ocfs2"/>.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec-ha-samba-moreinfo">
  <title>For more information</title>

  <itemizedlist>
   <listitem>
    <para>
     <link xlink:href="http://www.linux-ha.org/doc/man-pages/re-ra-CTDB.html"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="http://wiki.samba.org/index.php/CTDB_Setup"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="http://ctdb.samba.org"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="http://wiki.samba.org/index.php/Samba_%26_Clustering"/>
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
