<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!--taroth 2014-08-13: from fate#316459: Provide haproxy package:

 This is basically a revival of the following feature request: #310633: haproxy on SLES

 HA-Proxy is a fast and reliable proxy application for TCP and HTTP-based
 connections, with a focus on high availability and load balancing. This proxy
 software shares a lot of common features with LVS/ipvsadm, but has significant
 differences in the way it operates and what's possible to do with it.
 Please see the original request for a lot more details.

 Usecase
 While there is significant overlap, haproxy can be used in scenarios where LVS/ipvsadm
 are not adequate and vice versa.
 * SSL termination: the front-end load-balancers can handle the SSL layer and thus the cloud
 nodes do not need to have access to the SSL keys, or could take advantageof SSL accelerators
 in the load balancers.
 * haproxy operates at the application level, allowing the load balancing decisions to be influenced
 by the content stream. This allows for persistence based on cookies and other such filters.

 On the other hand, LVS/ipvsadm cannot be fully replaced:
 * LVS supports "Direct Routing", where the load balancer is only in the inbound stream, whereas the
 outbound traffic is routed to the clients directly. This allows for potentially much higher
 throughput in asymmetric environments.
 * LVS supports stateful connection table replication (via conntrackd). This allows for load-balancer
 failover that is transparent to the client and server.

 Because of their different architectures, it is not feasible to incorporate the functionality of one in
 the other easily.

 HAProxy documentation: http://cbonte.github.io/haproxy-dconv/configuration-1.4.html

 HAProxy is managed with systemd scripts

 ********************************
 other docs that migth be helpful (?):
 https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Load_Balancer_Administration/index.html
-->

<sect1 xml:id="sec.ha.lb.haproxy"
       xmlns="http://docbook.org/ns/docbook"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       version="5.0">
 <title>Configuring Load Balancing with &haproxy;</title>

 <remark>
  This is a straightforward explanation how to set up a HA openSUSE
  13.1 http load balancer, but not using SLE HA tools, but plain
  vanilla openSUSE with vi.
 </remark>

 <para>
  The following section gives an overview of the &haproxy; and how to
  set up on &ha;. The load balancer distributes all requests to its
  back-end servers. It is configured as active/passive, meaning if one
  master fails, the slave becomes the master. In such a scenario, the user
  will not notice any interruption.
 </para>

 <para>
  In this section, we will use the following setup:
 </para>

 <itemizedlist>
  <listitem>
   <para>
    Two load balancers, with the IP addresses &node1; (IP:
    <systemitem class="ipaddress">&subnetI;.100</systemitem>) and
    &node2; (IP:
    <systemitem class="ipaddress">&subnetI;.101</systemitem>)
   </para>
  </listitem>
  <listitem>
   <para>
    A virtual, floating IP address
    <systemitem class="ipaddress">&subnetI;.99</systemitem>
   </para>
  </listitem>
  <listitem>
   <para>
    Our servers (usually for Web content)
    <systemitem class="server">www1.&exampledomain;</systemitem> (IP:
    <systemitem class="ipaddress">&subnetI;.200</systemitem>) and
    <systemitem class="server">www2.&exampledomain;</systemitem> (IP:
    <systemitem class="ipaddress">&subnetI;.201</systemitem>)
   </para>
  </listitem>
 </itemizedlist>

 <para>
  To configure &haproxy;, use the following procedure:
 </para>

 <procedure>
  <step>
   <para>
    Install the <systemitem class="resource">haproxy</systemitem> package.
   </para>
  </step>
  <step>
   <para>
    Create the file <filename>/etc/haproxy/haproxy.cfg</filename> with the
    following contents:
   </para>
   <!--<screen>global
  maxconn 256
  daemon
defaults
  mode    http
  options redispatch
  retries 3
  maxconn 10000
  timeout connect     5000
  timeout client     50000
  timeout server    450000
listen stats
  bind :80
  server www01 www1.&exampledomain;
  server www02 www2.&exampledomain;
  server www03 www3.&exampledomain;</screen>-->
   <remark>toms 2014-09-17: Not sure about all the options.</remark>
   <screen>global <co xml:id="co.ha.lb.global"/>
  maxconn 256
  daemon

defaults <co xml:id="co.ha.lb.defaults"/>
  log     global
  mode    http
  option  httplog
  option  dontlognull
  retries 3
  option redispatch
  maxconn 2000
  timeout connect   5000  <co xml:id="co.ha.lb.timeout.connect"/>
  timeout client    50s   <co xml:id="co.ha.lb.timeout.client"/>
  timeout server    50000 <co xml:id="co.ha.lb.timeout.server"/>

  bind &subnetI;.99:80 <co xml:id="co.ha.lb.listen"/>
  mode http
  stats enable
  stats uri /haproxy?stats
  stats auth someuser:somepassword
  balance leastconn
  cookie JSESSIONID prefix
  option httpclose
  option forwardfor
  option httpchk GET /robots.txt HTTP/1.0
  server webA &subnetI;.200:80 cookie A check
  server webB &subnetI;.201:80 cookie B check</screen>
   <calloutlist>
    <callout arearefs="co.ha.lb.global">
     <para>
      Section which contains process-wide and OS-specific options.
     </para>
     <variablelist>
      <varlistentry>
       <term><option>maxconn</option>
       </term>
       <listitem>
        <para>
         Maximum per-process number of concurrent connections.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><option>daemon</option>
       </term>
       <listitem>
        <para>
         Recommended mode, &haproxy; runs in the background.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </callout>
    <callout arearefs="co.ha.lb.defaults">
     <para>
      Section which sets default parameters for all other sections
      following its declaration. Some important lines:
     </para>
     <variablelist>
      <varlistentry>
       <term><option>redispatch</option>
       </term>
       <listitem>
        <para>
         Enables or disables session redistribution in case of connection
         failure.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><option>log</option>
       </term>
       <listitem>
        <para>
         Enables logging of events and traffic.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>mode http</literal>
       </term>
       <listitem>
        <para>
         Operates in HTTP mode (recommended mode for &haproxy;). In this
         mode, a request will be analyzed before a connection to any server
         is performed. Request that are not RFC-compliant will be rejected.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>option forwardfor</literal>
       </term>
       <listitem>
        <para>
         Adds the HTTP <option>X-Forwarded-For</option> header into the
         request. You need this option if you want to preserve the client's
         IP address.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </callout>
    <callout arearefs="co.ha.lb.timeout.connect">
     <para>The maximum time to wait for a connection attempt to a server
      to succeed.
     </para>
    </callout>
    <callout arearefs="co.ha.lb.timeout.client">
     <para>The maximum time of inactivity on the client side.</para>
    </callout>
    <callout arearefs="co.ha.lb.timeout.server">
     <para>The maximum time of inactivity on the server side.</para>
    </callout>
    <callout arearefs="co.ha.lb.listen">
     <para>
      Section which combines front-end and back-end sections in one.
     </para>
     <variablelist>
      <varlistentry>
       <term><literal>balance leastconn</literal>
       </term>
       <listitem>
        <para>
         Defines the load balancing algorithm, see
         <link xlink:href="http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4-balance"/>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>stats enable</literal>
       </term>
       <term><literal>stats auth</literal>
       </term>
       <listitem>
        <para>
         Enables statistics reporting (by <literal>stats enable</literal>).
         The <option>auth</option> option logs statistics with
         authentication to a specific account.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </callout>
   </calloutlist>
  </step>
  <step>
   <para>
    Test your configuration file:
   </para>
   <screen>&prompt.root;<command>haproxy</command> -f /etc/haproxy/haproxy.cfg -c</screen>
  </step>
  <step>
   <para>
    Add the following line to &csync;'s configuration file
    <filename>/etc/csync2/csync2.cfg</filename> to make sure the
    &haproxy; configuration file is included:
   </para>
   <screen>include /etc/haproxy/haproxy.cfg</screen>
  </step>
  <step>
   <para>
    Synchronize it:
   </para>
   <screen>&prompt.root;<command>csync2</command> -f /etc/haproxy/haproxy.cfg
&prompt.root;<command>csync2</command> -xv</screen>
   <note>
    <para>
     The &csync; configuration part assumes that the HA nodes were
     configured using <command>ha-cluster-bootstrap</command>. For details,
     see the &instquick;.
    </para>
   </note>
  </step>
  <step>
   <para>
    Make sure &haproxy; is disabled on both load balancers
    (<systemitem class="server">&node1;</systemitem> and
    <systemitem class="server">&node2;</systemitem>) as it is started by
    &pace;:
   </para>
   <screen>&prompt.root;<command>systemctl</command> disable haproxy</screen>
  </step>
  <step>
   <para>
    Configure a new CIB:
   </para>
   <remark>toms 2014-09-16: According to Kristoffer: "This is the crmsh
    configuration (edited using crm configure). It is possible to do a
    similar configuration in hawk, but with the graphical interface.
    I think it can be improved, I will get back to you with more details
    :)"</remark>
   <screen>&prompt.root;<command>crm</command> configure
&prompt.crm;<command>cib</command> new haproxy-config
&prompt.crmhp;<command>primitive</command> haproxy systemd:haproxy op monitor interval=10s
&prompt.crmhp;<command>primitive</command> vip-www1 IPaddr2 params ip=&subnetI;.100
&prompt.crmhp;<command>primitive</command> vip-www2 IPaddr2 params ip=&subnetI;.101
&prompt.crmhp;<command>group</command> g-haproxy vip-www1 vip-www2 haproxy</screen>
  </step>
  <step>
   <para>
    Verify the new CIB and correct any errors:
   </para>
   <screen>&prompt.crmhp;<command>verify</command></screen>
  </step>
  <step>
   <para>
    Commit the new CIB:
   </para>
   <screen>&prompt.crmhp;<command>cib</command> use live
&prompt.crm;<command>cib</command> commit haproxy-config</screen>
  </step>
 </procedure>
</sect1>
