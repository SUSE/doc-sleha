<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
  type="text/xml"
  title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<!--
 This Quick Start should link to the "Installation and Setup Quick Start"
 which covers the installation and setup of a two-node cluster.
 Follow-on steps (DRBD, LVM & NFS) are covered here.
-->
<article version="5.0" xml:lang="en" xml:id="article-nfs-storage"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:dm="urn:x-suse:ns:docmanager"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>&nfsquick;</title>
 <info>
  <productnumber>&productnumber;</productnumber>
  <productname>&productname;</productname>
  <date><?dbtimestamp?></date>
  <xi:include href="ha_authors.xml"/>
  <abstract>
   <para>
    &abstract-nfsquick;
   </para>
  </abstract>
 </info>

 <sect1 xml:id="sec-ha-quick-nfs-usagescenario">
  <title>Usage scenario</title>
  <para>
   This document will help you set up a highly available NFS server.
   The cluster used to for the highly available NFS storage has the
   following properties:
  </para>

  <itemizedlist>
   <!-- Taken from art_sle_ha_install_quick.xml: -->
   <listitem>
    <para>
     Two nodes: <systemitem class="server">&node1;</systemitem> (IP: <systemitem
      class="ipaddress">&subnetI;.1</systemitem>)
     and <systemitem class="server">&node2;</systemitem> (IP: <systemitem
      class="ipaddress">&subnetI;.2</systemitem>),
     connected to each other via network.
    </para>
   </listitem>
   <listitem>
    <para>
     Two floating, virtual IP addresses (<systemitem class="ipaddress"
      >&nfs-vip-hawk;</systemitem> and <systemitem class="ipaddress"
      >&nfs-vip-exports;</systemitem>), allowing clients to connect to
     the service no matter which physical node it is running on.
     One IP address is used for cluster administration with &hawk2;, the other
     IP address is used exclusively for the NFS exports.
    </para>
   </listitem>
   <listitem>
    <para>A shared storage device, used as an SBD fencing mechanism.
     This avoids split brain scenarios.
    </para>
   </listitem>
   <listitem>
    <para>
     Failover of resources from one node to the other if the active host breaks
     down (<emphasis>active/passive</emphasis> setup).
    </para>
   </listitem>
   <listitem>
    <para>
     Local storage on each host. The data is synchronized between the
     hosts using DRBD on top of LVM.
    </para>
   </listitem>
   <listitem>
    <para>
      A file system exported through NFS.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   After installing and setting up the basic two-node cluster, and extending it
   with storage and cluster resources for NFS, you will have a highly
   available NFS storage server.
  </para>
 </sect1>

 <sect1 xml:id="sec-ha-quick-nfs-installation">
  <title>Installing a basic two-node cluster</title>
  <para>
   Before you proceed, install and set up a basic two-node cluster. This task is
   described in <citetitle>&instquick;</citetitle>. The &instquick; describes
   how to use the &crmshell; to set up a
   cluster with minimal effort.
  </para>
 </sect1>

 <sect1 xml:id="sec-ha-quick-nfs-lvm">
   <title>Creating an LVM device</title>
   <para>LVM (<emphasis>Logical Volume Manager</emphasis>) enables
    flexible distribution of hard disk space over several file
    systems.
   </para>
   <para>To prepare your disks for LVM, do the following:</para>
   <procedure>
    <step>
     <para>
      Create an LVM volume group and replace <filename>/dev/sdb1</filename>
      with your corresponding device for LVM:</para>
     <screen>&prompt.root;<command>pvcreate</command> /dev/sdb1</screen>
    </step>
    <step>
     <para>Create an LVM Volume Group <systemitem>nfs</systemitem>
            that includes this physical volume: </para>
     <screen>&prompt.root;<command>vgcreate</command> nfs /dev/sdb1</screen>
    </step>
    <step>
      <para>
       Create one or more logical volumes in the volume group
       <systemitem>nfs</systemitem>. This example assumes a 20 gigabyte volume,
        named <systemitem>work</systemitem>:
      </para>
      <screen>&prompt.root;<command>lvcreate</command> -n work -L 20G nfs</screen>
     </step>
     <step>
      <para>
       Activate the volume group<!-- and create file systems on the new logical
       volumes. This example assumes <literal>ext3</literal> as the file
       system type-->: </para>
<screen>&prompt.root;<command>vgchange</command> -ay nfs</screen>
     </step>
   </procedure>
   <para>After you have successfully executed the above steps, your system
    will make visible the following device: <filename>/dev/<replaceable
     >VOLGROUP</replaceable>/<replaceable
      >LOGICAL_VOLUME</replaceable></filename>.
    In this case it will be <filename>/dev/nfs/work</filename>.
   </para>
  </sect1>

 <sect1 xml:id="sec-ha-quick-nfs-drbd-device">
   <title>Creating a DRBD device</title>
   <para>
    This section describes how to set up a DRBD device on top of LVM. The
    configuration of LVM as a back-end of DRBD has some benefits:
   </para>
  <itemizedlist>
   <listitem>
    <para>Easier setup than with LVM on top of DRBD.</para>
   </listitem>
   <listitem>
    <para>Easier administration in case the LVM disks need to be resized or
     more disks are added to the volume group.
    </para>
   </listitem>
  </itemizedlist>
  <para>
    As the LVM volume group is named <literal>nfs</literal>, the
    DRBD resource uses the same name.
   </para>

   <sect2 xml:id="sec-ha-quick-nfs-drbd-config">
    <title>Creating DRBD configuration</title>
    <para>
     For consistency reasons, it is highly recommended to follow this advice:
    </para>

    <itemizedlist>
     <listitem>
      <para>Use the directory <filename>/etc/drbd.d/</filename> for your
      configuration.</para>
     </listitem>
     <listitem>
      <para>Name the file according to the purpose of the resource.
      </para>
     </listitem>
     <listitem>
      <para>Put your resource configuration in a file with a <filename
       class="extension">.res</filename> extension. In the following
        examples, the file <filename>/etc/drbd.d/nfs.res</filename> is
        used.
      </para>
     </listitem>
    </itemizedlist>

    <para>
     Proceed as follows:
    </para>
    <procedure>
     <title>Creating a DRBD configuration</title>
     <step>
      <para>
       Create the file <filename>/etc/drbd.d/nfs.res</filename> with the
        following contents:
      </para>
      <!--<remark>toms 2016-07-25: TODO bsc#981560</remark>-->
<screen>resource nfs {
   device /dev/drbd0; <co xml:id="co-ha-quick-nfs-drbd-device"/>
   disk   /dev/nfs/work; <co xml:id="co-ha-quick-nfs-drbd-disk"/>
   meta-disk internal; <co xml:id="co-ha-quick-nfs-drbd-metadisk"/>

   net {
      protocol  C; <co xml:id="co-ha-quick-nfs-drbd-protocol"/>
      fencing resource-and-stonith;
   }

   handlers { <co xml:id="co-ha-quick-nfs-fencing-handlers"/>
      fence-peer "/usr/lib/drbd/crm-fence-peer.9.sh";
      after-resync-target "/usr/lib/drbd/crm-unfence-peer.9.sh";
      # ...
   }

   connection-mesh { <co xml:id="co-ha-quick-nfs-connectionmesh"/>
      hosts     &node1; &node2;;
   }
   on &node1; { <co xml:id="co-ha-quick-nfs-drbd-on"/>
      address   &subnetI;.1:&drbd.port;;
      node-id   0;
   }
   on &node2; { <xref linkend="co-ha-quick-nfs-drbd-on"/>
      address   &subnetI;.2:&drbd.port;;
      node-id   1;
   }
}</screen>
      <calloutlist>
       <callout arearefs="co-ha-quick-nfs-drbd-device">
        <para>The DRBD device that applications are supposed to access.</para>
       </callout>
       <callout arearefs="co-ha-quick-nfs-drbd-disk">
        <para>The lower-level block device used by DRBD to store the actual
         data. This is the LVM device that was created in <xref
          linkend="sec-ha-quick-nfs-lvm"/>.
        </para>
       </callout>
       <callout arearefs="co-ha-quick-nfs-drbd-metadisk">
        <para>Where the metadata format is stored. Using
         <literal>internal</literal>, the metadata is stored together with
         the user data on the same device. See the man page for further
         information.
        </para>
       </callout>
       <callout arearefs="co-ha-quick-nfs-drbd-protocol">
        <para>The specified protocol to be used for this connection. For protocol
         <literal>C</literal>, a write is considered to be complete when
         it has reached all disks, be they local or remote.
        </para>
       </callout>
       <callout arearefs="co-ha-quick-nfs-fencing-handlers">
        <para>
         Enables resource-level fencing. If the DRBD replication link
         becomes disconnected, &pace; tries to promote the DRBD resource
         to another node. During this process, the scripts were called.
         See <xref linkend="sec-ha-drbd-fencing"/> for more
         information.
        </para>
       </callout>
       <callout arearefs="co-ha-quick-nfs-connectionmesh">
        &drbd-connection-mesh;
       </callout>
       <callout arearefs="co-ha-quick-nfs-drbd-on">
        <para>Contains the IP address and a unique identifier for each node.</para>
       </callout>
      </calloutlist>
     </step>
     <step>
      <para>
       Open <filename>/etc/csync2/csync2.cfg</filename> and check whether the
       following two lines exist:
      </para>
<screen>include /etc/drbd.conf;
include /etc/drbd.d/*.res;</screen>
      <para>
       If not, add them to the file.
      </para>
     </step>
     <step>
      <para>
       Copy the file to the other nodes:
      </para>
<screen>&prompt.root;<command>csync2</command> -xv</screen>
      <para>
       For information about &csync;, refer to
       <xref linkend="sec-ha-installation-setup-csync2"/>.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 xml:id="sec-ha-quick-nfs-drbd-activate">
    <title>Activating the DRBD device</title>
    <para>
     After you have prepared your DRBD configuration, proceed as follows:
    </para>

    <!--
    Taken some steps from https://github.com/SUSE/doc-sleha/commit/5bb10f7fc6
    -->
    <procedure>
     <step>
      <para> If you use a firewall in your cluster, open port
              <systemitem>&drbd.port;</systemitem> in your firewall configuration. </para>
     </step>
     <step>
      <para>The first time you do this, execute the following
        commands on <emphasis>both</emphasis> nodes (in our example, <systemitem>&node1;</systemitem>
        and <systemitem>&node2;</systemitem>):
      </para>
<screen>&prompt.root;<command>drbdadm</command> create-md nfs
&prompt.root;<command>drbdadm</command> up nfs</screen>
      <para> This initializes the metadata storage and creates the
              <filename>/dev/drbd0</filename> device.
      </para>
     </step>
     <step>
      <para>
       If the DRBD devices on all nodes have the same data, skip
       the initial resynchronization. Use the following command:
      </para>
      <screen>&prompt.root;<command>drbdadm</command
              > new-current-uuid --clear-bitmap nfs/0</screen>
     </step>
     <step>
       <para>Make <systemitem>&node1;</systemitem> primary:</para>
       <screen>&prompt.root;<command>drbdadm</command> primary --force nfs</screen>
     </step>
      <step>
       <para>Check the DRBD status:</para>
       <screen>&prompt.root;<command>drbdadm</command> status nfs</screen>
       <para>This returns the following message:</para>
          <screen>nfs role:Primary
  disk:UpToDate
  &node1; role:Secondary
    peer-disk:UpToDate</screen>
     </step>
    </procedure>
    <para>
     After the synchronization is complete, you can access the DRBD resource
     on the block device <filename>/dev/drbd0</filename>. Use this device
     for creating your file system.
     Find more information about DRBD in <xref linkend="cha-ha-drbd"/>.
     </para>
   </sect2>

   <sect2 xml:id="sec-ha-quick-nfs-drbd-createfs">
    <title>Creating the file system</title>
    <para>After you have finished <xref
      linkend="sec-ha-quick-nfs-drbd-activate"/>,
    you should see a DRBD device on <filename>/dev/drbd0</filename>:
    </para>
    <screen>&prompt.root;<command>mkfs.ext3</command> /dev/drbd0</screen>
   </sect2>
  </sect1>

 <sect1 xml:id="sec-ha-quick-nfs-initial-pacemaker">
  <title>Adjusting Pacemaker's configuration</title>
  &failback-nodes;
  <para>
    To adjust the option, open the &crmshell; as &rootuser; (or any
    non-&rootuser; user that is part of the
    <systemitem class="groupname">haclient</systemitem> group) and run the
    following commands:
   </para>
   <screen>&prompt.root;<command>crm</command> configure
&prompt.crm.conf;<command>rsc_defaults</command> resource-stickiness="200"
&prompt.crm.conf;<command>commit</command></screen>

<!--
   <formalpara>
   <title>With &hawk2;</title>
   <para>
   To adjust the option in &hawk2;, click <guimenu>Cluster Configuration</guimenu>.
   In the text field <guimenu>resource-stickiness</guimenu> enter
   <literal>200</literal>. Confirm with <guimenu>Apply</guimenu>.
  </para>
  </formalpara>
-->
   <para>
    For more information about global cluster options, refer to
    <xref linkend="sec-ha-config-basics-global"/>.
   </para>
 </sect1>

 <sect1 xml:id="sec-ha-quick-nfs-resources">
  <title>Creating cluster resources<!-- for an HA NFS Server--></title>
  <para>The following sections cover the configuration of
    the required resources for a highly available NFS cluster.
    The configuration steps use the &crmshell;.
    The following list shows the necessary cluster resources:
  </para>
  <variablelist xml:id="vl-ha-quick-nfs-overview-cluster-res">
   <title>Overview of cluster resources</title>
   <varlistentry>
    <term>DRBD primitive and promotable clone resources</term>
    <listitem>
     <para>
      These resources are used to replicate data. The promotable clone resource
      is switched from and to the Primary and Secondary roles as deemed
      necessary by the cluster resource manager.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>NFS kernel server resource</term>
    <listitem>
     <para>
      With this resource, Pacemaker ensures that the NFS server daemons are
      always available.
     </para>
    </listitem>
   </varlistentry>
   <!--<varlistentry>
    <term>NFSv4 virtual file system root</term>
    <listitem>
     <para>
      A virtual NFS root export (only needed for NFSv4 clients).
     </para>
    </listitem>
   </varlistentry>-->
   <varlistentry>
    <term>NFS exports</term>
    <listitem>
     <para>
      One or more NFS exports, typically corresponding to the file system.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <itemizedlist>
    <title>Example NFS scenario</title>
    <listitem>
        <para>The following configuration examples assume that
         <systemitem class="ipaddress">&nfs-vip-exports;</systemitem> is the virtual
         IP address to use for an NFS server which serves clients in the
         <systemitem class="ipaddress">&subnetII;.x/24</systemitem> subnet.</para>
    </listitem>
    <listitem>
        <para>The service <!--hosts an NFSv4 virtual file system root
        from <literal>/srv/nfs</literal>, with--> exports data served from
         <literal>/srv/nfs/work</literal>. </para>
    </listitem>
    <listitem>
        <para>Into this export directory, the cluster will mount
            <literal>ext3</literal> file systems from the DRBD device
         <filename>/dev/drbd0</filename>.
         This DRBD device sits on top of an LVM logical volume with the name
         <literal>nfs</literal>.
        </para>
    </listitem>
  </itemizedlist>

  <sect2 xml:id="sec-ha-quick-nfs-resources-drbd">
   <title>DRBD primitive and promotable clone resource</title>
   <para>
    To configure these resources, run the following commands from the
   &crmshell;:
   </para>
<screen>&prompt.crm;<command>configure</command>
&prompt.crm.conf;<command>primitive</command> drbd_nfs \
  ocf:linbit:drbd \
    params drbd_resource="nfs" \
  op monitor interval="15" role="Promoted" \
  op monitor interval="30" role="Unpromoted"
&prompt.crm.conf;<command>clone</command> clone-drbd_nfs drbd_nfs \
  meta promotable="true" promoted-max="1" promoted-node-max="1" clone-max="2" \
  clone-node-max="1" notify="true"
&prompt.crm.conf;<command>commit</command></screen>
   <para>
    This will create a Pacemaker promotable clone resource corresponding to the
    DRBD resource <literal>nfs</literal>. Pacemaker should now activate your
    DRBD resource on both nodes and promote it to the primary role on one of
    them.
   </para>
   <para>
    Check the state of the cluster with the <command>crm status</command>
     command, or run <command>drbdadm status</command>.
   </para>
  </sect2>

  <sect2 xml:id="sec-ha-quick-nfs-resources-nfsserver">
   <title>NFS kernel server resource</title>
   <para>
    In the &crmshell;, the resource for the NFS server
    daemons must be configured as a <emphasis>clone</emphasis> of a
    <literal>systemd</literal> resource type.
   </para>
<screen>&prompt.crm.conf;<command>primitive</command> nfsserver \
  systemd:nfs-server \
  op monitor interval="30s"
&prompt.crm.conf;<command>clone</command> cl-nfsserver nfsserver \
   meta interleave=true
&prompt.crm.conf;<command>commit</command></screen>
   <para>
    After you have committed this configuration, Pacemaker should start the
    NFS Kernel server processes on both nodes.
   </para>
  </sect2>

  <sect2 xml:id="sec-ha-quick-nfs-resources-lvm">
   <title>File system resource</title>
   <orderedlist>
    <listitem>
     <para>
      Configure the file system type resource as follows (but
      <emphasis>do not</emphasis> commit this configuration yet):
     </para>
<screen>&prompt.crm.conf;<command>primitive</command> fs_work \
  ocf:heartbeat:Filesystem \
  params device=/dev/drbd0 \
    directory=/srv/nfs/work \
    fstype=ext3 \
  op monitor interval="10s"</screen>
    </listitem>
    <listitem>
     <para>
      Combine these resources into a Pacemaker resource
      <emphasis>group</emphasis>:
     </para>
<screen>&prompt.crm.conf;<command>group</command> g-nfs fs_work</screen>
    </listitem>
    <listitem>
     <para>
      Add the following constraints to make sure that the group is started
      on the same node on which the DRBD promotable clone resource is in the
      primary role:
     </para>
<screen>&prompt.crm.conf;<command>order</command> o-drbd_before_nfs Mandatory: \
  clone-drbd_nfs:promote g-nfs:start
&prompt.crm.conf;<command>colocation</command> col-nfs_on_drbd inf: \
  g-nfs clone-drbd_nfs:Promoted</screen>
    </listitem>
    <listitem>
     <para>
      Commit this configuration:
     </para>
<screen>&prompt.crm.conf;<command>commit</command></screen>
    </listitem>
   </orderedlist>
   <para>
    After these changes have been committed, Pacemaker mounts the DRBD device
    to <filename>/srv/nfs/work</filename> on the same node. Confirm this with
    <command>mount</command> (or by looking at <filename
     >/proc/mounts</filename>).
   </para>
  </sect2>

  <sect2 xml:id="sec-ha-quick-nfs-resources-nfsexport">
   <title>NFS export resources</title>
   <para>
    When your DRBD, LVM, and file system resources are working properly,
    continue with the resources managing your NFS exports. To create highly
    available NFS export resources, use the <literal>exportfs</literal>
    resource type.
   </para>

<!-- According to Neal, this is can be removed completely

   <sect3 xml:id="sec-ha-quick-nfs-resources-nfsexport-nfsv4root">
    <title>NFSv4 virtual file system root</title>
    <para>
     If clients exclusively use NFSv3 to connect to the server, you do not
     need this resource. In this case, continue with
     <xref linkend="sec-ha-quick-nfs-resources-nfsexport-nonroot"/>.
    </para>
    <orderedlist>
     <listitem>
      <para>
       Create a virtual NFSv4 file system:
      </para>
<screen>&prompt.crm.conf;<command>primitive</command> exportfs_root \
  ocf:heartbeat:exportfs \
  params directory="/srv/nfs" fsid=0 \
    options="rw,crossmnt" \
    clientspec="&nfs-clientspec;" \<!-\- 10.9.9.0/24 -\->
  op monitor interval="30s"
&prompt.crm.conf;<command>clone</command> cl-exportfs_root exportfs_root</screen>
      <remark>toms 2016-09-01: What clientspec should be used here?</remark>
      <para>
       This resource does not hold any actual NFS-exported data, merely the
       empty directory (<filename>/srv/nfs</filename>) that the other NFS
       exports are mounted into. Since there is no shared data involved
       here, you can safely <emphasis>clone</emphasis> this resource.
      </para>
     </listitem>
     <listitem>
      <para>
       Since any data should be exported only on nodes where this clone has
       been properly started, add the following constraints to the
       configuration:
      </para>
<screen>&prompt.crm.conf;<command>order</command> o-root_before_nfs Mandatory: \
  cl-exportfs_root g-nfs:start
&prompt.crm.conf;<command>colocation</command> c-nfs_on_root inf: \
  g-nfs cl-exportfs_root
&prompt.crm.conf;<command>commit</command></screen>
      <para>
       After this, Pacemaker should start the NFSv4 virtual file system root
       on both nodes.
      </para>
     </listitem>
     <listitem>
      <para>
       Check the output of the <command>exportfs -v</command> command to
       verify this:
      </para>
      <screen>&prompt.root;<command>exportfs</command> -v
/srv/nfs/work   <replaceable>IP_ADDRESS_OF_CLIENT</replaceable>(...)
/srv/nfs        <replaceable>IP_ADDRESS_OF_CLIENT</replaceable>(...)</screen>
     </listitem>
    </orderedlist>
   </sect3>
-->

<!--   <sect3 xml:id="sec-ha-quick-nfs-resources-nfsexport-nonroot">
    <title>NFS exports</title>-->
    <para>
     To export the <filename>/srv/nfs/work</filename> directory to clients,
     use the following primitive:
    </para>
    <orderedlist>
     <listitem>
      <para>
       Create NFS exports with the following commands:
      </para>
<screen>&prompt.crm.conf;<command>primitive</command> exportfs_work \
  ocf:heartbeat:exportfs \
    params directory="/srv/nfs/work" \
      options="rw,mountpoint" \
      clientspec="&nfs-clientspec;" \
      wait_for_leasetime_on_stop=true \
      fsid=100 \
  op monitor interval="30s"</screen>
     </listitem>
     <listitem>
      <para>
       After you have created these resources, append them to the existing
       <literal>g-nfs</literal> resource group:
      </para>
<screen>&prompt.crm.conf;<command>modgroup</command> g-nfs add exportfs_work</screen>
     </listitem>
     <listitem>
      <para>
       Commit this configuration:
      </para>
<screen>&prompt.crm.conf;<command>commit</command></screen>
      <para>
       Pacemaker will export the NFS virtual file system root and the two
       other exports.
      </para>
     </listitem>
     <listitem>
      <para>
       Confirm that the NFS exports are set up properly:
      </para>
<screen>&prompt.root;<command>exportfs</command> -v
/srv/nfs/work   <replaceable>IP_ADDRESS_OF_CLIENT</replaceable>(<replaceable>OPTIONS</replaceable>)<!--
/srv/nfs        <replaceable>IP_ADDRESS_OF_CLIENT</replaceable>(<replaceable>OPTIONS</replaceable>)--></screen>
     </listitem>
    </orderedlist>
   <!--</sect3>-->
  </sect2>

  <sect2 xml:id="sec-ha-quick-nfs-resources-vip">
   <title>Virtual IP address for NFS exports</title>
   <para>
    The initial installation creates an administrative virtual IP address for
    &hawk2;. Although you could use this IP address for your NFS exports too,
    create another one exclusively for NFS exports. This makes it easier to
    apply security restrictions later. Use the following commands in the
    &crmshell;:
   </para>
   <screen>&prompt.crm.conf;<command>primitive</command> vip_nfs IPaddr2 \
   params ip=&nfs-vip-exports; cidr_netmask=24 \
   op monitor interval=10 timeout=20
&prompt.crm.conf;<command>modgroup</command> g-nfs add vip_nfs
&prompt.crm.conf;<command>commit</command></screen>
  </sect2>
 </sect1>

 <!-- toms 2015-10-23: This is an attempt to descript how to set up
      a HA NFS cluster with cluster scripts

      toms 2016-08-23: Still disabled for the time being as not really finished
   -->
 <!--<xi:include href="nfs_quick_clusterscript.xml"/>-->

 <sect1 xml:id="sec-ha-quick-nfs-use">
  <title>Using the NFS service</title>
  <para>
   This section outlines how to use the highly available NFS service from an
   NFS client.
  </para>
  <para>
   To connect to the NFS service, make sure to use the <emphasis>virtual IP
   address</emphasis> to connect to the cluster rather than a physical IP
   configured on one of the cluster nodes' network interfaces. For compatibility
   reasons, use the <emphasis>full</emphasis> path of the NFS export on the server.
  </para>

  <para>In its simplest form, the command to mount the NFS export looks like
   this:</para>
  <screen>&prompt.root;<command>mount</command> -t nfs &nfs-vip-exports;:/srv/nfs/work /home/work</screen>
  <para>
   To configure a specific transport protocol (<option>proto</option>)
   and maximum read and write request sizes (<option>rsize</option> and
    <option>wsize</option>), use:
  </para>
  <screen>&prompt.root;<command>mount</command> -o rsize=32768,wsize=32768 \
    &nfs-vip-exports;:/srv/nfs/work /home/work</screen>
  <para>
   In case you need to be compatible with NFS version&nbsp;3, include the value
   <option>vers=3</option> after the <option>-o</option> option.
  </para>
  <para>
   For further NFS mount options, consult the <command>nfs</command> man page.
  </para>
 </sect1>
 <xi:include href="common_copyright_quick.xml"/>
 <xi:include href="common_legal.xml"/>
 </article>
