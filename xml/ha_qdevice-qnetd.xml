<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<!--

-->
<chapter version="5.0" xml:id="cha-ha-qdevice"
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink">
   <title>QDevice and QNetd</title>
   <info>
      <abstract>
         <para>
            &qdevice; and &qnet; participate in quorum decisions. With
            assistance from the arbitrator <systemitem class="daemon">corosync-qnetd</systemitem>,
            <systemitem class="daemon">corosync-qdevice</systemitem> provides
            a configurable number of votes, allowing a cluster to sustain
            more node failures than the standard quorum rules allow. We
            recommend deploying <systemitem class="daemon">corosync-qnetd</systemitem>
            and <systemitem class="daemon">corosync-qdevice</systemitem> for
            clusters with an even number of nodes, and especially for two-node clusters.
         </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
         <dm:maintainer/>
         <dm:status>editing</dm:status>
         <dm:deadline/>
         <dm:priority/>
         <dm:translation>yes</dm:translation>
         <dm:languages/>
         <dm:release/>
         <dm:repository/>
      </dm:docmanager>
   </info>

   <sect1 xml:id="sec-ha-qdevice-overview">
      <title>Conceptual overview</title>
      <para>
         In comparison to calculating quora among cluster nodes, the
         &qdevice;-and-&qnet; approach has the following benefits:
      </para>

      <itemizedlist>
         <listitem>
            <para>
               It provides better sustainability in case of node failures.
            </para>
         </listitem>
         <listitem>
            <para>
               You can write your own heuristics scripts to affect votes.
               This is especially useful for complex setups, such as SAP applications.
            </para>
         </listitem>
         <listitem>
            <para>
               It enables you to configure a &qnet; server to provide
               votes for multiple clusters.
            </para>
         </listitem>
         <listitem>
            <para>
               It allows using diskless SBD for two-node clusters.
            </para>
         </listitem>
         <listitem>
            <para>
               It helps with quorum decisions for clusters with an even number of
               nodes under split-brain situations, especially for two-node clusters.
            </para>
         </listitem>
      </itemizedlist>

      <para>
        A setup with &qdevice;/&qnet; consists of the following components and
         mechanisms:
      </para>

      <variablelist>
         <title>&qdevice;/&qnet; components and mechanisms</title>
         <varlistentry>
            <term>&qnet; (<systemitem class="daemon">corosync-qnetd</systemitem>)</term>
            <listitem>
               <para>
                  A systemd service (a daemon, the <quote>&qnet; server</quote>) which
                  is not part of the cluster.
                  The systemd service provides a vote to the <systemitem
                     class="daemon">corosync-qdevice</systemitem> daemon.
               </para>
               <para>
                  To improve security, <systemitem class="daemon">corosync-qnetd</systemitem>
                  can work with TLS for client certificate checking.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>&qdevice; (<systemitem class="daemon">corosync-qdevice</systemitem>)</term>
            <listitem>
               <para>
                  A systemd service (a daemon) on each cluster node running together with
                  &corosync;. This is the client of <systemitem>corosync-qnetd</systemitem>.
                  Its primary use is to allow a cluster to sustain more node failures than
                  standard quorum rules allow.
               </para>
               <para>
                  &qdevice; is designed to work with different arbitrators. However, currently,
                  only &qnet; is supported.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>Algorithms</term>
            <listitem>
               <para>
                  &qdevice; supports different algorithms, which determine the behavior
                  of how votes are assigned.
                  Currently, the following exist:
               </para>
               <itemizedlist>
                  <listitem>
                     <para>
                        FFSplit (<quote>fifty-fifty split</quote>) is the default. It is used
                        for clusters with an even number of nodes. If the cluster splits
                        into two similar partitions, this algorithm provides one vote to one of
                        the partitions, based on the results of heuristics checks and
                        other factors.
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                       LMS (<quote>last man standing</quote>) allows the only
                        remaining node that can see the &qnet; server to get the votes.
                        So this algorithm is useful when a cluster with only one
                        active node should remain quorate.
                     </para>
                  </listitem>
               </itemizedlist>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>Heuristics</term>
            <listitem>
               <para>
                  &qdevice; supports a set of commands (<quote>heuristics</quote>).
                  The commands are executed locally on start-up of cluster services,
                  cluster membership change, successful connection to <systemitem
                  class="daemon">corosync-qnetd</systemitem>, or, optionally, at
                  regular times.
                  The heuristics can be set with the <parameter>quorum.device.heuristics</parameter>
                  key (in the <filename>corosync.conf</filename> file) or with the
                  <option>--qdevice-heuristics-mode</option> option.
                  Both know the values <literal>off</literal> (default),
                  <literal>sync</literal>, and <literal>on</literal>.
                  The difference between <literal>sync</literal> and <literal>on</literal>
                  is that you can additionally execute the above commands regularly.
               </para>
               <para>
                  Only if all commands are executed successfully are the heuristics
                  considered to have passed; otherwise, they failed. The heuristics' result is
                  sent to <systemitem class="daemon">corosync-qnetd</systemitem> where
                  it is used in calculations to determine which partition should be quorate.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>Tiebreaker</term>
            <listitem>
               <para>
                  This is used as a fallback if the cluster partitions are completely
                  equal even with the same heuristics results. It can be configured
                  to be the lowest, the highest, or a specific node ID.
               </para>
            </listitem>
         </varlistentry>
      </variablelist>
   </sect1>

   <sect1 xml:id="sec-ha-qdevice-require">
      <title>Requirements and prerequisites</title>
      <para>
         Before setting up &qdevice; and &qnet;, you need to prepare the
         environment as follows:
      </para>
      <itemizedlist>
         <listitem>
            <remark>toms 2020-05-14: See also bsc#1171681</remark>
            <para>
               In addition to the cluster nodes, you have a separate machine
               which will become the &qnet; server.
               See <xref linkend="sec-ha-qdevice-setup-qnetd"/>.
            </para>
         </listitem>
         <listitem>
            <para>
               A different physical network than the one that &corosync; uses.
               It is recommended for &qdevice; to reach the &qnet; server.
               Ideally, the &qnet; server should be in a separate rack than the
               main cluster, or at least on a separate PSU and not in the same
               network segment as the Corosync ring or rings.
            </para>
         </listitem>
      </itemizedlist>
   </sect1>

   <sect1 xml:id="sec-ha-qdevice-setup-qnetd">
      <title>Setting up the &qnet; server</title>
      <para>
         The &qnet; server is not part of the cluster stack, and it is also
         not a real member of your cluster. As such, you cannot move resources
         to this server.
      </para>
      <para>
         The &qnet; server is almost <quote>state free</quote>. Usually, you do not need to
         change anything in the configuration file <filename>/etc/sysconfig/corosync-qnetd</filename>.
         By default, the <package>corosync-qnetd</package> service runs the daemon
         as user <systemitem class="username">coroqnetd</systemitem>
         in the group <systemitem class="groupname">coroqnetd</systemitem>. This avoids
         running the daemon as &rootuser;.
      </para>
      <para>
         To create a &qnet; server, proceed as follows:
      </para>
      <procedure>
         <step>
            <para>
               On the machine that will become the  &qnet; server, install
               &sls; &productnumber;.
            </para>
         </step>
         <step>
          <para>
           Enable the &productname; using the command listed in
           <command>SUSEConnect --list-extensions</command>.
          </para>
         </step>
         <step>
            <para>
               Install the <package>corosync-qnetd</package> package:
            </para>
            <screen>&prompt.root;<command>zypper</command> install corosync-qnetd</screen>
            <para>
               You do not need to manually start the
               <systemitem class="daemon">corosync-qnetd</systemitem> service.
               It will be started automatically when you configure &qdevice; on
               the cluster.
      </para>
         </step>
      </procedure>

      <para>
         Your &qnet; server is ready to accept connections from a &qdevice; client
         <systemitem>corosync-qdevice</systemitem>.
         Further configuration is not needed.
      </para>
   </sect1>

   <sect1 xml:id="sec-ha-qdevice-qdevice">
      <title>Connecting &qdevice; clients to the &qnet; server</title>
      <para>
         After you set up your &qnet; server, you can set up and run the clients.
         You can connect the clients to the &qnet; server during the installation
         of your cluster, or you can add them later. This procedure documents how
         to add them later.
      </para>
      <procedure>
         <step>
            <para>
             On all nodes, install the <package>corosync-qdevice</package> package:
            </para>
            <screen>&prompt.root;<command>zypper</command> install corosync-qdevice</screen>
         </step>
         <step>
            <para>
             On one of the nodes, run the following command to configure &qdevice;:
            </para>
<screen>&prompt.root;<command>crm</command> cluster init qdevice
Do you want to configure QDevice (y/n)? <command>y</command>
HOST or IP of the QNetd server to be used []<command><replaceable>QNETD_SERVER</replaceable></command>
TCP PORT of QNetd server [5403]
QNetd decision ALGORITHM (ffsplit/lms) [ffsplit]
QNetd TIE_BREAKER (lowest/highest/valid node id) [lowest]
Whether using TLS on QDevice/QNetd (on/off/required) [on]
Heuristics COMMAND to run with absolute path; For multiple commands, use ";" to separate []</screen>
            <para>
             Confirm with <literal>y</literal> that you want to configure &qdevice;,
             then enter the host name or IP address of the &qnet; server. For the
             remaining fields, you can accept the default values or change them
             if required.
            </para>
            <important>
             <title><literal>SBD_WATCHDOG_TIMEOUT</literal> for diskless SBD and &qdevice;</title>
             <para>
              If you use &qdevice; with diskless SBD, the <literal>SBD_WATCHDOG_TIMEOUT</literal>
              value must be greater than &qdevice;'s <literal>sync_timeout</literal> value,
              or SBD will time out and fail to start.
             </para>
             <para>
              The default value for <literal>sync_timeout</literal> is 30 seconds.
              Therefore, in the file <filename>/etc/sysconfig/sbd</filename>, make sure
              that <literal>SBD_WATCHDOG_TIMEOUT</literal> is set to a greater value,
              such as <literal>35</literal>.
             </para>
            </important>
         </step>
      </procedure>
   </sect1>

   <sect1 xml:id="sec-ha-qdevice-heuristic">
      <title>Setting up a &qdevice; with heuristics</title>
      <para>
         If you need additional control over how votes are determined, use heuristics.
         Heuristics are a set of commands that are executed in parallel.
      </para>
      <para>
         For this purpose, the command <command>crm cluster init qdevice</command>
         provides the option <option>--qdevice-heuristics</option>. You can
         pass one or more commands (separated by semicolons) with absolute paths.
      </para>
      <para>
         For example, if your own command for heuristic checks is located at
         <filename>/usr/sbin/my-script.sh</filename> you can run it on
         one of your cluster nodes as follows:
      </para>
      <screen>&prompt.root;<command>crm</command
> cluster init qdevice --qnetd-hostname=&node3; \
     --qdevice-heuristics=/usr/sbin/my-script.sh  \
     --qdevice-heuristics-mode=on</screen>
      <para>
         The command or commands can be written in any language such as Shell, Python, or Ruby.
         If they succeed, they return <literal>0</literal> (zero), otherwise they return an error code.
      </para>
      <para>
         You can also pass a set of commands. Only when all commands finish successfully (return
         code is zero), have the heuristics passed.
      </para>
      <para>
         The <option>--qdevice-heuristics-mode=on</option> option lets the heuristics
         commands run regularly.
      </para>
   </sect1>

   <sect1 xml:id="sec-ha-qdevice-status">
      <title>Checking and showing quorum status</title>
      <!-- HINT:
The Ring ID and some other parts are numbers which are actually an IP address.
You can "decrypt" it by using Python:

$ python3
>>> import ipaddress
# Convert a number to an IP address:
>>> ipaddress.ip_address(3232235778)
IPv4Address('192.168.1.2')
# Convert an IP address to a number:
>>> int(ipaddress.IPv4Address("192.168.1.2"))
3232235778
      -->
      <para>
         You can query the quorum status on one of your cluster nodes as shown in <xref linkend="ex-ha-qdevice-crm-corosync-status-quorum"/>.
         It shows the status of your &qdevice; nodes.
      </para>

      <example xml:id="ex-ha-qdevice-crm-corosync-status-quorum">
         <title>Status of &qdevice;</title>
         <screen>&prompt.root;<command>corosync-quorumtool</command> <co xml:id="co-quorum-cmd"/>
 Quorum information
------------------
Date:             ...
Quorum provider:  corosync_votequorum
Nodes:            2 <co xml:id="co-quorum-nodesnumber"/>
Node ID:          3232235777 <co xml:id="co-quorum-nodeid"/>
Ring ID:          3232235777/8
Quorate:          Yes <co xml:id="co-quorum-quorate"/>

Votequorum information
----------------------
Expected votes:   3
Highest expected: 3
Total votes:      3
Quorum:           2
Flags:            Quorate Qdevice

Membership information
----------------------
    Nodeid      Votes    Qdevice Name
 3232235777         1    A,V,NMW &subnetI;.1 (local) <co xml:id="co-quorum-nodes"/>
 3232235778         1    A,V,NMW &subnetI;.2 <xref linkend="co-quorum-nodes"/>
         0          1            Qdevice</screen>
         <calloutlist>
            <callout arearefs="co-quorum-cmd">
               <para>
                  As an alternative with an identical result, you can also use
                  the <command>crm corosync status quorum</command> command.
               </para>
            </callout>
            <callout arearefs="co-quorum-nodesnumber">
               <para>
                  The number of nodes we are expecting. In this example, it is a
                  two-node cluster.
               </para>
            </callout>
            <callout arearefs="co-quorum-nodeid">
               <para>
                  As the node ID is not explicitly specified in <filename>corosync.conf</filename>
                  this ID is a 32-bit integer representation of the IP address.
                  In this example, the value
                  <literal>3232235777</literal> stands for the IP address <systemitem
                     class="ipaddress">&subnetI;.1</systemitem>.
               </para>
            </callout>
            <callout arearefs="co-quorum-quorate">
               <para>
                  The quorum status. In this case, the cluster has quorum.
               </para>
            </callout>
            <callout arearefs="co-quorum-nodes">
               <para>
                  The status for each cluster node means:
               </para>
               <variablelist>
                  <varlistentry>
                     <term><literal>A</literal> (alive) or <literal>NA</literal> (not alive)</term>
                     <listitem>
                        <para>
                           Shows the connectivity status between &qdevice; and &corosync;.
                           If there is a heartbeat between &qdevice; and &corosync;,
                           it is shown as alive (A).
                        </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><literal>V</literal> (vote) or <literal>NV</literal> (non vote)</term>
                     <listitem>
                        <para>
                           Shows if the quorum device has given a vote (letter <literal>V</literal>)
                           to the node.
                           A letter <literal>V</literal> means that both nodes can communicate
                           with each other. In a split-brain situation, one node would be
                           set to <literal>V</literal> and the other node would be set to
                           <literal>NV</literal>.
                        </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><literal>MW</literal> (master wins) or
                           <literal>NMW</literal>(not master wins)</term>
                     <listitem>
                        <para>
                           Shows if the quorum device <parameter>master_wins</parameter>
                           flag is set. By default, the flag is not set, so you see <literal>NMW</literal> (not master
                           wins).
                           See the man page votequorum_qdevice_master_wins(3) for more
                           information.
                        </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><literal>NR</literal> (not registered)</term>
                     <listitem>
                        <para>
                           Shows that the cluster is not using a quorum device.
                        </para>
                     </listitem>
                  </varlistentry>
               </variablelist>
            </callout>
         </calloutlist>
      </example>

      <para>
         If you query the status of the &qnet; server, you get a similar output to that
         shown in <xref linkend="ex-ha-qdevice-crm-corosync-status-qnetd"/>:
      </para>
      <example xml:id="ex-ha-qdevice-crm-corosync-status-qnetd">
         <title>Status of &qnet; server</title>
         <screen>&prompt.root;<command>corosync-qnetd-tool -lv</command> <co xml:id="co-quorum-qnet-cmd"/>
Cluster "hacluster": <co xml:id="co-quorum-qnet-name"/>
    Algorithm:          Fifty-Fifty split <co xml:id="co-quorum-qnet-algo"/>
    Tie-breaker:        Node with lowest node ID
    Node ID 3232235777: <co xml:id="co-quorum-qnet-alice"/>
        Client address:         ::ffff:&subnetI;.1:54732
        HB interval:            8000ms
        Configured node list:   3232235777, 3232235778
        Ring ID:                aa10ab0.8
        Membership node list:   3232235777, 3232235778
        Heuristics:             Undefined (membership: Undefined, regular: Undefined)
        TLS active:             Yes (client certificate verified)
        Vote:                   ACK (ACK)
    Node ID 3232235778:
        Client address:         ::ffff:&subnetI;.2:43016
        HB interval:            8000ms
        Configured node list:   3232235777, 3232235778
        Ring ID:                aa10ab0.8
        Membership node list:   3232235777, 3232235778
        Heuristics:             Undefined (membership: Undefined, regular: Undefined)
        TLS active:             Yes (client certificate verified)
        Vote:                   No change (ACK)</screen>
       <calloutlist>
          <callout arearefs="co-quorum-qnet-cmd">
             <para>
                As an alternative with an identical result, you can also use
                the <command>crm corosync status qnetd</command> command on
                one of the cluster nodes.
             </para>
          </callout>
          <callout arearefs="co-quorum-qnet-name">
             <para>
                The name of your cluster as set in the configuration file
                <filename>/etc/corosync/corosync.conf</filename> in the
                <literal>totem.cluster_name</literal> section.
             </para>
          </callout>
          <callout arearefs="co-quorum-qnet-algo">
             <para>
                The algorithm currently used. In this example, it is <literal>FFSplit</literal>.
             </para>
          </callout>
          <callout arearefs="co-quorum-qnet-alice">
             <para>
                This is the entry for the node with the IP address
                <systemitem class="ipaddress">&subnetI;.1</systemitem>.
                TLS is active.
             </para>
          </callout>
       </calloutlist>
      </example>
   </sect1>

   <sect1 xml:id="sec-ha-qdevice-more">
      <title>For more information</title>
      <para>
         For additional information about &qdevice; and &qnet;, see the
         man pages of corosync-qdevice(8) and corosync-qnetd(8).
      </para>
   </sect1>
</chapter>
