<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<!--https://fate.suse.com/314907:  cluster reports without ssh root access  -->
<appendix xml:id="app-crmreport-nonroot"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 version="5.0" >
 <title>Running cluster reports without &rootuser; access</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:maintainer/>
        <dm:status>editing</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>yes</dm:translation>
        <dm:languages/>
        <dm:release/>
        <dm:repository/>
      </dm:docmanager>
    </info>
    <para>
  All cluster nodes must be able to access each other via SSH. Tools like
  <command>crm report</command> (for
  troubleshooting) and &hawk2;'s <guimenu>History Explorer</guimenu> require
  passwordless SSH access between the nodes, otherwise they can only collect
  data from the current node.
 </para>
 <para>
  If passwordless SSH &rootuser; access does not comply with regulatory
  requirements, you can use a work-around for running cluster reports. It
  consists of the following basic steps:
 </para>
 <orderedlist>
  <listitem>
   <para>
    Creating a dedicated local user account (for running
    <command>crm report</command>).
   </para>
  </listitem>
  <listitem>
   <para>
    Configuring passwordless SSH access for that user account, ideally by
    using a non-standard SSH port.
   </para>
  </listitem>
  <listitem>
   <para>
    Configuring <command>sudo</command> for that user.
   </para>
  </listitem>
  <listitem>
   <para>
    Running <command>crm report</command> as
    that user.
   </para>
  </listitem>
 </orderedlist>
 <para>
  By default when <command>crm report</command> is run, it attempts to
  log in to
  remote nodes first as &rootuser;, then as user
  <systemitem class="username">hacluster</systemitem>. However, if your
  local security policy prevents &rootuser; login using SSH, the script
  execution will fail on all remote nodes. Even attempting to run the script
  as user <systemitem class="username">hacluster</systemitem> will fail
  because this is a service account, and its shell is set to
  <filename>/bin/false</filename>, which prevents login. Creating a
  dedicated local user is the only option to successfully run the
  <command>crm report</command> script on
  all nodes in the &ha; cluster.
 </para>
 <sect1 xml:id="sec-crmreport-nonroot-user">
  <title>Creating a local user account</title>

  <para>
   In the following example, we will create a local user named
   <systemitem class="username">hareport</systemitem> from command line. The
   password can be anything that meets your security requirements.
   Alternatively, you can create the user account and set the password with
   &yast;.
  </para>

  <procedure>
   <title>Creating a dedicated user account for running cluster reports</title>
   <step>
    <para>
     Start a shell and create a user
     <systemitem class="username">hareport</systemitem> with a home
     directory <filename>/home/hareport </filename>:
    </para>
<screen>&prompt.root;<command>useradd</command> -m -d /home/hareport -c "HA Report" hareport</screen>
   </step>
   <step>
    <para>
     Set a password for the user:
    </para>
<screen>&prompt.root;passwd hareport</screen>
   </step>
   <step>
    <para>
     When prompted, enter and re-enter a password for the user.
    </para>
   </step>
  </procedure>

  <important>
   <title>Same user is required on each cluster node</title>
   <para>
    To create the same user account on all nodes, repeat the steps above on
    each cluster node.
   </para>
  </important>
 </sect1>
 <sect1 xml:id="sec-crmreport-nonroot-ssh">
  <title>Configuring a passwordless SSH account</title>

    <procedure>
   <title>Configuring the SSH daemon for a non-standard port</title>
   <para>
    By default, the SSH daemon and the SSH client talk and listen on port
    <literal>22</literal>. If your network security guidelines require the
    default SSH port to be changed to an alternate high numbered port, you
    need to modify the daemon's configuration file
    <filename>/etc/ssh/sshd_config</filename>.
   </para>
   <step>
    <para>
     To modify the default port, search the file for the
     <literal>Port</literal> line, uncomment it and edit it according to
     your wishes. For example, set it to:
    </para>
<screen>Port 5022</screen>
   </step>
   <step>
    <para>
     If your organization does not permit the &rootuser; user to access
     other servers, search the file for the
     <literal>PermitRootLogin</literal> entry, uncomment it and set it to
     <literal>no</literal>:
    </para>
<screen>PermitRootLogin no</screen>
   </step>
   <step>
    <para>
     Alternatively, add the respective lines to the end of the file by
     executing the following commands:
    </para>
<screen>&prompt.root;echo “PermitRootLogin no” &gt;&gt; /etc/ssh/sshd_config
&prompt.root;echo “Port 5022” &gt;&gt; /etc/ssh/sshd_config</screen>
   </step>
   <step>
    <para>
     After modifying <filename>/etc/ssh/sshd_config</filename>, restart the
     SSH daemon to make the new settings take effect:
    </para>
<screen>&prompt.root;systemctl restart sshd</screen>
   </step>
  </procedure>

  <important>
   <title>Same settings are required on each cluster node</title>
   <para>
    Repeat the SSH daemon configuration above on each cluster node.
   </para>
  </important>

  <procedure>
   <title>Configuring the SSH client for a non-standard port</title>
   <para>
    If the SSH port change is going to be made on all nodes in the cluster,
    it is useful to modify the SSH configuration file,
    <filename>/etc/ssh/sshd_config</filename>.
    </para>
   <step>
    <para>
     To modify the default port, search the file for the
     <literal>Port</literal> line, uncomment it and edit it according to
     your wishes. For example, set it to:
    </para>
<screen>Port 5022</screen>
   </step>
   <step>
    <para>
     Alternatively, add the respective line to the end of the file by
     executing the following commands:
    </para>
<screen>&prompt.root;echo “Port 5022” &gt;&gt; /etc/ssh/ssh_config</screen>
   </step>
  </procedure>

  <note>
   <title>Settings only required on one node</title>
   <para>
    The SSH client configuration above is only needed on the node on which
    you want to run the cluster report.</para>
   <para>Alternatively, you can use the <option>-X</option> option to run the
    <command>crm report</command> with a custom SSH port or even make
    <command>crm report</command> use your custom SSH port by default. For
    details, see <xref linkend="pro-crmreport-custom-ssh"/>.</para>
  </note>

  <procedure>
   <title>Configuring shared SSH keys</title>
   <para>
    You can access other servers using SSH and not be asked for a
    password. While this may appear insecure at first sight, it is actually
    a very secure access method since the users can only access servers that
    their public key has been shared with. The shared key must be created as
    the user that will use the key.
   </para>
   <step>
    <para>
     Log in to one of the nodes with the user account that you have created
     for running cluster reports (in our example above, the user account was
     <systemitem class="username">hareport</systemitem>).
    </para>
   </step>
   <step>
    <para>
     Generate a new key:
    </para>
<screen><prompt role="user">hareport &gt; </prompt>ssh-keygen –t rsa</screen>
    <para>
     This command will generate a 2048 bit key by default. The default
     location for the key is <filename>~/.ssh/</filename>. You are asked to
     set a passphrase on the key. However, do not enter a passphrase because
     for passwordless login there must not be a passphrase on the key.
     </para>
   </step>
   <step>
    <para>
     After the keys have been generated, copy the public key to
     <emphasis>each</emphasis> of the other nodes
     (<emphasis>including</emphasis> the node where you created the key):
    </para>
<screen><prompt role="user">hareport &gt; </prompt>ssh-copy-id -i ~/.ssh/id_rsa.pub <replaceable>HOSTNAME_OR_IP</replaceable></screen>
    <para>
     In the command, you can either use the DNS name for each server, an
     alias, or the IP address. During the copy process you will be asked to
     accept the host key for each node, and you will need to provide the
     password for the <systemitem class="username">hareport</systemitem>
     user account (this will be the only time you need to enter it).
    </para>
   </step>
   <step>
    <para>
     After the key is shared to all cluster nodes, test if you can log in as
     user <systemitem class="username">hareport</systemitem> to the other
     nodes by using passwordless SSH:
     </para>
<screen><prompt role="user">hareport &gt; </prompt>ssh <replaceable>HOSTNAME_OR_IP</replaceable></screen>
    <para>
     You should be automatically connected to the remote server without
     being asked to accept a certificate or enter a password.
    </para>
   </step>
  </procedure>

  <note>
   <title>Settings only required on one node</title>
   <para>
    If you intend to run the cluster report from the same node each time, it
    is sufficient to execute the procedure above on this node only.
    Otherwise repeat the procedure on each node.
   </para>
  </note>
 </sect1>
 <sect1 xml:id="sec-crmreport-nonroot-sudo">
  <title>Configuring <command>sudo</command></title>

  <para>
   The <command>sudo</command> command allows a regular user to quickly
   become &rootuser; and issue a command, with or without providing a
   password. Sudo access can be given to all root-level commands or to
   specific commands only. Sudo typically uses aliases to define the entire
   command string.
  </para>

  <para>
   To configure sudo either use <command>visudo</command>
   (<emphasis>not</emphasis> vi) or &yast;.
  </para>

  <warning>
   <title>Do not use vi</title>
   <para>
    For sudo configuration from command line, you must edit the sudoers file
    as &rootuser; with <command>visudo</command>. Using any other editor may
    result in syntax or file permission errors that prevent sudo from
    running.
   </para>
  </warning>

  <procedure>
   <step>
    <para>
     Log in as &rootuser;.
    </para>
   </step>
   <step>
    <para>
     To open the <filename>/etc/sudoers</filename> file, enter
     <command>visudo</command>.
    </para>
   </step>
   <step>
    <para> Look for the following categories: <literal>Host alias
      specification</literal>,<literal>User alias specification</literal>,
      <literal>Cmnd alias specification</literal>, and <literal>Runas alias
      specification</literal>. </para>
   </step>
   <step>
    <para>
     Add the following entries to the respective categories in
     <filename>/etc/sudoers</filename>:
    </para>
<screen>Host_Alias	CLUSTER = &node1;,&node2;,&node3; <co xml:id="ha-sudoers-host-alias"/>
User_Alias HA = hareport <co xml:id="ha-sudoers-user-alias"/>
Cmnd_Alias HA_ALLOWED = /bin/su, /usr/sbin/crm&nbsp;report *<co xml:id="ha-sudoers-cmd-alias"/>
Runas_Alias R = root <co xml:id="ha-sudoers-runas-alias"/></screen>
    <calloutlist>
     <callout arearefs="ha-sudoers-host-alias">
      <para>
       The host alias defines on which server (or range of servers) the sudo
       user has rights to issue commands. In the host alias you can use DNS
       names, or IP addresses, or specify an entire network range (for
       example, <literal>172.17.12.0/24</literal>). To limit the scope of
       access you should specify the host names for the cluster nodes only.
      </para>
     </callout>
     <callout arearefs="ha-sudoers-user-alias">
      <para>
       The user alias allows you to add multiple local user accounts to a
       single alias. However, in this case you could avoid creating an alias since
       only one account is being used. In the example above, we added the
       <systemitem class="username">hareport</systemitem> user which we have
       created for running cluster reports.
      </para>
     </callout>
     <callout arearefs="ha-sudoers-cmd-alias">
      <para>
       The command alias defines which commands can be executed by the user.
       This is useful if you want to limit what the non-root user can access
       when using <command>sudo</command>. In this case the
       <systemitem class="username">hareport</systemitem>
       user account will need access to the commands <command>crm&nbsp;report</command>
       and <command>su</command>.
      </para>
     </callout>
     <callout arearefs="ha-sudoers-runas-alias">
      <para>
       The <literal>runas</literal> alias specifies the account that the command will be run
       as. In this case &rootuser;.
      </para>
     </callout>
    </calloutlist>
   </step>
   <step>
    <para>Search for the following two lines:</para>
    <screen>Defaults targetpw
ALL     ALL=(ALL) ALL
    </screen>
    <para>As they would conflict with the setup we want to create, disable them:</para>
    <screen>#Defaults targetpw
#ALL     ALL=(ALL) ALL</screen>
   </step>
   <step>
    <para>Look for the <literal>User privilege specification</literal> category.
     After having defined the aliases above, you can now add the following
     rule there:</para>
    <screen>HA	CLUSTER = (R) NOPASSWD:HA_ALLOWED</screen>
    <para>The <literal>NOPASSWORD</literal> option ensures that the user
      <systemitem class="username">hareport</systemitem> can execute the cluster
     report without providing a password.</para>
   </step>
   <step performance="optional">
    <para>
     To allow the user <systemitem class="username">hareport</systemitem> to run cluster reports using your local SSH keys, add the following line to the <literal>Defaults specification</literal> category. This preserves the <literal>SSH_AUTH_SOCK</literal> environment
     variable, which is required for SSH agent forwarding.
    </para>
<screen>Defaults!HA_ALLOWED env_keep+=SSH_AUTH_SOCK</screen>
    <para>
     When you log into a node as the user <systemitem class="username">hareport</systemitem> via <command>ssh -A</command>, and use <command>sudo</command>
     to run <command>crm report</command>, your local SSH keys are passed to the node for
     authentication.
    </para>
   </step>
  </procedure>

  <important>
   <title>Same sudo configuration is required on each cluster node</title>
   <para>
    This sudo configuration must be made on all nodes in the cluster. No
    other changes are needed for sudo and no services need to be restarted.
   </para>
  </important>
 </sect1>
 <sect1 xml:id="sec-crmreport-nonroot-execute">
  <title>Generating a cluster report</title>
  <para>To run cluster reports with the settings you have configured above, you need to be logged
   in to one of the nodes as user <systemitem class="username">hareport</systemitem>.
   To start a cluster report, use the <command>crm report</command> command.
   For example: </para>
  <screen><prompt role="user">hareport &gt; </prompt><command>sudo crm report -u hareport -f 0:00 -n "&node1; &node2; &node3;"</command></screen>
  <para>This command will extract all information since <literal>0 am</literal> on the named nodes
   and create a <literal>*.tar.bz2</literal> archive named
     <filename>pcmk-<replaceable>DATE</replaceable>.tar.bz2</filename> in
     the current directory.</para>
  <procedure xml:id="pro-crmreport-custom-ssh">
   <title>Generating a cluster report using a custom SSH port</title>
   <step>
    <para>When using a custom SSH port, use the <option>-X</option> with
     <command>crm report</command> to modify the client's SSH port. For example,
     if your custom SSH port is <literal>5022</literal>, use the following
     command:</para>
    <screen>&prompt.root;crm report -X "-p 5022" [...]</screen>
   </step>
   <step>
    <para>To set your custom SSH port permanently for
     <command>crm&nbsp;report</command>, start the interactive &crmshell;:</para>
     <screen>crm options</screen>
   </step>
   <step>
    <para>
     Enter the following:
    </para>
    <screen>&prompt.crm.opt;set core.report_tool_options "-X -oPort=5022"</screen>
   </step>
  </procedure>
   </sect1>
</appendix>
