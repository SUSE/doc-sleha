<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<!--https://fate.suse.com/314907:  cluster reports without ssh root access  -->
<appendix xml:id="app-crmreport-nonroot"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 version="5.0" >
 <title>Running cluster reports without &rootuser; access</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:maintainer/>
        <dm:status>editing</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>yes</dm:translation>
        <dm:languages/>
        <dm:release/>
        <dm:repository/>
      </dm:docmanager>
    </info>
    <para>
  All cluster nodes must be able to access each other via SSH. Tools like
  <command>crm report</command> (for
  troubleshooting) and &hawk2;'s <guimenu>History Explorer</guimenu> require
  passwordless SSH access between the nodes, otherwise they can only collect
  data from the current node.
 </para>
 <para>
  If your security policy does not allow passwordless &rootuser; SSH login,
  then running <command>crm report</command> as &rootuser; fails on all remote nodes.
  In this case, you can still run cluster reports with one of the following options:
 </para>
 <itemizedlist>
   <listitem>
     <para>
       If the cluster was initialized by a non-root user with <command>sudo</command>
       privileges, this user can run cluster reports.
     </para>
   </listitem>
   <listitem>
     <para>
       If the cluster was initialized by the &rootuser; user, you can create a
       dedicated non-root user to run cluster reports.
     </para>
   </listitem>
 </itemizedlist>
 <para>
  The following procedure describes how to give a non-root user limited privileges so
  that it can use <command>sudo</command> to run <command>crm report</command>, but
  otherwise has no <command>sudo</command> access.
 </para>

 <sect1 xml:id="sec-crmreport-nonroot-sudo">
  <title>Configuring limited <command>sudo</command> privileges for a non-root user</title>

  <para>
   The <command>sudo</command> command allows a regular user to quickly
   become &rootuser; and issue a command, with or without providing a
   password. Sudo access can be given to all root-level commands or to
   specific commands only. This procedure describes how to configure <command>sudo</command>
   privileges only for the specific commands required to run cluster reports.
   Sudo typically uses aliases to define the entire command string.
  </para>

  <para>
   To configure sudo either use <command>visudo</command>
   (<emphasis>not</emphasis> vi) or &yast;.
  </para>

  <warning>
   <title>Do not use vi</title>
   <para>
    For sudo configuration from command line, you must edit the sudoers file
    as &rootuser; with <command>visudo</command>. Using any other editor may
    result in syntax or file permission errors that prevent sudo from
    running.
   </para>
  </warning>

  <itemizedlist>
    <title>Requirements</title>
    <listitem>
      <para>
        A non-root user with no <command>sudo</command> privileges. The following
        procedure uses an example user called <systemitem class="username">hareport</systemitem>.
      </para>
    </listitem>
    <listitem>
      <para>
        The user <systemitem class="username">hareport</systemitem> exists on all
        nodes in the cluster.
      </para>
    </listitem>
    <listitem>
      <para>
        The user <systemitem class="username">hareport</systemitem> can access all
        other nodes in the cluster via passwordless SSH.
      </para>
    </listitem>
  </itemizedlist>

  <procedure>
   <title>Configuring limited <command>sudo</command> privileges for a non-root user</title>
   <step>
    <para>
     Log in as &rootuser;.
    </para>
   </step>
   <step>
    <para>
     To open the <filename>/etc/sudoers</filename> file, enter
     <command>visudo</command>.
    </para>
   </step>
   <step>
    <para> Look for the following categories: <literal>Host alias
      specification</literal>, <literal>User alias specification</literal>,
      <literal>Cmnd alias specification</literal>, and <literal>Runas alias
      specification</literal>. </para>
   </step>
   <step>
    <para>
     Add the following entries to the respective categories in
     <filename>/etc/sudoers</filename>:
    </para>
<screen>Host_Alias	CLUSTER = &node1;,&node2;,&node3; <co xml:id="ha-sudoers-host-alias"/>
User_Alias HA = hareport <co xml:id="ha-sudoers-user-alias"/>
Cmnd_Alias HA_ALLOWED = /bin/su, /usr/sbin/crm&nbsp;report*<co xml:id="ha-sudoers-cmd-alias"/>
Runas_Alias R = root <co xml:id="ha-sudoers-runas-alias"/></screen>
    <calloutlist>
     <callout arearefs="ha-sudoers-host-alias">
      <para>
       The host alias defines on which server (or range of servers) the sudo
       user has rights to issue commands. In the host alias you can use DNS
       names, or IP addresses, or specify an entire network range (for
       example, <literal>172.17.12.0/24</literal>). To limit the scope of
       access you should specify the host names for the cluster nodes only.
      </para>
     </callout>
     <callout arearefs="ha-sudoers-user-alias">
      <para>
       The user alias allows you to add multiple local user accounts to a
       single alias. However, in this case only one account is being used.
      </para>
     </callout>
     <callout arearefs="ha-sudoers-cmd-alias">
      <para>
       The command alias defines which commands can be executed by the user.
       This is useful if you want to limit what the non-root user can access
       when using <command>sudo</command>. In this case the
       <systemitem class="username">hareport</systemitem>
       user account will need access to the commands <command>crm&nbsp;report</command>
       and <command>su</command>.
      </para>
     </callout>
     <callout arearefs="ha-sudoers-runas-alias">
      <para>
       The <literal>runas</literal> alias specifies the account that the command will be run
       as, in this case &rootuser;.
      </para>
     </callout>
    </calloutlist>
   </step>
   <step>
    <para>Search for the following two lines:</para>
    <screen>Defaults targetpw
ALL     ALL=(ALL) ALL
    </screen>
    <para>As they would conflict with the setup we want to create, disable them:</para>
    <screen>#Defaults targetpw
#ALL     ALL=(ALL) ALL</screen>
   </step>
   <step>
    <para>Look for the <literal>User privilege specification</literal> category.
     After having defined the aliases above, you can now add the following
     rule there:</para>
    <screen>HA	CLUSTER = (R) NOPASSWD:HA_ALLOWED</screen>
    <para>The <literal>NOPASSWORD</literal> option ensures that the user
      <systemitem class="username">hareport</systemitem> can execute the cluster
     report without providing a password.</para>
   </step>
   <step performance="optional">
    <para>
     To allow the user <systemitem class="username">hareport</systemitem> to run cluster reports using your local SSH keys, add the following line to the <literal>Defaults specification</literal> category. This preserves the <literal>SSH_AUTH_SOCK</literal> environment
     variable, which is required for SSH agent forwarding.
    </para>
<screen>Defaults!HA_ALLOWED env_keep+=SSH_AUTH_SOCK</screen>
    <para>
     When you log in to a node as the user <systemitem class="username">hareport</systemitem> via <command>ssh -A</command> and use <command>sudo</command>
     to run <command>crm report</command>, your local SSH keys are passed to the node for
     authentication.
    </para>
   </step>
  </procedure>

  <important>
   <title>Same sudo configuration is required on each cluster node</title>
   <para>
    This sudo configuration must be made on all nodes in the cluster. No
    other changes are needed for sudo and no services need to be restarted.
   </para>
  </important>
 </sect1>

</appendix>
