<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->

<sect1 xml:id="cha-ha-manual-config" version="5.0"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Introduction to &crmsh;</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:maintainer/>
        <dm:status>editing</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>yes</dm:translation>
        <dm:languages/>
        <dm:release/>
        <dm:repository/>
      </dm:docmanager>
    </info>

   <para>
    To configure and manage cluster resources, either use the &crmshell;
    (&crmsh;) command line utility or &hawk2;, a Web-based
    user interface.
   </para>
        <para>
    This section introduces the command line tool <command>crm</command>.
    The <command>crm</command> command has several subcommands which manage
   resources, CIBs, nodes, resource agents, and others. It offers a thorough
   help system with embedded examples. All examples follow a naming
   convention described in
   <xref linkend="app-naming" xrefstyle="select:label"/>.
   </para>
     <para>
   Events are logged to <filename>/var/log/crmsh/crmsh.log</filename>.
  </para>

<!-- toms 2014-02-27:
      Should we add that to the section "Typographical Conventions"?
    -->

  <tip>
   <title>Interactive crm prompt</title>
   <para>By using crm without arguments (or with only one sublevel as
    argument), the &crmshell; enters the interactive mode. This mode is
    indicated by the following prompt:
   </para>
   <screen><prompt>&crm.live.host;</prompt></screen>
   <para>
    For readability reasons, we omit the host name in the interactive crm
    prompts in our documentation. We only include the host name if you need
    to run the interactive shell on a specific node, like &node1; for example:
   </para>
   <screen><prompt>&crm.live.alice;</prompt></screen>
  </tip>

  <sect2 xml:id="sec-ha-manual-config-crm-user-privileges">
    <title>User privileges and authentication</title>
    <para>
      Managing a cluster requires sufficient privileges. The following users can run the
      <command>crm</command> command and its subcommands:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The &rootuser; user or a user with <command>sudo</command> privileges. These users have
          full privileges on all cluster nodes by using SSH for &crmsh; operations such as
          <command>crm cluster init</command>, <command>crm cluster join</command>, and
          <command>crm report</command>. They can also make changes to the CIB,
          such as adding resources and constraints.
        </para>
      </listitem>
      <listitem>
        <para>
          The CRM owner user (typically the user <systemitem class="username">hacluster</systemitem>,
          created by default during the cluster installation). This user can make changes to the CIB,
          but has limited privileges for operations that use SSH, such as <command>crm report</command>.
        </para>
        <tip>
          <title>Unprivileged users</title>
          <para>
            The <option>user</option> option allows you to run <command>crm</command> and its
            subcommands as a regular (unprivileged) user, and to change its ID using
            <command>sudo</command> when necessary. For example, the following command sets
            <systemitem class="username">hacluster</systemitem> as the privileged user ID:
          </para>
          <screen>&prompt.root;<command>crm options user hacluster</command></screen>
          <para>
            You must set up <filename>/etc/sudoers</filename> so that <command>sudo</command>
            does not ask for a password.
          </para>
        </tip>
      </listitem>
    </itemizedlist>
    <para>
      For operations that use SSH, the cluster uses passwordless SSH access for communication
      between the nodes. If you set up the cluster with <command>crm cluster init</command>, the
      script checks for SSH keys and generates them if they do not already exist. If you set up
      the cluster with the &yast; cluster module, you must configure the SSH keys yourself.
    </para>
    <para>
      In most cases, the &rootuser; or <command>sudo</command> user's SSH keys must exist (or be
      generated) on the node. Alternatively, a <command>sudo</command> user's SSH keys can exist
      on a local machine and be passed to the node via SSH agent forwarding. This can be useful
      if you need to avoid storing SSH keys on the nodes, but requires additional configuration.
    </para>
    <procedure xml:id="pro-ha-manual-config-crm-user-privileges-ssh-agent">
      <title>Using the bootstrap scripts to set up a cluster with SSH agent forwarding</title>
      <step>
        <para>
          On your local machine, start the SSH agent and add your keys to it. For more information,
          see <link xlink:href="&dsc;/sles/html/SLES-all/cha-ssh.html#sec-ssh-authentic-agent">
          <citetitle>Automated public key logins with ssh-agent</citetitle></link> in
          <citetitle>&secguide;</citetitle> for &sles;.
        </para>
      </step>
      <step>
        <para>
          Log in to the first cluster node as a user with <command>sudo</command> privileges,
          using the <option>-A</option> option to enable SSH agent forwarding:
        </para>
<screen><prompt>user@local&gt; </prompt><command>ssh -A <replaceable>USER@NODE1</replaceable></command></screen>
      </step>
      <step>
        <para>
          Initialize the cluster with the <command>crm cluster init</command> script:
        </para>
<screen><prompt>user@node1&gt; </prompt><command>sudo --preserve-env=SSH_AUTH_SOCK \</command><co xml:id="co-ssh-auth-sock"/>
<command>crm cluster init --use-ssh-agent</command><co xml:id="co-use-ssh-agent"/></screen>
       <calloutlist>
         <callout arearefs="co-ssh-auth-sock">
           <para>
             Preserves the environment variable <literal>SSH_AUTH_SOCK</literal>, which is
             required for SSH agent communication.
           </para>
        </callout>
        <callout arearefs="co-use-ssh-agent">
           <para>
             Tells the script to use your local SSH keys instead of generating keys on the node.
           </para>
         </callout>
       </calloutlist>
      </step>
      <step>
        <para>
          When the initial configuration is complete, exit the first node and log in to the
          second node using the <option>-A</option> option.
        </para>
      </step>
      <step>
        <para>
          Add the second node to the cluster with the <command>crm cluster join</command> script.
          Use the <literal>-c</literal> option to specify the user and node that initialized
          the cluster:
        </para>
<screen><prompt>user@node2&gt; </prompt><command>sudo --preserve-env=SSH_AUTH_SOCK \
crm cluster join --use-ssh-agent -c <replaceable>USER@NODE1</replaceable></command></screen>
      </step>
    </procedure>
    <para>
      If you set up the cluster with &yast; instead of using the bootstrap scripts, the SSH keys
      are not automatically generated. To configure SSH keys with SSH agent forwarding enabled,
      you can use the <literal>ssh</literal> stage of the bootstrap scripts on its own. Run these
      commands after configuring the cluster in &yast;, but before bringing the cluster online.
    </para>
    <procedure xml:id="pro-ha-manual-config-crm-user-privileges-ssh-keys">
      <title>Configuring passwordless SSH (and SSH agent forwarding) with crmsh</title>
      <step>
        <para>
          Run the following command on the first node:
        </para>
<screen><prompt>user@node1&gt; </prompt><command>sudo --preserve-env=SSH_AUTH_SOCK \
crm cluster init ssh --use-ssh-agent</command></screen>
      </step>
      <step>
        <para>
          Start the cluster services on the first node so that the other nodes can
          use the <command>crm cluster join</command> command:
        </para>
<screen><prompt>user@node1&gt; </prompt><command>sudo crm cluster start</command></screen>
      </step>
      <step>
        <para>
          Run the following command on all other nodes:
        </para>
<screen><prompt>user@node2&gt; </prompt><command>sudo --preserve-env=SSH_AUTH_SOCK \
crm cluster join ssh --use-ssh-agent -c <replaceable>USER@NODE1</replaceable></command></screen>
      </step>
    </procedure>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-crm-help">
   <title>Getting help</title>
   <para>
    Help can be accessed in several ways:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      To output the usage of <command>crm</command> and its command line
      options:
     </para>
<screen>&prompt.root;<command>crm --help</command></screen>
    </listitem>
    <listitem>
     <para>
      To give a list of all available commands:
     </para>
<screen>&prompt.root;<command>crm help</command></screen>
    </listitem>
    <listitem>
     <para>
      To access other help sections, not only the command reference:
     </para>
<screen>&prompt.root;<command>crm help topics</command></screen>
    </listitem>
    <listitem>
     <para>
      To view the extensive help text of the <command>configure</command>
      subcommand:
     </para>
<screen>&prompt.root;<command>crm configure help</command></screen>
    </listitem>
    <listitem>
     <para>
      To print the syntax, its usage, and examples of the <command>group</command>
      subcommand of <command>configure</command>:
     </para>
<screen>&prompt.root;<command>crm configure help group</command></screen>
     <para>
      This is the same:
     </para>
<screen>&prompt.root;<command>crm help configure group</command></screen>
    </listitem>
   </itemizedlist>
   <para>
    Almost all output of the <command>help</command> subcommand (do not mix
    it up with the <option>--help</option> option) opens a text viewer. This
    text viewer allows you to scroll up or down and read the help text more
    comfortably. To leave the text viewer, press the <keycap>Q</keycap> key.
   </para>
   <tip xml:id="tip-crm-tabcompletion">
    <title>Use tab completion in Bash and interactive shell</title>
    <para>
     The &crmsh; supports full tab completion in Bash directly, not only
     for the interactive shell. For example, typing <literal>crm help
     config</literal><keycap function="tab"/> completes the word
     like in the interactive shell.
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-crm-run">
   <title>Executing &crmsh;'s subcommands</title>
   <para>
    The <command>crm</command> command itself can be used in the following
    ways:
   </para>
   <itemizedlist>
    <listitem>
     <formalpara>
      <title>Directly:</title>
      <para>
       Concatenate all subcommands to <command>crm</command>, press
       <keycap function="enter"/> and you see the output immediately. For
       example, enter <command>crm help ra</command> to get
       information about the <command>ra</command> subcommand (resource
       agents).
      </para>
     </formalpara>
      <para>It is possible to abbreviate subcommands if they are
        unique. For example, you can shorten <command>status</command> as
      <command>st</command> and &crmsh; knows what you mean.
      </para>
      <para>Another feature is to shorten parameters. Usually, you add
        parameters through the <command>params</command> keyword.
        You can leave out the <literal>params</literal> section if it is the first and only section.
        For example, this line:
      </para>
      <screen>&prompt.root;<command>crm configure primitive ipaddr IPaddr2 params ip=192.168.0.55</command></screen>
      <para>is equivalent to this line:</para>
      <screen>&prompt.root;<command>crm configure primitive ipaddr IPaddr2 ip=192.168.0.55</command></screen>
    </listitem>
    <listitem>
     <formalpara>
      <title>As crm shell script:</title>
      <para>
       Crm shell scripts contain subcommands of <command>crm</command>.
       For more information, see <xref linkend="sec-ha-manual-config-crmshellscripts"/>.
      </para>
     </formalpara>
    </listitem>
    <listitem>
      <formalpara>
        <title>As &crmsh; cluster scripts:</title>
        <para>These are a collection of metadata, references to RPM packages,
          configuration files, and &crmsh; subcommands bundled under a single,
          yet descriptive name. They are managed through the
          <command>crm script</command> command.
        </para>
      </formalpara>
      <para>Do not confuse them with &crmsh; shell scripts: although both share
        some common objectives, the crm shell scripts only contain subcommands
        whereas cluster scripts incorporate much more than a simple
        enumeration of commands. For more information, see <xref linkend="sec-ha-manual-config-clusterscripts"/>.
      </para>
    </listitem>
    <listitem>
     <formalpara>
      <title>Interactive as internal shell:</title>
      <para>
       Type <command>crm</command> to enter the internal shell. The prompt
       changes to <literal>&crm.live;</literal>. With
       <command>help</command> you can get an overview of the available
       subcommands. As the internal shell has different levels of
       subcommands, you can <quote>enter</quote> one by typing this
       subcommand and press <keycap function="enter"/>.
      </para>
     </formalpara>
     <para>
      For example, if you type <command>resource</command> you enter the
      resource management level. Your prompt changes to
      <literal>&crm.live;resource#</literal>. To leave the
      internal shell, use the command <command>quit</command>. If you need to go
      one level back, use <command>back</command>, <command>up</command>,
      <command>end</command>, or <command>cd</command>.
     </para>
     <para>
      You can enter the level directly by typing <command>crm</command> and
      the respective subcommand without any options and press
      <keycap function="enter"/>.
     </para>
     <para>
      The internal shell supports also tab completion for subcommands and
      resources. Type the beginning of a command, press
      <keycap function="tab"/> and <command>crm</command> completes the
      respective object.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    &crmsh; also supports
    synchronous command execution. Use the <option>-w</option> option to
    activate it. If you have started <command>crm</command> without
    <option>-w</option>, you can enable it later with the user preference's
    <command>wait</command> set to <literal>yes</literal> (<command>options
    wait yes</command>). If this option is enabled, <command>crm</command>
    waits until the transition is finished. Whenever a transaction is
    started, dots are printed to indicate progress. Synchronous command
    execution is only applicable for commands like <command>resource
    start</command>.
   </para>
   <note>
    <title>Differentiate between management and configuration subcommands</title>
    <para>
     The <command>crm</command> tool has management capability (the
     subcommands <command>resource</command> and <command>node</command>)
     and can be used for configuration (<command>cib</command>,
     <command>configure</command>).
    </para>
   </note>
   <para>
    The following subsections give you an overview of important aspects
    of the <command>crm</command> tool.
   </para>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-ocf">
   <title>Displaying information about OCF resource agents</title>
   <para>
    As you need to deal with resource agents in your cluster configuration
    all the time, the <command>crm</command> tool contains the
    <command>ra</command> command. Use it to show information about resource
    agents and to manage them (for additional information, see also
    <xref linkend="sec-ha-config-basics-raclasses"/>):
   </para>
<screen>&prompt.root;<command>crm ra</command>
&prompt.crm.ra;</screen>
   <para>
    The command <command>classes</command> lists all classes and providers:
   </para>
<screen>&prompt.crm.ra;<command>classes</command>
 lsb
 ocf / heartbeat linbit lvm2 ocfs2 pacemaker
 service
 stonith
 systemd</screen>
   <para>
    To get an overview of all available resource agents for a class (and
    provider) use the <command>list</command> command:
   </para>
<screen>&prompt.crm.ra;<command>list ocf</command>
AoEtarget           AudibleAlarm        CTDB                ClusterMon
Delay               Dummy               EvmsSCC             Evmsd
Filesystem          HealthCPU           HealthSMART         ICP
IPaddr              IPaddr2             IPsrcaddr           IPv6addr
LVM                 LinuxSCSI           MailTo              ManageRAID
ManageVE            Pure-FTPd           Raid1               Route
SAPDatabase         SAPInstance         SendArp             ServeRAID
...</screen>
   <para>
    An overview of a resource agent can be viewed with
    <command>info</command>:
   </para>
<screen>&prompt.crm.ra;<command>info ocf:linbit:drbd</command>
This resource agent manages a DRBD* resource
as a master/slave resource. DRBD is a shared-nothing replicated storage
device. (ocf:linbit:drbd)

Master/Slave OCF Resource Agent for DRBD

Parameters (* denotes required, [] the default):

drbd_resource* (string): drbd resource name
    The name of the drbd resource from the drbd.conf file.

drbdconf (string, [/etc/drbd.conf]): Path to drbd.conf
    Full path to the drbd.conf file.

Operations' defaults (advisory minimum):

    start         timeout=240
    promote       timeout=90
    demote        timeout=90
    notify        timeout=90
    stop          timeout=100
    monitor_Slave_0 interval=20 timeout=20 start-delay=1m
    monitor_Master_0 interval=10 timeout=20 start-delay=1m</screen>
   <para>
    Leave the viewer by pressing <keycap>Q</keycap>.
   </para>
   <tip>
    <title>Use <command>crm</command> directly</title>
    <para>
     In the former example we used the internal shell of the
     <command>crm</command> command. However, you do not necessarily need to
     use it. You get the same results if you add the respective subcommands
     to <command>crm</command>. For example, you can list all the OCF
     resource agents by entering <command>crm ra list ocf</command> in your shell.
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-crmshellscripts">
   <title>Using &crmsh;'s shell scripts</title>
   <para>
    The &crmsh; shell scripts provide a convenient way to enumerate &crmsh;
    subcommands into a file. This makes it easy to comment specific lines or
    to replay them later. Keep in mind that a &crmsh; shell script can contain
    <emphasis>only &crmsh; subcommands</emphasis>. Any other commands are not
    allowed.
   </para>
   <para>
    Before you can use a &crmsh; shell script, create a file with specific
    commands. For example, the following file prints the status of the cluster
    and gives a list of all nodes:
   </para>
   <example xml:id="ex-ha-manual-config-crmshellscripts">
    <title>A simple &crmsh; shell script</title>
    <screen># A small example file with some crm subcommands
<command>status</command>
<command>node list</command></screen>
   </example>
   <para>
    Any line starting with the hash symbol (<literal>#</literal>) is a
    comment and is ignored. If a line is too long, insert a backslash
    (<literal>\</literal>) at the end and continue in the next line. We
    recommend that you indent lines belonging to a certain subcommand to improve
    readability.
   </para>

   <para>To use this script, use one of the following methods:</para>
   <screen>&prompt.root;<command>crm -f example.cli</command>
&prompt.root;<command>crm &lt; example.cli</command></screen>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-clusterscripts">
    <title>Using &crmsh;'s cluster scripts</title>
    <para>Collecting information from all cluster nodes and deploying any
      changes is a key cluster administration task. Instead of performing
      the same procedures manually on different nodes (which is error-prone),
      you can use the &crmsh; cluster scripts.
   </para>
   <para>
    Do not confuse them with the <emphasis>&crmsh; shell scripts</emphasis>,
    which are explained in <xref linkend="sec-ha-manual-config-crmshellscripts"/>.
    </para>

   <para>In contrast to &crmsh; shell scripts, cluster scripts performs
    additional tasks like:</para>
    <itemizedlist>
      <listitem>
        <para>Installing software that is required for a specific task.</para>
      </listitem>
      <listitem>
        <para>Creating or modifying any configuration files.</para>
      </listitem>
      <listitem>
        <para>Collecting information and reporting potential problems with the
          cluster.</para>
      </listitem>
      <listitem>
        <para>Deploying the changes to all nodes.</para>
      </listitem>
    </itemizedlist>

    <para>&crmsh; cluster scripts do not replace other tools for managing
      clusters&mdash;they provide an integrated way to perform the above
      tasks across the cluster. Find detailed information at <link xlink:href="https://crmsh.github.io/scripts/" xlink:show="new"/>.
    </para>

    <sect3 xml:id="sec-ha-manual-config-clusterscripts-usage">
      <title>Usage</title>
      <para>To get a list of all available cluster scripts, run:</para>
      <screen>&prompt.root;<command>crm script list</command></screen>

      <para>To view the components of a script, use the
        <command>show</command> command and the name of the cluster script,
        for example:</para>
      <screen>&prompt.root;<command>crm script show mailto</command>
mailto (Basic)
MailTo

 This is a resource agent for MailTo. It sends email to a sysadmin
whenever  a takeover occurs.

1. Notifies recipients by email in the event of resource takeover

  id (required)  (unique)
      Identifier for the cluster resource
  email (required)
      Email address
  subject
      Subject</screen>

      <para>The output of <command>show</command> contains a title, a
          short description, and a procedure. Each procedure is divided
          into a series of steps, performed in the given order. </para>
      <para>Each step contains a list of required and optional parameters,
        along with a short description and its default value.</para>

      <para>Each cluster script understands a set of common parameters.
        These parameters can be passed to any script:</para>

      <table>
        <title>Common parameters</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Argument</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><parameter>action</parameter></entry>
              <entry><replaceable>INDEX</replaceable></entry>
              <entry>If set, only execute a single action (index, as
                returned by verify)</entry>
            </row>
            <row>
              <entry><parameter>dry_run</parameter></entry>
              <entry><replaceable>BOOL</replaceable></entry>
              <entry>If set, simulate execution only (default: no) </entry>
            </row>
            <row>
              <entry><parameter>nodes</parameter></entry>
              <entry><replaceable>LIST</replaceable></entry>
              <entry>List of nodes to execute the script for</entry>
            </row>
            <row>
              <entry><parameter>port</parameter></entry>
              <entry><replaceable>NUMBER</replaceable></entry>
              <entry>Port to connect to</entry>
            </row>
            <row>
              <entry><parameter>statefile</parameter></entry>
              <entry><replaceable>FILE</replaceable></entry>
              <entry>When single-stepping, the state is saved in the given
                file </entry>
            </row>
            <row>
              <entry><parameter>sudo</parameter></entry>
              <entry><replaceable>BOOL</replaceable></entry>
              <entry>If set, crm prompts for a sudo password and uses sudo
                where appropriate (default: no) </entry>
            </row>
            <row>
              <entry><parameter>timeout</parameter></entry>
              <entry><replaceable>NUMBER</replaceable></entry>
              <entry>Execution timeout in seconds (default: 600) </entry>
            </row>
            <row>
              <entry><parameter>user</parameter></entry>
              <entry><replaceable>USER</replaceable></entry>
              <entry>Run script as the given user </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect3>

    <sect3 xml:id="sec-ha-manual-config-clusterscripts-verify-run">
      <title>Verifying and running a cluster script</title>
      <para>Before running a cluster script, review the actions that it will
          perform and verify its parameters to avoid problems. A cluster script
          can potentially perform a series of actions and may fail for
          various reasons. Thus, verifying your parameters before
          running it helps to avoid problems.</para>
      <para>For example, the <systemitem>mailto</systemitem> resource agent
        requires a unique identifier and an e-mail address. To verify these
        parameters, run:</para>
      <screen>&prompt.root;<command>crm script verify mailto id=sysadmin email=&exampleuser_plain;@example.org</command>
1. Ensure mail package is installed

        mailx

2. Configure cluster resources

        primitive sysadmin MailTo
                email="tux@example.org"
                op start timeout="10"
                op stop timeout="10"
                op monitor interval="10" timeout="10"

        clone c-sysadmin sysadmin</screen>
      <para>The <command>verify</command> command prints the steps and replaces
        any placeholders with your given parameters. If <command>verify</command>
        finds any problems, it reports it.
        If everything is OK, replace the <command>verify</command>
        command with <command>run</command>:</para>
      <screen>&prompt.root;<command>crm script run mailto id=sysadmin email=&exampleuser_plain;@example.org</command>
INFO: MailTo
INFO: Nodes: &node1;, &node2;
OK: Ensure mail package is installed
OK: Configure cluster resources</screen>
      <para>Check whether your resource is integrated into your cluster
          with <command>crm status</command>:</para>
      <screen>&prompt.root;<command>crm status</command>
[...]
 Clone Set: c-sysadmin [sysadmin]
     Started: [ &node1; &node2; ]</screen>
    </sect3>

  </sect2>

  <sect2 xml:id="sec-ha-manual-config-template">
   <title>Using configuration templates</title>
    <note>
      <title>Deprecation notice</title>
      <para>The use of configuration templates is deprecated and will
        be removed in the future. Configuration templates will be replaced
        by cluster scripts. See <xref linkend="sec-ha-manual-config-clusterscripts"/>.
      </para>
    </note>
   <para>
    Configuration templates are ready-made cluster configurations for
    &crmsh;. Do not confuse them with the <emphasis>resource
    templates</emphasis> (as described in
    <xref linkend="sec-ha-manual-config-rsc-template"/>). Those are
    templates for the <emphasis>cluster</emphasis> and not for the crm
    shell.
   </para>
   <para>
    Configuration templates require minimum effort to be tailored to the
    particular user's needs. Whenever a template creates a configuration,
    warning messages give hints which can be edited later for further
    customization.
   </para>
   <para>
    The following procedure shows how to create a simple yet functional
    Apache configuration:
   </para>
   <procedure xml:id="pro-ha-manual-config-template">
    <step>
     <para>
      Log in as &rootuser; and start the <command>crm</command>
      interactive shell:
     </para>
<screen>&prompt.root;<command>crm configure</command></screen>
    </step>
    <step>
     <para>
      Create a new configuration from a configuration template:
     </para>
     <substeps performance="required">
      <step>
       <para>
        Switch to the <command>template</command> subcommand:
       </para>
<screen>&prompt.crm.conf;<command>template</command></screen>
      </step>
      <step>
       <para>
        List the available configuration templates:
       </para>
<screen>&prompt.crm.conf.templ;<command>list templates</command>
gfs2-base   filesystem  virtual-ip  apache   clvm     ocfs2    gfs2</screen>
      </step>
      <step>
       <para>
        Decide which configuration template you need. As we need an Apache
        configuration, we select the <literal>apache</literal> template and
        name it <literal>g-intranet</literal>:
       </para>
<screen>&prompt.crm.conf.templ;<command>new g-intranet apache</command>
INFO: pulling in template apache
INFO: pulling in template virtual-ip</screen>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Define your parameters:
     </para>
     <substeps performance="required">
      <step>
       <para>
        List the configuration you have created:
       </para>
<screen>&prompt.crm.conf.templ;<command>list</command>
g-intranet</screen>
      </step>
      <step xml:id="st-config-cli-show">
       <para>
        Display the minimum required changes that need to be filled out by
        you:
       </para>
<screen>&prompt.crm.conf.templ;<command>show</command>
ERROR: 23: required parameter ip not set
ERROR: 61: required parameter id not set
ERROR: 65: required parameter configfile not set</screen>
      </step>
      <step xml:id="st-config-cli-edit">
       <para>
        Invoke your preferred text editor and fill out all lines that have
        been displayed as errors in <xref linkend="st-config-cli-show"/>:
       </para>
<screen>&prompt.crm.conf.templ;<command>edit</command></screen>
      </step>
<!--<step>
      <para>Edit all lines starting with <literal>%%</literal>. If you
       need an overview, use the following command in another &rootuser;
       shell:</para>
      <screen>grep -n "^%%" /root/.crmconf/intranet
23:%% ip
31:%% netmask
35:%% lvs_support
61:%% id  intranet
65:%% configfile
71:%% options
76:%% envfiles</screen>
     </step>-->
     </substeps>
    </step>
    <step>
     <para>
      Show the configuration and check whether it is valid (bold text
      depends on the configuration you have entered in
      <xref linkend="st-config-cli-edit" xrefstyle="select:label"/>):
     </para>
<screen>&prompt.crm.conf.templ;<command>show</command>
primitive virtual-ip ocf:heartbeat:IPaddr \
    params ip=<emphasis role="strong">"192.168.1.101"</emphasis>
primitive apache apache \
    params configfile=<emphasis role="strong">"/etc/apache2/httpd.conf"</emphasis>
    monitor apache 120s:60s
group <emphasis role="strong">g-intranet</emphasis> \
    apache virtual-ip</screen>
    </step>
    <step>
     <para>
      Apply the configuration:
     </para>
<screen>&prompt.crm.conf.templ;<command>apply</command>
&prompt.crm.conf;<command>cd ..</command>
&prompt.crm.conf;<command>show</command></screen>
    </step>
    <step>
     <para>
      Submit your changes to the CIB:
     </para>
<screen>&prompt.crm.conf;<command>commit</command></screen>
    </step>
   </procedure>
   <para>
    It is possible to simplify the commands even more, if you know the
    details. The above procedure can be summarized with the following
    command on the shell:
   </para>
<screen>&prompt.root;<command>crm configure template \
   new g-intranet apache params \
   configfile="/etc/apache2/httpd.conf" ip="192.168.1.101"</command></screen>
   <para>
    If you are inside your internal <command>crm</command> shell, use the
    following command:
   </para>
<screen>&prompt.crm.conf.templ;<command>new intranet apache params \
   configfile="/etc/apache2/httpd.conf" ip="192.168.1.101"</command></screen>
   <para>
    However, the previous command only creates its configuration from the
    configuration template. It does not apply nor commit it to the CIB.
   </para>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-shadowconfig">
   <title>Testing with shadow configuration</title>
   <para>
    A shadow configuration is used to test different configuration
    scenarios. If you have created several shadow configurations, you can
    test them one by one to see the effects of your changes.
   </para>
   <para>
    The usual process looks like this:
   </para>
   <procedure>
    <step>
     <para>
      Log in as &rootuser; and start the <command>crm</command>
      interactive shell:
     </para>
<screen>&prompt.root;<command>crm configure</command></screen>
    </step>
    <step>
     <para>
      Create a new shadow configuration:
     </para>
<screen>&prompt.crm.conf;<command>cib new myNewConfig</command>
INFO: myNewConfig shadow CIB created</screen>
     <para>
      If you omit the name of the shadow CIB, a temporary name
      <literal>@tmp@</literal> is created.
     </para>
    </step>
    <step>
     <para>
      To copy the current live configuration into your shadow
      configuration, use the following command, otherwise skip this step:
     </para>
<screen>crm(myNewConfig)# <command>cib reset myNewConfig</command></screen>
     <para>
      The previous command makes it easier to modify any existing resources
      later.
     </para>
    </step>
    <step>
     <para>
      Make your changes as usual. After you have created the shadow
      configuration, all changes go there. To save all your changes, use the
      following command:
     </para>
<screen>crm(myNewConfig)# <command>commit</command></screen>
    </step>
    <step>
     <para>
      If you need the live cluster configuration again, switch back with the
      following command:
     </para>
<screen>crm(myNewConfig)configure# <command>cib use live</command>
&prompt.crm;</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-debugging">
   <title>Debugging your configuration changes</title>
   <para>
    Before loading your configuration changes back into the cluster, it is
    recommended to review your changes with <command>ptest</command>. The
    <command>ptest</command> command can show a diagram of actions that will
    be induced by committing the changes. You need the
    <package>graphviz</package> package to display the diagrams. The
    following example is a transcript, adding a monitor operation:
   </para>
<screen>&prompt.root;<command>crm configure</command>
&prompt.crm.conf;<command>show fence-&node2;</command>
primitive fence-&node2; stonith:apcsmart \
        params hostlist="&node2;"
&prompt.crm.conf;<command>monitor fence-&node2; 120m:60s</command>
&prompt.crm.conf;<command>show changed</command>
primitive fence-&node2; stonith:apcsmart \
        params hostlist="&node2;" \
        op monitor interval="120m" timeout="60s"
&prompt.crm.conf;<command>ptest</command>
&prompt.crm.conf;<command>commit</command></screen>
  </sect2>

  <sect2 xml:id="sec-ha-manual-config-diagram">
   <title>Cluster diagram</title>
   <para>
    To output a cluster diagram, use the command
    <command>crm configure graph</command>. It displays
    the current configuration on its current window, therefore requiring
    X11.
   </para>
   <para>
    If you prefer Scalable Vector Graphics (SVG), use the following command:
   </para>
<screen>&prompt.root;<command>crm configure graph dot config.svg svg</command></screen>
  </sect2>

 <sect2 xml:id="sec-ha-manual-config-crm-corosync">
  <title>Managing &corosync; configuration</title>

  <para>
   &corosync; is the underlying messaging layer for most HA clusters. The
   <command>corosync</command> subcommand provides commands for editing and
   managing the &corosync; configuration.
  </para>

  <para>
   For example, to list the status of the cluster, use
   <command>status</command>:
  </para>

<screen>&prompt.root;<command>crm corosync status</command>
Printing ring status.
Local node ID 175704363
RING ID 0
        id      = 10.121.9.43
        status  = ring 0 active with no faults
Quorum information
------------------
Date:             Thu May  8 16:41:56 2014
Quorum provider:  corosync_votequorum
Nodes:            2
Node ID:          175704363
Ring ID:          4032
Quorate:          Yes

Votequorum information
----------------------
Expected votes:   2
Highest expected: 2
Total votes:      2
Quorum:           2
Flags:            Quorate

Membership information
----------------------
    Nodeid      Votes Name
 175704363          1 &node1;.&exampledomain; (local)
 175704619          1 &node2;.&exampledomain;</screen>

  <para>
   The <command>diff</command> command compares the
   &corosync; configuration on all nodes (if not stated otherwise) and
   prints the difference between them:
  </para>

<screen>&prompt.root;<command>crm corosync diff</command>
--- &node2;
+++ &node1;
@@ -46,2 +46,2 @@
-       expected_votes: 2
-       two_node: 1
+       expected_votes: 1
+       two_node: 0</screen>

  <para>
   For more details, see
   <link xlink:href="https://crmsh.nongnu.org/crm.8.html#cmdhelp_corosync"/>.
  </para>

  <para>
    You can use the <command>crm cluster init</command>
    script to change the &corosync; communication channels (or rings). For example, you might need
    to switch from using two &corosync; rings to using a single ring with network device bonding,
    or vice versa.
  </para>
  <procedure xml:id="pro-ha-config-crm-corosync">
    <title>Changing &corosync; communication channels with &crmsh;</title>
    <step>
      <para>
        Stop the cluster services on all nodes:
      </para>
<screen>&prompt.root;<command>crm cluster stop --all</command></screen>
    </step>
    <step>
      <para>
        On the first node, change &corosync;'s ring configuration with one of the
        following commands:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            To configure one ring, run the script's <option>corosync</option> stage
            with no additional parameters:
          </para>
<screen>&prompt.root;<command>crm cluster init corosync</command></screen>
          <para>
            Enter <literal>y</literal> to overwrite <filename>/etc/corosync/authkey</filename>
            and <filename>/etc/corosync/corosync.conf</filename>, then accept the proposed
            network address or enter a different one.
          </para>
        </listitem>
        <listitem>
          <para>
            To configure two rings, specify two network addresses by using the
            option <literal>--interface</literal> (or <literal>-i</literal>) twice:
          </para>
<screen>&prompt.root;<command>crm cluster init corosync -i eth0 -i eth1</command></screen>
          <para>
            Press <keycap>Enter</keycap> or enter <literal>y</literal> to accept all of the prompts.
          </para>
        </listitem>
      </itemizedlist>
    </step>
    <step>
      <para>
        On <emphasis>only</emphasis> the first node, start the cluster services:
      </para>
<screen>&prompt.root;<command>crm cluster start</command></screen>
    </step>
    <step>
      <para>
        On each of the other cluster nodes, rejoin the cluster to update the
        &corosync; configuration:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            For one ring, run the following command:
          </para>
<screen>&prompt.root;<command>crm cluster join -c <replaceable>NODE1</replaceable></command></screen>
          <para>
            Accept the proposed network address.
          </para>
        </listitem>
        <listitem>
          <para>
            For two rings, specify the same network interfaces you used for the first node:
          </para>
<screen>&prompt.root;<command>crm cluster join -c <replaceable>NODE1</replaceable> -i eth0 -i eth1</command></screen>
          <para>
            Accept the proposed network addresses.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        This updates the &corosync; configuration and starts the cluster services on the node.
      </para>
    </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec-ha-config-crm-setpwd">
  <title>Setting passwords independent of <filename>cib.xml</filename></title>

  <para>
   If your cluster configuration contains sensitive information, such
   as passwords, it should be stored in local files. That way, these
   parameters will never be logged or leaked in support reports.
  </para>

  <para>
   Before using <command>secret</command>, run the
   <command>show</command> command to get an overview of all your
   resources:
  </para>

<screen>&prompt.root;<command>crm configure show</command>
primitive mydb mysql \
   params replication_user=admin ...</screen>

  <para>
   To set a password for the above <literal>mydb</literal>
   resource, use the following commands:
  </para>

<screen>&prompt.root;<command>crm resource secret mydb set passwd linux</command>
INFO: syncing /var/lib/heartbeat/lrm/secrets/mydb/passwd to [your node list]</screen>

  <para>
   You can get the saved password back with:
  </para>

<screen>&prompt.root;<command>crm resource secret mydb show passwd</command>
linux</screen>

  <para>
   The parameters need to be synchronized between nodes; the
   <command>crm resource secret</command> command takes care of that. We
   highly recommend that you only use this command to manage secret parameters.
  </para>
 </sect2>
</sect1>
