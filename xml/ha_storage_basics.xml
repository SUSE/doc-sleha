<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-ha-storage-dlm">
 <title>Distributed Lock Manager (DLM)</title>
 <info>
  <abstract>
   <para>
    The Distributed Lock Manager (DLM) in the kernel is the base component used
    by &ocfs;, GFS2, Cluster MD, and &clvm; (lvmlockd) to provide active-active
    storage at each respective layer.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec-ha-storage-dlm-protocol">
  <title>Protocols for DLM communication</title>

  <para>
   To avoid single points of failure, redundant communication paths are important
   for &ha; clusters. This is also true for DLM communication. If network bonding
   (Link Aggregation Control Protocol, LACP) cannot be used for any reason, we
   highly recommend defining a redundant communication channel (a second ring)
   in &corosync;. For details, see <xref
   linkend="pro-ha-installation-setup-channel2"/>.
  </para>
  <para>
   DLM communicates through port 21064 using either the TCP or SCTP protocol,
   depending on the configuration in &corosync.conf;:
  </para>
 <itemizedlist>
  <listitem>
   <para>
     If <guimenu>rrp_mode</guimenu> is set to <literal>none</literal> (which
     means redundant ring configuration is disabled), DLM automatically uses
     TCP. However, without a redundant communication channel, DLM communication
     will fail if the TCP link is down.
   </para>
  </listitem>
  <listitem>
   <para>
     If <guimenu>rrp_mode</guimenu> is set to <literal>passive</literal> (which
     is the typical setting), and a second communication ring in &corosync.conf;
     is configured correctly, DLM automatically uses SCTP. In this case, DLM
     messaging has the redundancy capability provided by SCTP.
   </para>
  </listitem>
 </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-ha-storage-generic-dlm-config">
  <title>Configuring DLM cluster resources</title>

  <para>
   DLM uses the cluster membership services from &pace; which run in user
   space. Therefore, DLM needs to be configured as a clone resource that is
   present on each node in the cluster.
  </para>

  <note>
   <title>DLM resource for several solutions</title>
   <para>
    As &ocfs;, GFS2, Cluster MD, and &clvm; (lvmlockd) all use DLM, it is
    enough to configure one resource for DLM. As the DLM resource runs on all
    nodes in the cluster it is configured as a clone resource.
   </para>
   <para>
    If you have a setup that includes both &ocfs; and &clvm;, configuring
    <emphasis>one</emphasis> DLM resource for both &ocfs; and &clvm; is enough.
    In this case, configure DLM using <xref linkend="pro-dlm-resources"/>.
   </para>
   <para>
    However, if you need to keep the resources that use DLM independent from one
    another (such as multiple &ocfs; mount points), use separate colocation and
    order constraints instead of a group. In this case, configure DLM using
    <xref linkend="pro-dlm-multiple-resources"/>.
   </para>
  </note>

  <procedure xml:id="pro-dlm-resources">
   <title>Configuring a base group for DLM</title>
   <para>
    This configuration consists of a base group that includes several primitives
    and a base clone. Both base group and base clone can be used in various
    scenarios afterward (for both &ocfs; and &clvm;, for example). You only need
    to extend the base group with the respective primitives as needed. As the
    base group has internal colocation and ordering, this simplifies the
    overall setup as you do not need to specify several individual groups,
    clones and their dependencies.
   </para>
   <step>
    <para>
     Log in to a node as &rootuser; or equivalent.
    </para>
   </step>
   <step>
    <para>
     Run <command>crm configure</command>.
    </para>
   </step>
   <step>
    <para>
     Create the primitive resource for DLM:
    </para>
<screen>&prompt.crm.conf;<command>primitive</command> dlm ocf:pacemaker:controld \
  op monitor interval="60" timeout="60"</screen>
   </step>
   <step>
    <para>
     Create a base group for the <literal>dlm</literal> resource and further storage-related
     resources:
    </para>
<screen>&prompt.crm.conf;<command>group</command> g-storage dlm</screen>
   </step>
   <step>
    <para>
     Clone the <literal>g-storage</literal> group so that it runs on all nodes:
    </para>
<screen>&prompt.crm.conf; <command>clone</command> cl-storage g-storage \
  meta interleave=true target-role=Started</screen>
   </step>
   <step>
    <para>
     Review your changes with <command>show</command>.
    </para>
   </step>
   <step>
    <para>
     If everything is correct, submit your changes with
     <command>commit</command> and leave the crm live configuration with
     <command>quit</command>.
    </para>
   </step>
  </procedure>

  <note>
   <title>Failure when disabling &stonith;</title>
   <para>
    Clusters without &stonith; are not supported. If you set the global cluster
    option <varname>stonith-enabled</varname> to <literal>false</literal> for
    testing or troubleshooting purposes, the DLM resource and all services
    depending on it (such as &clvm;, GFS2, and &ocfs;) will fail to start.
   </para>
  </note>

  <procedure xml:id="pro-dlm-multiple-resources">
   <title>Configuring an independent DLM resource</title>
   <para>
    This configuration consists of a primitive and a clone, but no group.
    By adding colocation and order constraints, you can avoid introducing
    dependencies between multiple resources that use DLM (such as multiple &ocfs;
    mount points).
   </para>
   <step>
    <para>
     Log in to a node as &rootuser; or equivalent.
    </para>
   </step>
   <step>
    <para>
     Run <command>crm configure</command>.
    </para>
   </step>
   <step>
    <para>
     Create the primitive resource for DLM:
    </para>
<screen>&prompt.crm.conf;<command>primitive</command> dlm ocf:pacemaker:controld \
  op start timeout=90 interval=0 \
  op stop timeout=100 interval=0 \
  op monitor interval=60 timeout=60</screen>
   </step>
   <step>
    <para>
     Clone the <literal>dlm</literal> resource so that it runs on all nodes:
    </para>
<screen>&prompt.crm.conf; <command>clone</command> cl-dlm dlm meta interleave=true</screen>
   </step>
   <step>
    <para>
     Review your changes with <command>show</command>.
    </para>
   </step>
   <step>
    <para>
     If everything is correct, submit your changes with
     <command>commit</command> and leave the crm live configuration with
     <command>quit</command>.
    </para>
   </step>
  </procedure>
 </sect1>
</chapter>
