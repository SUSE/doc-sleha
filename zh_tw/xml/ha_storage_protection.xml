<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="ha_storage_protection.xml" version="5.0" xml:id="cha-ha-storage-protect">
 <title>儲存保護和 SBD</title>
 <info>
  <abstract>
   <para>
    SBD (STONITH 區塊裝置) 透過經由共享塊儲存 (SAN、iSCSI、FCoE 等) 交換訊息來為基於 Pacemaker 的叢集提供節點圍籬區隔機制。此方法可將圍籬區隔機制隔離開，使其不受韌體版本變更的影響，或不依賴於特定韌體控制器。SBD 需要在每個節點上安裝一個監視程式，以確定能真正停止行為異常的節點。在某些情況下，還可以透過無磁碟模式執行 SBD，以便使用不含共享儲存的 SBD。
   </para>
   <para>
    每則訊息前的 <package>ha-cluster-bootstrap</package>  程序檔提供了一種自動設定叢集的方式，並可選擇使用 SBD 做為圍籬區隔機制。如需詳細資料，請參閱《<citetitle>安裝與設定快速入門</citetitle>》。但是，手動設定 SBD 可為您提供個別設定的更多選項。
   </para>
   <para>
    本章介紹 SBD 背後的概念。它將引導您完成 SBD 所需元件的設定，以保護您的叢集避免在發生電腦分裂的情況下出現潛在資料毀損。
   </para>
   <para>
    除了節點層級圍籬區隔外，您還可以使用額外的儲存保護機制，例如 LVM2 獨佔啟用或 OCFS2 檔案鎖定支援 (資源層級圍籬區隔)。它們可以保護您的系統，避免出現管理或應用程式故障。
   </para>
  </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:maintainer/>
        <dm:status>編輯</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>yes</dm:translation>
        <dm:languages/>
        <dm:release/>
        <dm:repository/>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec-ha-storage-protect-overview">
      <title>概念綜覽</title>
      <para>SBD 是 <emphasis>Storage-Based Death</emphasis> (基於儲存的終止) 或 <emphasis>STONITH Block Device</emphasis> (STONITH 區塊裝置) 的縮寫。
      </para>
      <para>
        高可用性叢集堆疊的最高優先程度是保護資料完整性。此項保護透過防止對資料儲存進行未協調的並行存取來實現。叢集堆疊會使用幾種控制機制來實現此目標。
      </para>
      <para>
        但是，如果叢集中選出數個 DC，則可能導致網路分割或軟體故障。如果系統允許出現這種所謂的電腦分裂情況，就可能會產生資料毀損。
      </para>
      <para>
        避免出現這種情況可採取的主要機制是透過 STONITH 實現節點圍籬區隔。如果使用 SBD 做為節點圍籬區隔機制可在電腦分裂情況下關閉節點而無需使用外部關閉裝置。
      </para>

  <variablelist>
   <title>SBD 元件和機制</title>
   <varlistentry>
    <term>SBD 分割區</term>
    <listitem>
     <para> 如果一個環境中的所有節點都可以存取共享儲存，系統會格式化裝置的一小塊分割區用於 SBD。該分割區的大小取決於所用磁碟的區塊大小 (例如，對於區塊大小為 512 位元組的標準 SCSI 磁碟，該分割區大小為 1 MB；區塊大小為 4 KB 的 DASD 磁碟需要 4 MB 大小的分割區)。啟始化程序會在裝置上建立訊息配置，設定最多 255 個節點的訊息插槽。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>SBD 精靈</term>
    <listitem>
     <para> 設定完各自的 SBD 精靈後，在每個節點上使其上線，然後再啟動其餘叢集堆疊。當其他所有叢集元件都關閉後，SBD 才會終止，這樣便確保了只要叢集資源啟動，SBD 就會加以監督。 </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>訊息</term>
    <listitem>
     <para>
      精靈會自動在分割區上為自己配置一個訊息槽，然後持續監控，查看是否有傳送給它的訊息。一旦收到訊息，精靈會立即回應請求，例如為圍籬區隔啟動關機或重新開機操作。
     </para>
     <para>
      另外，此精靈會持續監控與儲存裝置的連線，如果無法連接分割區則會自行終止。這樣可保證精靈不會錯過圍籬區隔訊息。如果叢集資料位於其他分割區的同一個邏輯單位，則一旦與儲存失去連線，工作負載便將終止，因此不會增加故障點。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>監視程式</term>
     <listitem>
      <para>
      只要使用 SBD，就必須確保監視程式正常運作。最新的系統支援<emphasis>硬體監視程式</emphasis>，該程式需要由某個軟體元件來<quote>激發</quote>或<quote>餽送</quote>。軟體元件 (在本例中為 SBD 精靈) 透過將服務脈衝定期寫入監視程式來<quote>饋送</quote>監視程式。如果精靈停止饋送監視程式，硬體將強制重新啟動系統。這樣可以保障 SBD 程序自身不出現故障，例如沒有回應或陷入 I/O 錯誤。
     </para>
     </listitem>
   </varlistentry>
  </variablelist>
  <para>
   如果已啟動 Pacemaker 整合，則在大部分裝置的連接已中斷的情況下，SBD 將不會自我圍籬區隔。例如，假定您的叢集包含三個節點︰A、B 和 C。由於網路分隔，A 只能看到它自己，而 B 和 C 之間仍可通訊。在本例中，有兩個叢集分割區，一個由於節點占多數 (B 和 C) 而達到最低節點數，而另一個 (A) 則未達到。如果在大部分圍籬區隔裝置無法連接時發生這種情況，節點 A 將立即自我關閉，但是節點 B 和 C 將繼續執行。
   </para>
  </sect1>

 <sect1 xml:id="sec-ha-storage-protect-steps">
 <title>手動設定 SBD 綜覽</title>
 <para>
  手動設定儲存式圍籬區隔時必須執行以下步驟。必須以 <systemitem class="username">root</systemitem> 身分執行這些步驟。開始執行之前，請查看<xref linkend="sec-ha-storage-protect-req" xrefstyle="sec.ha.storage.protect.req"/>。
  </para>
 <procedure>
   <step>
    <para>
     <xref linkend="sec-ha-storage-protect-watchdog" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>根據您的情況，可將 SBD 與一到三部裝置搭配使用，或以無磁碟模式使用。如需綜覽，請參閱<xref linkend="sec-ha-storage-protect-fencing-number"/>。如需詳細的設定，請參閱︰</para>
    <itemizedlist>
     <listitem>
      <para>
       <xref linkend="sec-ha-storage-protect-fencing-setup" xrefstyle="select:title"/>
      </para>
     </listitem>
     <listitem>
      <para>
       <xref linkend="sec-ha-storage-protect-diskless-sbd" xrefstyle="select:title"/>
      </para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>
     <xref linkend="sec-ha-storage-protect-test" xrefstyle="select:title"/>
    </para>
   </step>
  </procedure>
 </sect1>

 <sect1 xml:id="sec-ha-storage-protect-req">
  <title>要求</title>
   <itemizedlist>
   <listitem>
    <para>最多可將三部 SBD 裝置用於基於儲存的圍籬區隔。使用一到三部裝置時，必須可從所有節點存取共享儲存。</para>
   </listitem>
   <listitem>
    <para>針對叢集中的所有節點，共享儲存裝置的路徑必須永久且一致。請使用穩定的裝置名稱，例如 <filename>/dev/disk/by-id/dm-uuid-part1-mpath-abcedf12345</filename>。
     </para>
   </listitem>
   <listitem>
    <para>可透過光纖通道 (FC)、乙太網路光纖通道 (FCoE) 甚至 iSCSI 來連接共用儲存。在虛擬化環境中，監管程式可能會提供共用區塊裝置。在任何情況下，該共用區塊裝置中的內容對於所有叢集節點都需要保持一致。請確定快取不會破壞這種一致性。
    </para>
   </listitem>
   <listitem>
    <para> 共享儲存節段<emphasis>不得</emphasis>使用基於主機的 RAID、LVM2 或 DRBD*。DRBD 可能已分割，這會對 SBD 造成問題，因為 SBD 中不能存在兩種狀態。不能將叢集多裝置 (叢集 MD) 用於 SBD。
    </para>
   </listitem>
   <listitem>
    <para> 但是，建議使用基於儲存的 RAID 和多重路徑來提升可靠性。 </para>
   </listitem>
   <listitem>
    <para>可以在不同叢集之間共用某個 SBD 裝置，前提是共用該裝置的節點數不超過 255 個。 </para>
   </listitem>
   <listitem>
    <para>對於具有兩個以上節點的叢集，還可以在<emphasis>無磁碟</emphasis>模式下使用 SBD。
   </para>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 xml:id="sec-ha-storage-protect-fencing-number">
  <title>SBD 裝置數量</title>
  
  <para> SBD 支援最多使用三部裝置︰ </para>
  <variablelist>
   <varlistentry>
    <term>1 部裝置</term>
    <listitem>
     <para>
      最簡單的實作。這種組態適合所有資料均位於同一共享儲存上的叢集。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>2 部裝置</term>
    <listitem>
     <para>
      這種組態主要適用於這樣的環境︰使用基於主機的鏡像複製，但是沒有第三個儲存裝置可用。如果 SBD 失去對一個鏡像複製方的存取能力，它不會立即終止，以便允許叢集繼續執行。不過，由於 SBD 掌握的情況不夠全面，它無法偵測儲存的不對稱分裂，所以當只有一個鏡像複製方可用時，它不會圍籬區隔另一方。因此，在其中一個儲存陣列已關閉的情況下，它無法自動容許再一次的故障。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>3 部裝置</term>
    <listitem>
     <para>
      最可靠的組態。它具有從一部裝置中斷 (可能是由於失敗或維護) 的情況中復原的能力。只會在有一部以上裝置失去連接以及必要時，SBD 才會自行終止，具體取決於叢集分割區或節點的狀態。如果至少有兩部裝置仍然可存取，便能成功傳輸圍籬區隔訊息。
     </para>
     <para>
      這種組態適合儲存不限制為單個陣列的較複雜情況。基於主機的鏡像複製解決方案可以在每個鏡像複製方設定一個 SBD (不鏡像複製自身)，在 iSCSI 上另外設定一個連接中斷器。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>無磁碟</term>
    <listitem>
     <para>如果您想要建立一個不含共享儲存的圍籬區隔機制，則此組態十分有用。在此無磁碟模式下，SBD 會使用硬體監視程式來圍籬區隔節點，而不依賴於任何共享裝置。不過，無磁碟 SBD 不能處理雙節點叢集的電腦分裂情況。因此，要使用無磁碟 SBD，叢集需要有三個或更多節點。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="sec-ha-storage-protect-watchdog-timings">
   <title>逾時計算</title>
    <para>
      使用 SBD 做為圍籬區隔機制時，必須考慮所有元件的逾時，因為它們之間相互依賴。
    </para>
    <variablelist>
     <varlistentry>
      <term>監視程式逾時</term>
      <listitem>
       <para>
        此逾時在啟始化 SBD 裝置期間設定。它主要取決於您的儲存延遲。必須能夠在此段時間內成功讀取大多數裝置。否則，節點可能會自我圍籬區隔。
       </para>
       <note>
        <title>多路徑或 iSCSI 設定</title>
          <para>
          如果 SBD 裝置位於多路徑設定或 iSCSI 上，則應將逾時設定為偵測到路徑故障並切換到下一個路徑所需的時間。
          </para>
          <para>
           這還意味著在 <filename>/etc/multipath.conf</filename> 中，<literal>max_polling_interval</literal> 的值必須小於 <literal>watchdog</literal> 逾時。
         </para>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>msgwait</literal> 逾時</term>
      <listitem>
       <para>
        此逾時在啟始化 SBD 裝置期間設定。它定義了將訊息寫入 SBD 裝置上的某個節點插槽後經過多長時間會視為已傳遞。該逾時應設定得足夠長，讓節點有時間偵測到其是否需要自我圍籬區隔。
       </para>
       <para>
        但是，如果 <literal>msgwait</literal> 逾時相對較長，已圍籬區隔的叢集節點可能會在圍籬區隔動作傳回之前便又重新加入。此情況可透過在 SBD 組態中設定  <varname>SBD_DELAY_START</varname>
         參數來緩解，請參閱<xref linkend="st-ha-storage-protect-sbd-delay-start"/> 中的<xref linkend="pro-ha-storage-protect-sbd-config" xrefstyle="select:label"/>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>CIB 中的 <literal>stonith-timeout</literal></term>
      <listitem>
       <para>
        此逾時在 CIB 中做為全域叢集內容設定。它定義了等待 STONITH 動作 (重新開機、開啟、關閉) 完成的時間。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>CIB 中的 <literal>stonith-watchdog-timeout</literal></term>
      <listitem>
       <para>
        此逾時在 CIB 中做為全域叢集內容設定。如果未明確設定，則預設值為 <literal>0</literal>，此值適用於 SBD 與一到三部裝置搭配使用的情況。若要以無磁碟模式使用 SBD，請參閱<xref linkend="pro-ha-storage-protect-confdiskless"/>以取得詳細資料。</para>
      </listitem>
     </varlistentry>
    </variablelist>
  <para>
   如果您變更監視程式逾時，則需要同時調整另外兩個逾時。以下<quote>公式</quote>大致表達了這三個值之間的關係︰
  </para>
   <example xml:id="ex-ha-storage-protect-sbd-timings">
    <title>逾時計算公式</title>
    <screen>Timeout (msgwait) &gt;= (Timeout (watchdog) * 2)
stonith-timeout = Timeout (msgwait) + 20%</screen>
   </example>
   <para>
    例如，如果您將監視程式逾時設定為 <literal>120</literal>，則請將 <literal>msgwait</literal> 逾時設定為 <literal>240</literal>，並將 <literal>stonith-timeout</literal> 設定為 <literal>288</literal>。
   </para>
    <para>
     如果您使用  <package>ha-cluster-bootstrap</package>  程序檔設定叢集並啟始化 SBD 裝置，則會自動考慮這些逾時之間的關係。
    </para>
 </sect1>

 <sect1 xml:id="sec-ha-storage-protect-watchdog">
  <title>設定監視程式</title>
  <para> <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise High Availability Extension</phrase></phrase> 隨附了幾個核心模組用於提供硬體特定的監視程式驅動程式。如需最常用監視程式驅動程式清單，請參閱<xref linkend="tab-ha-storage-protect-watchdog-drivers" xrefstyle="select:title    nopage"/>。
 </para>
 <para>
  對於生產環境中的叢集，建議使用硬體特定的監視程式驅動程式。不過，如果沒有與您的硬體相符的監視程式，則可以將 <systemitem class="resource">softdog</systemitem> 當成核心監視程式模組使用。
 </para>
 <para>
   High Availability Extension 使用 SBD 精靈做為<quote>饋送</quote>監視程式的軟體元件。</para>

  <sect2 xml:id="sec-ha-storage-protect-hw-watchdog">
   <title>使用硬體監視程式</title>

   <para>找出指定系統的正確監視程式核心模組並非沒有意義。自動查探常常會失敗。因此，在載入正確的模組之前，許多模組即已載入。</para>

  <para>
   <xref linkend="tab-ha-storage-protect-watchdog-drivers" xrefstyle="select:label"/> 列出了最常用的監視程式驅動程式。如果您的硬體未列在其中，也可從目錄 <filename>/lib/modules/<replaceable>KERNEL_VERSION</replaceable>/kernel/drivers/watchdog</filename> 提供的清單中進行選擇。另外，還可諮詢您的硬體供應商取得名單。</para>

     <table xml:id="tab-ha-storage-protect-watchdog-drivers">
        <title>常用監視程式驅動程式</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>硬體</entry>
           <entry>驅動程式</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>HP</entry>
           <entry><systemitem class="resource">hpwdt</systemitem></entry>
          </row>
          <row>
           <entry>Dell、Fujitsu、Supermicro</entry>
           <entry><systemitem class="resource">iTCO_wdt</systemitem></entry>
          </row>
          <row>
           <entry>Lenovo</entry>
           <entry><systemitem class="resource">ipmi_watchdog</systemitem></entry>
          </row>
          <row>
           <entry>IBM 大型主機上的 VM 或 z/VM</entry>
           <entry><systemitem class="resource">vmwatchdog</systemitem></entry>
          </row>
          <row>
           <entry>Xen VM (DomU)</entry>
           <entry><systemitem class="resource">xen_wdt</systemitem></entry>
          </row>
          <row>
           <entry>Generic</entry>
           <entry><systemitem class="resource">softdog</systemitem></entry>
          </row>
         </tbody>
        </tgroup>
       </table>

 <important>
    <title>存取監視程式計時器</title>
    <para>有些硬體廠商交付的系統管理軟體 (例如 HP ASR 精靈) 會使用監視程式來進行系統重設。如果 SBD 使用了監視程式，請停用此類軟體。此時不能有任何其他軟體存取監視程式計時器。 </para>
   </important>

   <procedure xml:id="pro-ha-storage-protect-watchdog">
    <title>載入正確的核心模組</title>
    <para>若要確定載入正確的監視程式模組，請執行如下操作︰</para>
     <step>
      <para>列出已隨核心版本安裝的驅動程式︰</para>
       <screen><prompt role="root">root # </prompt><command>rpm</command> -ql kernel-<replaceable>VERSION</replaceable> | <command>grep</command> watchdog</screen>
      </step>
      <step xml:id="st-ha-storage-listwatchdog-modules">
       <para>列出核心中目前載入的任何監視程式模組︰</para>
       <screen><prompt role="root">root # </prompt><command>lsmod</command> | <command>egrep</command> "(wd|dog)"</screen>
      </step>
      <step>
       <para>如果傳回了結果，請卸載錯誤的模組︰</para>
       <screen><prompt role="root">root # </prompt><command>rmmod</command> <replaceable>WRONG_MODULE</replaceable></screen>
      </step>
      <step>
     <para> 啟用與您的硬體相符的監視程式模組︰ </para>
     <remark>toms 2018-09-27: (lpinne) Remove the echo line. toms: why?</remark>
     <screen><prompt role="root">root # </prompt><command>echo</command> <replaceable>WATCHDOG_MODULE</replaceable> &gt; /etc/modules-load.d/watchdog.conf
<prompt role="root">root # </prompt><command>systemctl</command> restart systemd-modules-load</screen>
    </step>
    <step>
     <para>測試是否已正確載入監視程式模組︰</para>
     <screen><prompt role="root">root # </prompt><command>lsmod</command> | <command>egrep</command> "(wd|dog)"</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-ha-storage-protect-sw-watchdog">
   <title>使用軟體監視程式 (softdog)</title>
   <para>
    對於生產環境中的叢集，建議使用硬體特定的監視程式驅動程式。不過，如果沒有與您的硬體相符的監視程式，則可以將 <systemitem class="resource">softdog</systemitem> 當成核心監視程式模組使用。 </para>

   <important>
    <title>Softdog 限制</title>
    <para>
     Softdog 驅動程式假設至少有一個 CPU 仍然在執行。如果所有 CPU 均已堵塞，則 softdog 驅動程式中應該將系統重新開機的代碼永遠都不會執行。相反地，即使所有 CPU 均已堵塞，硬體監視程式也仍然會繼續運作。
    </para>
   </important>

   <procedure xml:id="pro-ha-storage-protect-sw-watchdog">
    <title>載入 Softdog 核心模組</title>
    <step>
     <para>啟用 softdog 驅動程式︰</para>
     <screen><prompt role="root">root # </prompt><command>echo</command> softdog &gt; /etc/modules-load.d/watchdog.conf</screen>
    </step>
    <step>
     <para>在 <filename>/etc/modules-load.d/watchdog.conf</filename> 中新增 <systemitem class="resource">softdog</systemitem> 模組並重新啟動服務︰</para>
         <screen><prompt role="root">root # </prompt><command>echo</command> softdog &gt; /etc/modules-load.d/watchdog.conf
<prompt role="root">root # </prompt><command>systemctl</command> restart systemd-modules-load</screen>
    </step>
    <step>
     <para>測試是否已正確載入 softdog 監視程式模組︰</para>
     <screen><prompt role="root">root # </prompt><command>lsmod</command> | <command>grep</command> softdog</screen>
    </step>
   </procedure>
  </sect2>
 </sect1>

 <sect1 xml:id="sec-ha-storage-protect-fencing-setup">
  <title>設定 SBD 與裝置</title>
  <para>
   以下是設定所必需步驟︰
  </para>
 <procedure>
   <step>
    <para>
     <xref linkend="pro-ha-storage-protect-sbd-create" xrefstyle="select:title"/>
        </para>
   </step>
   <step>
    <para>
     <xref linkend="pro-ha-storage-protect-sbd-config" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
     <xref linkend="pro-ha-storage-protect-sbd-services" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
     <xref linkend="pro-ha-storage-protect-sbd-test" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
     <xref linkend="pro-ha-storage-protect-fencing" xrefstyle="select:title"/>
    </para>
   </step>
  </procedure>
  <para>
    在開始之前，請確定要用於 SBD 的一部或多部區塊裝置滿足在<xref linkend="sec-ha-storage-protect-req" xrefstyle="select:label"/>中指定的要求。
  </para>
  <para>
   設定 SBD 裝置時，您需要考慮幾個逾時值。如需詳細資料，請參閱<xref linkend="sec-ha-storage-protect-watchdog-timings"/>。
  </para>
  <para>
   如果節點上執行的 SBD 精靈更新監視程式計時器的速度不夠快，此節點將自行終止。設定逾時後，請在您的特定環境中予以測試。
  </para>

  <procedure xml:id="pro-ha-storage-protect-sbd-create">
   <title>啟始化 SBD 裝置</title>
   <para>
    若要將 SBD 與共享儲存搭配使用，必須先在一到三部區塊裝置上建立訊息佈局。<command>sbd create</command> 指令會將中繼資料標頭寫入指定的一部或多部裝置。它還將啟始化最多 255 個節點的訊息插槽。如果該指令不含任何其他選項，則執行時將使用預設的逾時設定。</para>
    <warning>
     <title>覆寫現有資料</title>
      <para> 確定要用於 SBD 的一部或多部裝置沒有儲存任何重要資料。執行 <command>sbd create</command> 指令時，會直接覆寫指定區塊裝置的大於第一個 MB，而不會進一步提出申請或進行備份。
      </para>
    </warning>
    <step>
     <para>決定要將哪個區塊裝置或哪些區塊裝置用於 SBD。</para>
    </step>
    <step>
     <para>使用下列指令啟始化 SBD 裝置︰ </para>
     <screen><prompt role="root">root # </prompt><command>sbd</command> -d /dev/<replaceable>SBD</replaceable> create</screen>
     <para>(用實際的路徑名稱取代 <filename>/dev/<replaceable>SBD</replaceable></filename>，例如︰<filename>/dev/disk/by-id/scsi-ST2000DM001-0123456_Wabcdefg</filename>。)</para>
        <para> 若要將多部裝置用於 SBD，請多次指定 <option>-d</option> 選項，例如︰ </para>
     <screen><prompt role="root">root # </prompt><command>sbd</command> -d /dev/<replaceable>SBD1</replaceable> -d /dev/<replaceable>SBD2</replaceable> -d /dev/<replaceable>SBD3</replaceable> create</screen>
    </step>
    <step>
     <para>如果您的 SBD 裝置位於多路徑群組，請使用 <option>-1</option> 和 <option>-4</option> 選項來調整要用於 SBD 的逾時。如需詳細資料，請參閱<xref linkend="sec-ha-storage-protect-watchdog-timings"/>。所有逾時均以秒為單位指定︰</para>
      <screen><prompt role="root">root # </prompt><command>sbd</command> -d /dev/<replaceable>SBD</replaceable> -4 180<co xml:id="co-ha-sbd-msgwait"/> -1 60<co xml:id="co-ha-sbd-watchdog"/> create</screen>
     <calloutlist>
      <callout arearefs="co-ha-sbd-msgwait">
       <para> <option>-4</option> 選項用於指定 <literal>msgwait</literal> 的逾時。在上面的範例中，該逾時設定為 <literal>180</literal> 秒。 </para>
      </callout>
      <callout arearefs="co-ha-sbd-watchdog">
       <para> <option>-1</option> 選項用於指定<literal>監視程式</literal>的逾時。在上面的範例中，該逾時設定為 <literal>60</literal> 秒。模擬監視程式的最小允許值為 <literal>15</literal> 秒。 </para>
      </callout>
     </calloutlist>
    </step>
    <step>
     <para>檢查已寫入裝置的內容︰ </para>
     <screen><prompt role="root">root # </prompt><command>sbd</command> -d /dev/<replaceable>SBD</replaceable> dump
Header version     : 2.1
UUID               : 619127f4-0e06-434c-84a0-ea82036e144c
Number of slots    : 255
Sector size        : 512
Timeout (watchdog) : 60
Timeout (allocate) : 2
Timeout (loop)     : 1
Timeout (msgwait)  : 180
==Header on disk /dev/<replaceable>SBD</replaceable> is dumped</screen>
    <para> 如您所見，逾時也會存入標頭，以確保所有參與的節點在逾時上達成一致。 </para>
    </step>
   </procedure>
   <para>
    啟始化 SBD 裝置之後，編輯 SBD 組態檔案，然後啟用並啟動相應的服務以讓變更生效。
   </para>

   <procedure xml:id="pro-ha-storage-protect-sbd-config">
   <title>編輯 SBD 組態檔案</title>
    <step>
     <para>開啟檔案 <filename>/etc/sysconfig/sbd</filename>。</para>
    </step>
    <step>
     <para>搜尋以下參數︰ <parameter>SBD_DEVICE</parameter>。
     </para>
     <para>該參數指定要監控和要用於交換 SBD 訊息的裝置。
     </para>
   </step>
   <step>
    <para> 編輯此行，並使用您的 SBD 裝置取代 <replaceable>SBD</replaceable>︰</para>
    <screen>SBD_DEVICE="/dev/<replaceable>SBD</replaceable>"</screen>
    <para> 如果您需要在第一行中指定多部裝置，請使用分號分隔各裝置 (裝置順序無關緊要)︰</para>
    <screen>SBD_DEVICE="/dev/<replaceable>SBD1</replaceable>; /dev/<replaceable>SBD2</replaceable>; /dev/<replaceable>SBD3</replaceable>"</screen>
    <para> 如果無法存取 SBD 裝置，精靈將無法啟動叢集，並會禁止叢集啟動。 </para>
   </step>
   <step xml:id="st-ha-storage-protect-sbd-delay-start">
    <para>搜尋以下參數︰ <parameter>SBD_DELAY_START</parameter>。</para>
    <para>
      啟用或停用延遲。設定 <parameter>SBD_DELAY_START</parameter>
      為 <literal>yes</literal> (如果 <literal>msgwait</literal> 相對較長，而叢集節點開機很快)。將此參數設定為 <literal>yes</literal> 可在開機時延遲 SBD 啟動。虛擬機器有時候需要此項延遲。
    </para>
   </step>
  </procedure>

 <para>將您的 SBD 裝置新增至 SBD 組態檔案之後，啟用 SBD 精靈。SBD 精靈是叢集堆疊的重要組成部分。當叢集堆疊正在執行時，需要執行該精靈。因此，每當啟動 <systemitem>pacemaker</systemitem> 服務時，做為相依項，也要啟動 <systemitem>sbd</systemitem> 服務。</para>

  <procedure xml:id="pro-ha-storage-protect-sbd-services">
   <title>啟用和啟動 SBD 服務</title>
   <step>
    <para>在每個節點上，啟用 SBD 服務︰</para>
    <screen><prompt role="root">root # </prompt><command>systemctl</command> enable sbd</screen>
    <para>每當啟動 Pacemaker 服務時，SBD 服務將與 Corosync 服務一起啟動。</para>
   </step>
   <step>
    <para>在每個節點上重新啟動叢集堆疊︰</para>
    <screen><prompt role="root">root # </prompt><command>systemctl</command> stop pacemaker
<prompt role="root">root # </prompt><command>systemctl</command> start pacemaker</screen>
    <para> 此操作會自動觸發 SBD 精靈的啟動。 </para>
   </step>
  </procedure>

  <para>
   下一步是測試 SBD 裝置，請參閱<xref linkend="pro-ha-storage-protect-sbd-test" xrefstyle="select:label"/>。
  </para>

  <procedure xml:id="pro-ha-storage-protect-sbd-test">
   <title>測試 SBD 裝置</title>
    <step>
     <para> 下列指令會從 SBD 裝置傾印節點插槽及其目前的訊息︰ </para>
     <screen><prompt role="root">root # </prompt><command>sbd</command> -d /dev/<replaceable>SBD</replaceable> list</screen>
    <para> 現在，您應該會看到曾隨 SBD 啟動的所有叢集節點都列在此處。例如，如果您擁有雙節點叢集，訊息插槽對於兩個節點都應顯示 <literal>clear</literal>︰</para>
     <screen>0       alice        clear
1       bob          clear</screen>
    </step>
    <step>
     <para> 嘗試向其中一個節點傳送一則測試訊息︰ </para>
     <screen><prompt role="root">root # </prompt><command>sbd</command> -d /dev/<replaceable>SBD</replaceable> message alice test</screen>
    </step>
    <step>
     <para> 節點會在系統記錄檔案中確認收到訊息︰ </para>
     <screen>May 03 16:08:31 alice sbd[66139]: /dev/<replaceable>SBD</replaceable>: notice: servant: Received command test from bob on disk /dev/<replaceable>SBD</replaceable></screen>
     <para> 這証實了節點上的 SBD 目前的確在正常執行，並且可以接收訊息。 </para>
    </step>
   </procedure>

  <para>
   在最後一個步驟中，您需要調整叢集組態，請參閱<xref linkend="pro-ha-storage-protect-fencing" xrefstyle="select:label"/>。
  </para>

<procedure xml:id="pro-ha-storage-protect-fencing">
 <title>將叢集設定為使用 SBD</title>
   <para>
    若要設定在叢集中使用 SBD，您需要在叢集組態中執行以下操作︰
   </para>
   <itemizedlist>
    <listitem>
     <para>
       將 <parameter>stonith-timeout</parameter> 參數設定為與您的設定相符的值。
     </para>
    </listitem>
    <listitem>
     <para>
      設定 SBD STONITH 資源。
     </para>
    </listitem>
   </itemizedlist>
   <para>
     如需計算 <parameter>stonith-timeout</parameter> ，請參閱<xref linkend="sec-ha-storage-protect-watchdog-timings"/>。
   </para>
   <step>
    <para>
     啟動外圍程序，並以 <systemitem class="username">root</systemitem> 或同等身分登入。
    </para>
   </step>
   <step>
    <para>
     執行 <command>crm</command> <option>configure</option>。
    </para>
   </step>
   <step>
    <para>輸入以下內容︰</para>
    <screen>
<prompt role="custom">crm(live)configure# </prompt><command>property</command> stonith-enabled="true" <co xml:id="co-ha-sbd-st-enabled"/>
<prompt role="custom">crm(live)configure# </prompt><command>property</command> stonith-watchdog-timeout=0 <co xml:id="co-ha-sbd-watchdog-timeout"/>
<prompt role="custom">crm(live)configure# </prompt><command>property</command> stonith-timeout="220s" <co xml:id="co-ha-sbd-st-timeout"/></screen>
    <calloutlist>
     <callout arearefs="co-ha-sbd-st-enabled">
      <para>
       此為預設組態，因為不支援沒有 STONITH 的叢集。而如果出於測試目的停用了 STONITH，請確定再次將此參數設定為 <literal>true</literal>。</para>
     </callout>
     <callout arearefs="co-ha-sbd-watchdog-timeout">
      <para>如果未明確設定，則預設值為 <literal>0</literal>，此值適用於 SBD 與一到三部裝置搭配使用的情況。
      </para>
     </callout>
     <callout arearefs="co-ha-sbd-st-timeout">
      <para>
       如果將 SBD 的 <literal>msgwait</literal> 逾時值設定為 <literal>30</literal> 秒，則適合將 <systemitem>stonith-timeout</systemitem> 值設定為 <literal>220</literal>。</para>
     </callout>
   </calloutlist>
  </step>
  <step>
   <para>對於雙節點叢集，請確定您希望延遲是可預測還是隨機的。對於其他類型的叢集，則不需要設定此參數。</para>
   <variablelist>
    <varlistentry>
     <term>可預測的靜態延遲</term>
     <listitem>
      <para>此參數會在執行 STONITH 動作之前啟用靜態延遲。它可以確定在使用不同圍籬區隔資源和不同延遲值時，節點不會互相圍籬區隔。在發生<quote>圍籬區隔競爭</quote>時，目標節點將會落敗。使用該參數可將特定的節點<quote>標記</quote>為在雙節點叢集出現電腦分裂時能夠留存。若要實現此目的，為每個節點建立兩個基本 STONITH 裝置至關重要。在下面的組態中，如果出現電腦分裂，alice 將會獲勝並得以留存︰
      </para>
      <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive</command> st-sbd-alice stonith:external/sbd params \
       pcmk_host_list=alice pcmk_delay_base=20
<prompt role="custom">crm(live)configure# </prompt><command>primitive</command> st-sbd-bob stonith:external/sbd params \
       pcmk_host_list=bob pcmk_delay_base=0</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>動態隨機延遲</term>
     <listitem>
      <para>此參數防止在使用慢速裝置 (例如 SBD) 時出現雙重圍籬區隔。它會為圍籬區隔裝置上的 STONITH 動作新增隨機延遲。這對於雙節點叢集尤為重要，否則若發生電腦分裂的情況，兩個節點可能都會嘗試相互圍籬區隔。</para>
      <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive</command> stonith_sbd stonith:external/sbd
  params pcmk_delay_max=30</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </step>
  <step>
    <para>
     使用 <command>show</command> 檢閱所做的變更。
    </para>
   </step>
   <step>
    <para>
     使用 <command>commit</command> 提交變更，然後使用 <command>exit</command> 離開 crm 即時組態。
    </para>
   </step>
  </procedure>

   <para> 啟動資源之後，叢集即會成功設定為使用 SBD。如果需要圍籬區隔某個節點，將會使用此方法。</para>
  </sect1>

  <sect1 xml:id="sec-ha-storage-protect-diskless-sbd">
   <title>設定無磁碟 SBD</title>
   <para>SBD 可在無磁碟模式下操作。在此模式下，發生以下情況時，將使用監視程式裝置來重置節點︰如果不具有最低節點數、如果任何受監控的精靈遺失且未復原，或者如果 Pacemaker 決定節點需要圍籬區隔。無磁碟 SBD 基於節點的<quote>自我圍籬區隔</quote>，取決於叢集的狀態、最低節點數和一些合理的假設。CIB 中不需要 STONITH SBD 基本資源。
   </para>
    <important>
     <title>叢集節點數</title>
       <para>
         <emphasis>不要</emphasis>將無磁碟 SBD 用做雙節點叢集的圍籬區隔機制。請僅在三節點或更多節點的叢集中使用此機制。無磁碟模式下的 SBD 無法處理雙節點叢集的電腦分裂情況。
      </para>
   </important>

   <procedure xml:id="pro-ha-storage-protect-confdiskless">
    <title>設定無磁碟 SBD</title>
    <step>
     <para>開啟檔案 <filename>/etc/sysconfig/sbd</filename> 並使用以下項目︰</para>
     <screen>SBD_PACEMAKER=yes
SBD_STARTMODE=always
SBD_DELAY_START=no
SBD_WATCHDOG_DEV=/dev/watchdog
SBD_WATCHDOG_TIMEOUT=5</screen>
      <para>
       該  <varname>SBD_DEVICE</varname>  項目不需要，因為未使用共享磁碟。此參數遺失時，<systemitem>sbd</systemitem> 服務不會為 SBD 裝置啟動任何監看員程序。
      </para>
    </step>
    <step>
     <para>在每個節點上，啟用 SBD 服務︰</para>
     <screen><prompt role="root">root # </prompt><command>systemctl</command> enable sbd</screen>
     <para>每當啟動 Pacemaker 服務時，SBD 服務將與 Corosync 服務一起啟動。</para>
    </step>
    <step>
     <para>在每個節點上重新啟動叢集堆疊︰</para>
     <screen><prompt role="root">root # </prompt><command>systemctl</command> stop pacemaker
<prompt role="root">root # </prompt><command>systemctl</command> start pacemaker</screen>
     <para> 此操作會自動觸發 SBD 精靈的啟動。 </para>
    </step>
    <step>
      <para>
       檢查參數  <parameter>have-watchdog=true</parameter>  是否已自動設定︰
      </para>
      <screen><prompt role="root">root # </prompt><command>crm</command> configure show | grep have-watchdog
         have-watchdog=true</screen>
    </step>
    <step>
     <para>執行 <command>crm configure</command> 並在 crm 外圍程序上設定以下叢集屬性︰</para>
<screen><prompt role="custom">crm(live)configure# </prompt><command>property</command> stonith-enabled="true" <co xml:id="co-ha-sbd-stonith-enabled"/>
<prompt role="custom">crm(live)configure# </prompt><command>property</command> stonith-watchdog-timeout=10 <co xml:id="co-ha-sbd-diskless-watchdog-timeout"/></screen>
    <calloutlist>
     <callout arearefs="co-ha-sbd-stonith-enabled">
      <para>
       此為預設組態，因為不支援沒有 STONITH 的叢集。而如果出於測試目的停用了 STONITH，請確定再次將此參數設定為 <literal>true</literal>。</para>
     </callout>
     <callout arearefs="co-ha-sbd-diskless-watchdog-timeout">
      <para>對於無磁碟 SBD，此參數不能為零。它定義了經過多長時間之後可以假定圍籬區隔目標已自我圍籬區隔。因此，其值必須大於等於 
       <varname>SBD_WATCHDOG_TIMEOUT</varname>  (<filename>/etc/sysconfig/sbd</filename> 中) 的值。從 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise High Availability Extension</phrase></phrase> 15 開始，如果您將  <parameter>stonith-watchdog-timeout</parameter>
        設定為負值，Pacemaker 將自動計算此逾時並將它設定為  <parameter>SBD_WATCHDOG_TIMEOUT</parameter> 值的兩倍。
      </para>
     </callout>
    </calloutlist>
   </step>
  <step>
    <para>
     使用 <command>show</command> 檢閱所做的變更。
    </para>
   </step>
   <step>
    <para>
     使用 <command>commit</command> 提交變更，然後使用 <command>exit</command> 離開 crm 即時組態。
    </para>
   </step>
  </procedure>
  </sect1>

  <sect1 xml:id="sec-ha-storage-protect-test">
   <title>測試 SBD 和圍籬區隔</title>
   <para>若要測試 SBD 在節點圍籬區隔方面是否如預期工作，請使用以下其中一種或所有方法︰
   </para>
  <variablelist>
   <varlistentry>
    <term>手動觸發節點圍籬區隔</term>
    <listitem>
     <para>若要針對節點 <replaceable>NODENAME</replaceable> 觸發圍籬區隔動作，請執行以下操作︰</para>
 <screen><prompt role="root">root # </prompt><command>crm</command> node fence <replaceable>NODENAME</replaceable></screen>
     <para>檢查經過以下時間之後，節點是否已圍籬區隔，以及其他節點是否將該節點視為已圍籬區隔︰ <parameter>stonith-watchdog-timeout</parameter>。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>模擬 SBD 失敗</term>
    <listitem>
     <procedure>
      <step>
       <para>辨識 SBD inquisitor 的程序 ID︰</para>
       <screen><prompt role="root">root # </prompt><command>systemctl</command> status sbd
● sbd.service - Shared-storage based fencing daemon

   Loaded: loaded (/usr/lib/systemd/system/sbd.service; enabled; vendor preset: disabled)
   Active: active (running) since Tue 2018-04-17 15:24:51 CEST; 6 days ago
     Docs: man:sbd(8)
  Process: 1844 ExecStart=/usr/sbin/sbd $SBD_OPTS -p /var/run/sbd.pid watch (code=exited, status=0/SUCCESS)
 Main PID: 1859 (sbd)
    Tasks: 4 (limit: 4915)
   CGroup: /system.slice/sbd.service
           ├─<emphasis role="strong">1859 sbd: inquisitor</emphasis>
[...]</screen>
      </step>
      <step>
       <para>透過終止 SBD inquisitor 程序模擬 SBD 失敗。在我們的範例中，SBD inquisitor 的程序 ID 是 <literal>1859</literal>︰</para>
       <screen><prompt role="root">root # </prompt><command>kill</command> -9 1859 </screen>
       <para>
        節點主動自我圍籬區隔。經過以下時間之後，其他節點注意到該節點遺失並將它視為已自我圍籬區隔︰
        <parameter>stonith-watchdog-timeout</parameter>。
       </para>
      </step>
     </procedure>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>透過監控操作失敗觸發圍籬區隔</term>
    <listitem>
     <para>對於正常組態，資源<emphasis>停止操作</emphasis>失敗將觸發圍籬區隔。若要手動觸發圍籬區隔，您可以產生一個資源停止操作失敗。或者，您可以暫時變更資源<emphasis>監控操作</emphasis>的組態，產生一個監控失敗，如下所示︰</para>
     <procedure>
      <step>
       <para>設定資源監控操作的 <literal>on-fail=fence</literal> 內容︰</para>
       <screen>op monitor interval=10 on-fail=fence</screen>
      </step>
      <step>
       <para>讓監控操作失敗 (例如，如果資源與某個服務相關，則可透過終止相應的精靈來實現)。</para>
       <para>此失敗會觸發圍籬區隔動作。</para>
      </step>
     </procedure>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="sec-ha-storage-protect-rsc-fencing">
  <title>儲存保護的其他機制</title>
  <remark>toms 2018-09-27: (lpinne): the whole SBD chapter should go to the
   STONITH chapter.
   SBD is the recommended method for general node fencing. It is not
   particularly related to storage protection. In opposite, sfex and
   sg_persist are purely storage protection.</remark>
  <para>除了透過 STONITH 進行節點圍籬區隔之外，還可使用其他方法在資源層級實現儲存保護。例如，SCSI-3 和 SCSI-4 使用持續保留，而 <literal>sfex</literal> 提供鎖定機制。這兩種方法將在下面的小節中介紹。
  </para>
  <sect2 xml:id="sec-ha-storage-protect-sgpersist">
   <title>設定 sg_persist 資源</title>
   <remark>toms 2018-04-20: I would like to see a little bit more background
   information. </remark>
   <para>
    SCSI 規格 3 和 4 定義了<emphasis>持續保留</emphasis>。其屬於 SCSI 通訊協定功能，可用於 I/O 圍籬區隔和容錯移轉。此功能在 <command>sg_persist</command> Linux 指令中實作。
   </para>
   <note>
    <title>SCSI 磁碟相容性</title>
    <para> 用於 <literal>sg_persist</literal> 的所有備份磁碟都必須與 SCSI 磁碟相容。<literal>sg_persist</literal> 僅適用於 SCSI 磁碟或 iSCSI LUN 等裝置。<remark>toms 2018-04-20: What about FCoE, FC, iSER, SRP, Serial Attached SCSI (SAR)?</remark><emphasis>不要</emphasis>將它用於 IDE、SATA 或不支援 SCSI 通訊協定的任何區塊裝置。 </para>
   </note>
   <para>繼續操作之前，請檢查您的磁碟是否支援持續保留。使用以下指令 (使用您的裝置名稱取代 <replaceable>DISK</replaceable>)︰</para>
    <screen><prompt role="root">root # </prompt><command>sg_persist</command> -n --in --read-reservation -d /dev/<replaceable>DISK</replaceable></screen>
   <para>結果將顯示您的磁碟是否支援持續保留︰</para>
    <itemizedlist>
     <listitem>
      <para>支援的磁碟︰</para>
      <screen>PR generation=0x0, there is NO reservation held</screen>
     </listitem>
     <listitem>
      <para>不支援的磁碟︰</para>
      <screen>PR in (Read reservation): command not supported
Illegal request, Invalid opcode</screen>
     </listitem>
    </itemizedlist>

   <remark>toms 2018-04-20: Do we need to prepare anything else with sg_persists?</remark>
   <para>如果您收到錯誤訊息 (如上面所示)，請使用 SCSI 相容的磁碟取代舊磁碟。否則請執行如下操作︰</para>
   <procedure>
    <step>
     <para>
      若要建立基本資源 <literal>sg_persist</literal>，請以 <systemitem class="username">root</systemitem> 身分執行以下指令︰ </para>
     <screen><prompt role="root">root # </prompt><command>crm</command> configure
<prompt role="custom">crm(live)configure# </prompt><command>primitive</command> sg sg_persist \
    params devs="/dev/sdc" reservation_type=3 \
    op monitor interval=60 timeout=60</screen>
    </step>
    <step>
     <para> 將 <literal>sg_persist</literal> 基本資源新增至主要-從屬群組︰<remark>taroth 2018-03-05: ygao, should 'master-max' be replaced
       with 'promoted-max' or does the screen below need more changes? - ygao
       2018-03-13: the new names are not explicitly promoted in crmsh
       yet</remark>
     </para>
     <screen><prompt role="custom">crm(live)configure# </prompt><command>ms</command> ms-sg sg \
    meta master-max=1 notify=true</screen>
    </step>
    <step>
     <para> 執行一些測試。當資源處於主要/從屬狀態時，您可以在執行主要例項的叢集節點上的 <filename>/dev/sdc1</filename> 中進行掛接和寫入，但無法在執行從屬例項的叢集節點上進行寫入。</para>
    </step>
    <step>
     <para> 為 Ext4 新增檔案系統基本資源︰ </para>
     <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive</command> ext4 ocf:heartbeat:Filesystem \
    params device="/dev/sdc1" directory="/mnt/ext4" fstype=ext4</screen>
    </step>
    <step>
     <para> 在 <literal>sg_persist</literal> 主要資源和檔案系統資源之間新增以下順序關係和併置︰ </para>
     <screen><prompt role="custom">crm(live)configure# </prompt><command>order</command> o-ms-sg-before-ext4 inf: ms-sg:promote ext4:start
<prompt role="custom">crm(live)configure# </prompt><command>colocation</command> col-ext4-with-sg-persist inf: ext4 ms-sg:Master</screen>
    </step>
    <step>
     <para> 使用 <command>show</command> 指令檢查所有變更。
     </para>
    </step>
    <step>
     <para> 提交您的變更。 </para>
    </step>
   </procedure>
   <para>如需詳細資訊，請參閱 <command>sg_persist</command> man 頁面。</para>
  </sect2>

  <sect2 xml:id="sec-ha-storage-protect-exstoract">
   <title>使用 <literal>sfex</literal> 確保獨佔啟用儲存</title>
    <para>
     <remark>taroth 2018-04-26: ToDo - for next release, revise this section, too,
     and flatten its structure</remark>本節介紹的 <literal>sfex</literal> 是一個附加的低層機制，用於將對共享儲存的存取鎖定給某個節點。請注意，sfex 並不會取代 STONITH。由於 sfex 需要共享儲存，因此建議在儲存的其他分割區上使用上述 SBD 節點圍籬區隔機制。
   </para>

   <para>
    依照設計，sfex 不能與需要並行的工作負載 (例如 OCFS2) 配合使用。其可做為傳統容錯移轉型工作負載的一層保護。其效果與 SCSI-2 保留類似，但更具一般性。
   </para>

   <sect3 xml:id="sec-ha-storage-protect-exstoract-description">
    <title>綜覽</title>
    <para>
     在共享儲存環境中，會額外設定一個小分割區，用於儲存一或多個鎖定。
    </para>
    <para>
     節點必須先取得保護鎖定，才能獲取受保護的資源。順序由 Pacemaker 強制設定。sfex 元件可確保即使 Pacemaker 遇到電腦分裂的情況，系統也不會多次授予鎖定。
    </para>
    <para>
     系統必須定期重新整理鎖定，這樣即使節點停止回應，也不會永久封鎖鎖定，其他節點仍能繼續處理。
    </para>
   </sect3>

   <sect3 xml:id="sec-ha-storage-protect-exstoract-requirements">
    <title>設定</title>
    <para>
     下例說明了如何建立用於 sfex 的共享分割區，以及如何在 CIB 中為 sfex 鎖定設定資源。一個 sfex 分割區可保存任意個鎖定，每個鎖定需要配置 1 KB 儲存空間。<command>sfex_init</command> 預設會在分割區上建立一個鎖定。
    </para>
    <important>
     <title>要求</title>
     <itemizedlist>
      <listitem>
       <para>
        sfex 的共享分割區應與您要保護的資料位於同一個邏輯單位上。
       </para>
      </listitem>
      <listitem>
       <para>
        共享 sfex 分割區不得使用基於主機的 RAID 或 DRBD。
       </para>
      </listitem>
      <listitem>
       <para>
        可以使用 LVM2 邏輯磁碟區。
       </para>
      </listitem>
     </itemizedlist>
    </important>
    <procedure>
     <title>建立 sfex 分割區</title>
     <step>
      <para>
       建立一個共享分割區用於 sfex。記下此分割區的名稱，並用其取代下面的 <filename>/dev/sfex</filename>。
      </para>
     </step>
     <step>
      <para>
       使用以下指令建立 sfex 中繼資料︰
      </para>
      <screen><prompt role="root">root # </prompt><command>sfex_init</command> -n 1 /dev/sfex</screen>
     </step>
     <step>
      <para>
       驗證中繼資料是否已正確建立︰
      </para>
      <screen><prompt role="root">root # </prompt><command>sfex_stat</command> -i 1 /dev/sfex ; echo $?</screen>
      <para>
       此指令應傳回 <literal>2</literal>，因為目前並未鎖定。
      </para>
     </step>
    </procedure>
    <procedure>
     <title>設定 sfex 鎖定的資源</title>
     <step>
      <para>
       sfex 鎖定透過 CIB 中的資源表示，設定如下所示︰
      </para>
      <screen><prompt role="custom">crm(live)configure# </prompt><command>primitive</command> sfex_1 ocf:heartbeat:sfex \
#	params device="/dev/sfex" index="1" collision_timeout="1" \
      lock_timeout="70" monitor_interval="10" \
#	op monitor interval="10s" timeout="30s" on-fail="fence"</screen>
     </step>
     <step>
      <para>
       若要透過 sfex 鎖定保護資源，請在要保護的資源與 sfex 資源之間建立強制性順序和配置條件約束。假設要保護的資源 ID 是 <literal>filesystem1</literal>︰
      </para>
      <screen><prompt role="custom">crm(live)configure# </prompt><command>order</command> order-sfex-1 inf: sfex_1 filesystem1
<prompt role="custom">crm(live)configure# </prompt><command>colocation</command> col-sfex-1 inf: filesystem1 sfex_1</screen>
     </step>
     <step>
      <para>
       如果使用群組語法，請將 sfex 資源做為第一個資源新增到群組中︰
      </para>
      <screen><prompt role="custom">crm(live)configure# </prompt><command>group</command> LAMP sfex_1 filesystem1 apache ipaddr</screen>
     </step>
    </procedure>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="sec-ha-storage-protect-moreinfo">
  <title>更多資訊</title>

  <itemizedlist>
    <listitem>
      <para><command>man sbd</command></para>
    </listitem>
     <listitem>
      <para><link xlink:href="https://github.com/ClusterLabs/sbd"/></para>
    </listitem>
  </itemizedlist>
 </sect1>
</chapter>
